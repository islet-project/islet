// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: certifier.proto

#include "certifier.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_certifier_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_channel_key_message_certifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_certifier_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_claim_message_certifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_certifier_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ecc_message_certifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_certifier_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_entity_message_certifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_certifier_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_environment_certifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_certifier_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_evidence_certifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_certifier_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_evidence_package_certifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_certifier_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_key_message_certifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_certifier_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_platform_certifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_certifier_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_point_message_certifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_certifier_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_proof_step_certifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_certifier_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_properties_certifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_certifier_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_property_certifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_certifier_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_rsa_message_certifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_certifier_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_signed_claim_message_certifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_certifier_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_storage_info_message_certifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_certifier_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_tagged_blob_message_certifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_certifier_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_tagged_claim_certifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_certifier_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_tagged_signed_claim_certifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_certifier_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_trusted_service_message_certifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_certifier_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_vse_clause_certifier_2eproto;
class time_pointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<time_point> _instance;
} _time_point_default_instance_;
class rsa_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<rsa_message> _instance;
} _rsa_message_default_instance_;
class point_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<point_message> _instance;
} _point_message_default_instance_;
class ecc_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ecc_message> _instance;
} _ecc_message_default_instance_;
class key_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<key_message> _instance;
} _key_message_default_instance_;
class protected_blob_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<protected_blob_message> _instance;
} _protected_blob_message_default_instance_;
class propertyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<property> _instance;
} _property_default_instance_;
class propertiesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<properties> _instance;
} _properties_default_instance_;
class platformDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<platform> _instance;
} _platform_default_instance_;
class environmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<environment> _instance;
} _environment_default_instance_;
class entity_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<entity_message> _instance;
} _entity_message_default_instance_;
class vse_clauseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<vse_clause> _instance;
} _vse_clause_default_instance_;
class vse_clausesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<vse_clauses> _instance;
} _vse_clauses_default_instance_;
class claim_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<claim_message> _instance;
} _claim_message_default_instance_;
class attestation_user_dataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<attestation_user_data> _instance;
} _attestation_user_data_default_instance_;
class vse_attestation_report_infoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<vse_attestation_report_info> _instance;
} _vse_attestation_report_info_default_instance_;
class signed_reportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<signed_report> _instance;
} _signed_report_default_instance_;
class signed_claim_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<signed_claim_message> _instance;
} _signed_claim_message_default_instance_;
class evidenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<evidence> _instance;
} _evidence_default_instance_;
class evidence_listDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<evidence_list> _instance;
} _evidence_list_default_instance_;
class sev_attestation_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<sev_attestation_message> _instance;
} _sev_attestation_message_default_instance_;
class gramine_attestation_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<gramine_attestation_message> _instance;
} _gramine_attestation_message_default_instance_;
class evidence_packageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<evidence_package> _instance;
} _evidence_package_default_instance_;
class certifier_rulesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<certifier_rules> _instance;
} _certifier_rules_default_instance_;
class proved_statementsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<proved_statements> _instance;
} _proved_statements_default_instance_;
class proof_stepDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<proof_step> _instance;
} _proof_step_default_instance_;
class proofDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<proof> _instance;
} _proof_default_instance_;
class trust_request_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<trust_request_message> _instance;
} _trust_request_message_default_instance_;
class trust_response_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<trust_response_message> _instance;
} _trust_response_message_default_instance_;
class storage_info_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<storage_info_message> _instance;
} _storage_info_message_default_instance_;
class channel_key_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<channel_key_message> _instance;
} _channel_key_message_default_instance_;
class trusted_service_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<trusted_service_message> _instance;
} _trusted_service_message_default_instance_;
class tagged_claimDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<tagged_claim> _instance;
} _tagged_claim_default_instance_;
class tagged_claims_sequenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<tagged_claims_sequence> _instance;
} _tagged_claims_sequence_default_instance_;
class policy_store_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<policy_store_message> _instance;
} _policy_store_message_default_instance_;
class claims_sequenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<claims_sequence> _instance;
} _claims_sequence_default_instance_;
class signed_claim_sequenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<signed_claim_sequence> _instance;
} _signed_claim_sequence_default_instance_;
class tagged_signed_claimDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<tagged_signed_claim> _instance;
} _tagged_signed_claim_default_instance_;
class buffer_sequenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<buffer_sequence> _instance;
} _buffer_sequence_default_instance_;
class run_requestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<run_request> _instance;
} _run_request_default_instance_;
class run_responseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<run_response> _instance;
} _run_response_default_instance_;
class app_requestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<app_request> _instance;
} _app_request_default_instance_;
class app_responseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<app_response> _instance;
} _app_response_default_instance_;
class tagged_blob_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<tagged_blob_message> _instance;
} _tagged_blob_message_default_instance_;
static void InitDefaultsscc_info_app_request_certifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_app_request_default_instance_;
    new (ptr) ::app_request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::app_request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_app_request_certifier_2eproto =
{{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_app_request_certifier_2eproto}, {}};

static void InitDefaultsscc_info_app_response_certifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_app_response_default_instance_;
    new (ptr) ::app_response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::app_response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_app_response_certifier_2eproto =
{{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_app_response_certifier_2eproto}, {}};

static void InitDefaultsscc_info_attestation_user_data_certifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_attestation_user_data_default_instance_;
    new (ptr) ::attestation_user_data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::attestation_user_data::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_attestation_user_data_certifier_2eproto = {
  {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_attestation_user_data_certifier_2eproto}, {
    &scc_info_key_message_certifier_2eproto.base,
  }
};

static void InitDefaultsscc_info_buffer_sequence_certifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_buffer_sequence_default_instance_;
    new (ptr) ::buffer_sequence();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::buffer_sequence::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_buffer_sequence_certifier_2eproto =
{{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_buffer_sequence_certifier_2eproto}, {}};

static void InitDefaultsscc_info_certifier_rules_certifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_certifier_rules_default_instance_;
    new (ptr) ::certifier_rules();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::certifier_rules::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_certifier_rules_certifier_2eproto =
{{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_certifier_rules_certifier_2eproto}, {}};

static void InitDefaultsscc_info_channel_key_message_certifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_channel_key_message_default_instance_;
    new (ptr) ::channel_key_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::channel_key_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_channel_key_message_certifier_2eproto = {
  {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_channel_key_message_certifier_2eproto}, {
    &scc_info_key_message_certifier_2eproto.base,
  }
};

static void InitDefaultsscc_info_claim_message_certifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_claim_message_default_instance_;
    new (ptr) ::claim_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::claim_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_claim_message_certifier_2eproto =
{{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_claim_message_certifier_2eproto}, {}};

static void InitDefaultsscc_info_claims_sequence_certifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_claims_sequence_default_instance_;
    new (ptr) ::claims_sequence();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::claims_sequence::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_claims_sequence_certifier_2eproto = {
  {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_claims_sequence_certifier_2eproto}, {
    &scc_info_claim_message_certifier_2eproto.base,
  }
};

static void InitDefaultsscc_info_ecc_message_certifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ecc_message_default_instance_;
    new (ptr) ::ecc_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ecc_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ecc_message_certifier_2eproto = {
  {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ecc_message_certifier_2eproto}, {
    &scc_info_point_message_certifier_2eproto.base,
  }
};

static void InitDefaultsscc_info_entity_message_certifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_entity_message_default_instance_;
    new (ptr) ::entity_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::entity_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_entity_message_certifier_2eproto = {
  {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_entity_message_certifier_2eproto}, {
    &scc_info_key_message_certifier_2eproto.base,
    &scc_info_platform_certifier_2eproto.base,
    &scc_info_environment_certifier_2eproto.base,
  }
};

static void InitDefaultsscc_info_environment_certifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_environment_default_instance_;
    new (ptr) ::environment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::environment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_environment_certifier_2eproto = {
  {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_environment_certifier_2eproto}, {
    &scc_info_platform_certifier_2eproto.base,
  }
};

static void InitDefaultsscc_info_evidence_certifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_evidence_default_instance_;
    new (ptr) ::evidence();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::evidence::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_evidence_certifier_2eproto =
{{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_evidence_certifier_2eproto}, {}};

static void InitDefaultsscc_info_evidence_list_certifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_evidence_list_default_instance_;
    new (ptr) ::evidence_list();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::evidence_list::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_evidence_list_certifier_2eproto = {
  {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_evidence_list_certifier_2eproto}, {
    &scc_info_evidence_certifier_2eproto.base,
  }
};

static void InitDefaultsscc_info_evidence_package_certifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_evidence_package_default_instance_;
    new (ptr) ::evidence_package();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::evidence_package::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_evidence_package_certifier_2eproto = {
  {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_evidence_package_certifier_2eproto}, {
    &scc_info_evidence_certifier_2eproto.base,
  }
};

static void InitDefaultsscc_info_gramine_attestation_message_certifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_gramine_attestation_message_default_instance_;
    new (ptr) ::gramine_attestation_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gramine_attestation_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_gramine_attestation_message_certifier_2eproto =
{{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_gramine_attestation_message_certifier_2eproto}, {}};

static void InitDefaultsscc_info_key_message_certifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_key_message_default_instance_;
    new (ptr) ::key_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::key_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_key_message_certifier_2eproto = {
  {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_key_message_certifier_2eproto}, {
    &scc_info_rsa_message_certifier_2eproto.base,
    &scc_info_ecc_message_certifier_2eproto.base,
  }
};

static void InitDefaultsscc_info_platform_certifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_platform_default_instance_;
    new (ptr) ::platform();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::platform::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_platform_certifier_2eproto = {
  {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_platform_certifier_2eproto}, {
    &scc_info_key_message_certifier_2eproto.base,
    &scc_info_properties_certifier_2eproto.base,
  }
};

static void InitDefaultsscc_info_point_message_certifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_point_message_default_instance_;
    new (ptr) ::point_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::point_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_point_message_certifier_2eproto =
{{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_point_message_certifier_2eproto}, {}};

static void InitDefaultsscc_info_policy_store_message_certifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_policy_store_message_default_instance_;
    new (ptr) ::policy_store_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::policy_store_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_policy_store_message_certifier_2eproto = {
  {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_policy_store_message_certifier_2eproto}, {
    &scc_info_key_message_certifier_2eproto.base,
    &scc_info_trusted_service_message_certifier_2eproto.base,
    &scc_info_channel_key_message_certifier_2eproto.base,
    &scc_info_tagged_claim_certifier_2eproto.base,
    &scc_info_storage_info_message_certifier_2eproto.base,
    &scc_info_tagged_signed_claim_certifier_2eproto.base,
    &scc_info_tagged_blob_message_certifier_2eproto.base,
  }
};

static void InitDefaultsscc_info_proof_certifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_proof_default_instance_;
    new (ptr) ::proof();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proof::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_proof_certifier_2eproto = {
  {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_proof_certifier_2eproto}, {
    &scc_info_vse_clause_certifier_2eproto.base,
    &scc_info_proof_step_certifier_2eproto.base,
  }
};

static void InitDefaultsscc_info_proof_step_certifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_proof_step_default_instance_;
    new (ptr) ::proof_step();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proof_step::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_proof_step_certifier_2eproto = {
  {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_proof_step_certifier_2eproto}, {
    &scc_info_vse_clause_certifier_2eproto.base,
  }
};

static void InitDefaultsscc_info_properties_certifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_properties_default_instance_;
    new (ptr) ::properties();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::properties::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_properties_certifier_2eproto = {
  {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_properties_certifier_2eproto}, {
    &scc_info_property_certifier_2eproto.base,
  }
};

static void InitDefaultsscc_info_property_certifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_property_default_instance_;
    new (ptr) ::property();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::property::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_property_certifier_2eproto =
{{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_property_certifier_2eproto}, {}};

static void InitDefaultsscc_info_protected_blob_message_certifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_protected_blob_message_default_instance_;
    new (ptr) ::protected_blob_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protected_blob_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_protected_blob_message_certifier_2eproto =
{{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_protected_blob_message_certifier_2eproto}, {}};

static void InitDefaultsscc_info_proved_statements_certifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_proved_statements_default_instance_;
    new (ptr) ::proved_statements();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proved_statements::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_proved_statements_certifier_2eproto = {
  {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_proved_statements_certifier_2eproto}, {
    &scc_info_vse_clause_certifier_2eproto.base,
  }
};

static void InitDefaultsscc_info_rsa_message_certifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_rsa_message_default_instance_;
    new (ptr) ::rsa_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rsa_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_rsa_message_certifier_2eproto =
{{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_rsa_message_certifier_2eproto}, {}};

static void InitDefaultsscc_info_run_request_certifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_run_request_default_instance_;
    new (ptr) ::run_request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::run_request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_run_request_certifier_2eproto =
{{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_run_request_certifier_2eproto}, {}};

static void InitDefaultsscc_info_run_response_certifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_run_response_default_instance_;
    new (ptr) ::run_response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::run_response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_run_response_certifier_2eproto =
{{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_run_response_certifier_2eproto}, {}};

static void InitDefaultsscc_info_sev_attestation_message_certifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_sev_attestation_message_default_instance_;
    new (ptr) ::sev_attestation_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sev_attestation_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_sev_attestation_message_certifier_2eproto =
{{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_sev_attestation_message_certifier_2eproto}, {}};

static void InitDefaultsscc_info_signed_claim_message_certifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_signed_claim_message_default_instance_;
    new (ptr) ::signed_claim_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::signed_claim_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_signed_claim_message_certifier_2eproto = {
  {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_signed_claim_message_certifier_2eproto}, {
    &scc_info_key_message_certifier_2eproto.base,
  }
};

static void InitDefaultsscc_info_signed_claim_sequence_certifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_signed_claim_sequence_default_instance_;
    new (ptr) ::signed_claim_sequence();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::signed_claim_sequence::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_signed_claim_sequence_certifier_2eproto = {
  {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_signed_claim_sequence_certifier_2eproto}, {
    &scc_info_signed_claim_message_certifier_2eproto.base,
  }
};

static void InitDefaultsscc_info_signed_report_certifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_signed_report_default_instance_;
    new (ptr) ::signed_report();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::signed_report::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_signed_report_certifier_2eproto = {
  {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_signed_report_certifier_2eproto}, {
    &scc_info_key_message_certifier_2eproto.base,
  }
};

static void InitDefaultsscc_info_storage_info_message_certifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_storage_info_message_default_instance_;
    new (ptr) ::storage_info_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::storage_info_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_storage_info_message_certifier_2eproto = {
  {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_storage_info_message_certifier_2eproto}, {
    &scc_info_key_message_certifier_2eproto.base,
  }
};

static void InitDefaultsscc_info_tagged_blob_message_certifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_tagged_blob_message_default_instance_;
    new (ptr) ::tagged_blob_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tagged_blob_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_tagged_blob_message_certifier_2eproto =
{{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_tagged_blob_message_certifier_2eproto}, {}};

static void InitDefaultsscc_info_tagged_claim_certifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_tagged_claim_default_instance_;
    new (ptr) ::tagged_claim();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tagged_claim::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_tagged_claim_certifier_2eproto = {
  {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_tagged_claim_certifier_2eproto}, {
    &scc_info_claim_message_certifier_2eproto.base,
  }
};

static void InitDefaultsscc_info_tagged_claims_sequence_certifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_tagged_claims_sequence_default_instance_;
    new (ptr) ::tagged_claims_sequence();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tagged_claims_sequence::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_tagged_claims_sequence_certifier_2eproto = {
  {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_tagged_claims_sequence_certifier_2eproto}, {
    &scc_info_tagged_claim_certifier_2eproto.base,
  }
};

static void InitDefaultsscc_info_tagged_signed_claim_certifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_tagged_signed_claim_default_instance_;
    new (ptr) ::tagged_signed_claim();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tagged_signed_claim::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_tagged_signed_claim_certifier_2eproto = {
  {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_tagged_signed_claim_certifier_2eproto}, {
    &scc_info_signed_claim_message_certifier_2eproto.base,
  }
};

static void InitDefaultsscc_info_time_point_certifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_time_point_default_instance_;
    new (ptr) ::time_point();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::time_point::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_time_point_certifier_2eproto =
{{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_time_point_certifier_2eproto}, {}};

static void InitDefaultsscc_info_trust_request_message_certifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_trust_request_message_default_instance_;
    new (ptr) ::trust_request_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trust_request_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_trust_request_message_certifier_2eproto = {
  {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_trust_request_message_certifier_2eproto}, {
    &scc_info_evidence_package_certifier_2eproto.base,
  }
};

static void InitDefaultsscc_info_trust_response_message_certifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_trust_response_message_default_instance_;
    new (ptr) ::trust_response_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trust_response_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_trust_response_message_certifier_2eproto =
{{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_trust_response_message_certifier_2eproto}, {}};

static void InitDefaultsscc_info_trusted_service_message_certifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_trusted_service_message_default_instance_;
    new (ptr) ::trusted_service_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trusted_service_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_trusted_service_message_certifier_2eproto = {
  {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_trusted_service_message_certifier_2eproto}, {
    &scc_info_key_message_certifier_2eproto.base,
  }
};

static void InitDefaultsscc_info_vse_attestation_report_info_certifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_vse_attestation_report_info_default_instance_;
    new (ptr) ::vse_attestation_report_info();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vse_attestation_report_info::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_vse_attestation_report_info_certifier_2eproto =
{{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_vse_attestation_report_info_certifier_2eproto}, {}};

static void InitDefaultsscc_info_vse_clause_certifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_vse_clause_default_instance_;
    new (ptr) ::vse_clause();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vse_clause::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_vse_clause_certifier_2eproto = {
  {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_vse_clause_certifier_2eproto}, {
    &scc_info_entity_message_certifier_2eproto.base,
  }
};

static void InitDefaultsscc_info_vse_clauses_certifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_vse_clauses_default_instance_;
    new (ptr) ::vse_clauses();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vse_clauses::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_vse_clauses_certifier_2eproto = {
  {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_vse_clauses_certifier_2eproto}, {
    &scc_info_vse_clause_certifier_2eproto.base,
  }
};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_certifier_2eproto[44];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_certifier_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_certifier_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_certifier_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::time_point, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::time_point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::time_point, year_),
  PROTOBUF_FIELD_OFFSET(::time_point, month_),
  PROTOBUF_FIELD_OFFSET(::time_point, day_),
  PROTOBUF_FIELD_OFFSET(::time_point, hour_),
  PROTOBUF_FIELD_OFFSET(::time_point, minute_),
  PROTOBUF_FIELD_OFFSET(::time_point, seconds_),
  0,
  1,
  2,
  3,
  5,
  4,
  PROTOBUF_FIELD_OFFSET(::rsa_message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rsa_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rsa_message, public_modulus_),
  PROTOBUF_FIELD_OFFSET(::rsa_message, public_exponent_),
  PROTOBUF_FIELD_OFFSET(::rsa_message, private_exponent_),
  PROTOBUF_FIELD_OFFSET(::rsa_message, private_p_),
  PROTOBUF_FIELD_OFFSET(::rsa_message, private_q_),
  PROTOBUF_FIELD_OFFSET(::rsa_message, private_dp_),
  PROTOBUF_FIELD_OFFSET(::rsa_message, private_dq_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::point_message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::point_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::point_message, x_),
  PROTOBUF_FIELD_OFFSET(::point_message, y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ecc_message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ecc_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ecc_message, curve_name_),
  PROTOBUF_FIELD_OFFSET(::ecc_message, curve_p_),
  PROTOBUF_FIELD_OFFSET(::ecc_message, curve_a_),
  PROTOBUF_FIELD_OFFSET(::ecc_message, curve_b_),
  PROTOBUF_FIELD_OFFSET(::ecc_message, base_point_),
  PROTOBUF_FIELD_OFFSET(::ecc_message, public_point_),
  PROTOBUF_FIELD_OFFSET(::ecc_message, order_of_base_point_),
  PROTOBUF_FIELD_OFFSET(::ecc_message, private_multiplier_),
  0,
  1,
  2,
  3,
  6,
  7,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::key_message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::key_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::key_message, key_name_),
  PROTOBUF_FIELD_OFFSET(::key_message, key_type_),
  PROTOBUF_FIELD_OFFSET(::key_message, key_format_),
  PROTOBUF_FIELD_OFFSET(::key_message, rsa_key_),
  PROTOBUF_FIELD_OFFSET(::key_message, ecc_key_),
  PROTOBUF_FIELD_OFFSET(::key_message, secret_key_bits_),
  PROTOBUF_FIELD_OFFSET(::key_message, certificate_),
  PROTOBUF_FIELD_OFFSET(::key_message, other_key_formats_),
  PROTOBUF_FIELD_OFFSET(::key_message, not_before_),
  PROTOBUF_FIELD_OFFSET(::key_message, not_after_),
  0,
  1,
  2,
  8,
  9,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::protected_blob_message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protected_blob_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protected_blob_message, encrypted_key_),
  PROTOBUF_FIELD_OFFSET(::protected_blob_message, encrypted_data_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::property, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::property, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::property, property_name_),
  PROTOBUF_FIELD_OFFSET(::property, value_type_),
  PROTOBUF_FIELD_OFFSET(::property, comparator_),
  PROTOBUF_FIELD_OFFSET(::property, string_value_),
  PROTOBUF_FIELD_OFFSET(::property, int_value_),
  0,
  1,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::properties, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::properties, props_),
  PROTOBUF_FIELD_OFFSET(::platform, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::platform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::platform, platform_type_),
  PROTOBUF_FIELD_OFFSET(::platform, attest_key_),
  PROTOBUF_FIELD_OFFSET(::platform, props_),
  PROTOBUF_FIELD_OFFSET(::platform, has_key_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::environment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::environment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::environment, the_platform_),
  PROTOBUF_FIELD_OFFSET(::environment, the_measurement_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::entity_message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::entity_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::entity_message, entity_type_),
  PROTOBUF_FIELD_OFFSET(::entity_message, key_),
  PROTOBUF_FIELD_OFFSET(::entity_message, measurement_),
  PROTOBUF_FIELD_OFFSET(::entity_message, platform_ent_),
  PROTOBUF_FIELD_OFFSET(::entity_message, environment_ent_),
  0,
  2,
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::vse_clause, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vse_clause, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vse_clause, subject_),
  PROTOBUF_FIELD_OFFSET(::vse_clause, verb_),
  PROTOBUF_FIELD_OFFSET(::vse_clause, object_),
  PROTOBUF_FIELD_OFFSET(::vse_clause, clause_),
  1,
  0,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vse_clauses, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vse_clauses, clauses_),
  PROTOBUF_FIELD_OFFSET(::claim_message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::claim_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::claim_message, claim_format_),
  PROTOBUF_FIELD_OFFSET(::claim_message, claim_descriptor_),
  PROTOBUF_FIELD_OFFSET(::claim_message, not_before_),
  PROTOBUF_FIELD_OFFSET(::claim_message, not_after_),
  PROTOBUF_FIELD_OFFSET(::claim_message, serialized_claim_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::attestation_user_data, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::attestation_user_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::attestation_user_data, enclave_type_),
  PROTOBUF_FIELD_OFFSET(::attestation_user_data, time_),
  PROTOBUF_FIELD_OFFSET(::attestation_user_data, enclave_key_),
  PROTOBUF_FIELD_OFFSET(::attestation_user_data, policy_key_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::vse_attestation_report_info, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vse_attestation_report_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vse_attestation_report_info, enclave_type_),
  PROTOBUF_FIELD_OFFSET(::vse_attestation_report_info, verified_measurement_),
  PROTOBUF_FIELD_OFFSET(::vse_attestation_report_info, not_before_),
  PROTOBUF_FIELD_OFFSET(::vse_attestation_report_info, not_after_),
  PROTOBUF_FIELD_OFFSET(::vse_attestation_report_info, user_data_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::signed_report, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::signed_report, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::signed_report, report_format_),
  PROTOBUF_FIELD_OFFSET(::signed_report, report_),
  PROTOBUF_FIELD_OFFSET(::signed_report, signing_key_),
  PROTOBUF_FIELD_OFFSET(::signed_report, signing_algorithm_),
  PROTOBUF_FIELD_OFFSET(::signed_report, signature_),
  0,
  1,
  4,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::signed_claim_message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::signed_claim_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::signed_claim_message, serialized_claim_message_),
  PROTOBUF_FIELD_OFFSET(::signed_claim_message, signing_key_),
  PROTOBUF_FIELD_OFFSET(::signed_claim_message, signing_algorithm_),
  PROTOBUF_FIELD_OFFSET(::signed_claim_message, signature_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::evidence, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::evidence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::evidence, evidence_type_),
  PROTOBUF_FIELD_OFFSET(::evidence, serialized_evidence_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::evidence_list, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::evidence_list, assertion_),
  PROTOBUF_FIELD_OFFSET(::sev_attestation_message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sev_attestation_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sev_attestation_message, what_was_said_),
  PROTOBUF_FIELD_OFFSET(::sev_attestation_message, reported_attestation_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::gramine_attestation_message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gramine_attestation_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gramine_attestation_message, what_was_said_),
  PROTOBUF_FIELD_OFFSET(::gramine_attestation_message, reported_attestation_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::evidence_package, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::evidence_package, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::evidence_package, prover_type_),
  PROTOBUF_FIELD_OFFSET(::evidence_package, fact_assertion_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::certifier_rules, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::certifier_rules, rule_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proved_statements, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proved_statements, proved_),
  PROTOBUF_FIELD_OFFSET(::proof_step, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proof_step, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proof_step, s1_),
  PROTOBUF_FIELD_OFFSET(::proof_step, s2_),
  PROTOBUF_FIELD_OFFSET(::proof_step, conclusion_),
  PROTOBUF_FIELD_OFFSET(::proof_step, rule_applied_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proof, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proof, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proof, to_prove_),
  PROTOBUF_FIELD_OFFSET(::proof, already_proved_),
  PROTOBUF_FIELD_OFFSET(::proof, steps_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::trust_request_message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::trust_request_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trust_request_message, requesting_enclave_tag_),
  PROTOBUF_FIELD_OFFSET(::trust_request_message, providing_enclave_tag_),
  PROTOBUF_FIELD_OFFSET(::trust_request_message, submitted_evidence_type_),
  PROTOBUF_FIELD_OFFSET(::trust_request_message, purpose_),
  PROTOBUF_FIELD_OFFSET(::trust_request_message, support_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::trust_response_message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::trust_response_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trust_response_message, status_),
  PROTOBUF_FIELD_OFFSET(::trust_response_message, requesting_enclave_tag_),
  PROTOBUF_FIELD_OFFSET(::trust_response_message, providing_enclave_tag_),
  PROTOBUF_FIELD_OFFSET(::trust_response_message, artifact_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::storage_info_message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::storage_info_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::storage_info_message, storage_type_),
  PROTOBUF_FIELD_OFFSET(::storage_info_message, storage_descriptor_),
  PROTOBUF_FIELD_OFFSET(::storage_info_message, address_),
  PROTOBUF_FIELD_OFFSET(::storage_info_message, storage_key_),
  PROTOBUF_FIELD_OFFSET(::storage_info_message, tag_),
  0,
  1,
  2,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::channel_key_message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::channel_key_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::channel_key_message, tag_),
  PROTOBUF_FIELD_OFFSET(::channel_key_message, auth_key_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::trusted_service_message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::trusted_service_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trusted_service_message, trusted_service_address_),
  PROTOBUF_FIELD_OFFSET(::trusted_service_message, trusted_service_key_),
  PROTOBUF_FIELD_OFFSET(::trusted_service_message, tag_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::tagged_claim, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tagged_claim, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tagged_claim, tag_),
  PROTOBUF_FIELD_OFFSET(::tagged_claim, claim_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tagged_claims_sequence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tagged_claims_sequence, claims_),
  PROTOBUF_FIELD_OFFSET(::policy_store_message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::policy_store_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::policy_store_message, policy_key_),
  PROTOBUF_FIELD_OFFSET(::policy_store_message, trusted_services_),
  PROTOBUF_FIELD_OFFSET(::policy_store_message, channel_authentication_keys_),
  PROTOBUF_FIELD_OFFSET(::policy_store_message, claims_),
  PROTOBUF_FIELD_OFFSET(::policy_store_message, storage_info_),
  PROTOBUF_FIELD_OFFSET(::policy_store_message, signed_claims_),
  PROTOBUF_FIELD_OFFSET(::policy_store_message, blobs_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::claims_sequence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::claims_sequence, claims_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::signed_claim_sequence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::signed_claim_sequence, claims_),
  PROTOBUF_FIELD_OFFSET(::tagged_signed_claim, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tagged_signed_claim, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tagged_signed_claim, tag_),
  PROTOBUF_FIELD_OFFSET(::tagged_signed_claim, sc_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::buffer_sequence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::buffer_sequence, block_),
  PROTOBUF_FIELD_OFFSET(::run_request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::run_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::run_request, location_),
  PROTOBUF_FIELD_OFFSET(::run_request, cert_),
  PROTOBUF_FIELD_OFFSET(::run_request, args_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::run_response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::run_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::run_response, status_),
  0,
  PROTOBUF_FIELD_OFFSET(::app_request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::app_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::app_request, function_),
  PROTOBUF_FIELD_OFFSET(::app_request, args_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::app_response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::app_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::app_response, function_),
  PROTOBUF_FIELD_OFFSET(::app_response, status_),
  PROTOBUF_FIELD_OFFSET(::app_response, args_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::tagged_blob_message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tagged_blob_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tagged_blob_message, tag_),
  PROTOBUF_FIELD_OFFSET(::tagged_blob_message, b_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::time_point)},
  { 17, 29, sizeof(::rsa_message)},
  { 36, 43, sizeof(::point_message)},
  { 45, 58, sizeof(::ecc_message)},
  { 66, 81, sizeof(::key_message)},
  { 91, 98, sizeof(::protected_blob_message)},
  { 100, 110, sizeof(::property)},
  { 115, -1, sizeof(::properties)},
  { 121, 130, sizeof(::platform)},
  { 134, 141, sizeof(::environment)},
  { 143, 153, sizeof(::entity_message)},
  { 158, 167, sizeof(::vse_clause)},
  { 171, -1, sizeof(::vse_clauses)},
  { 177, 187, sizeof(::claim_message)},
  { 192, 201, sizeof(::attestation_user_data)},
  { 205, 215, sizeof(::vse_attestation_report_info)},
  { 220, 230, sizeof(::signed_report)},
  { 235, 244, sizeof(::signed_claim_message)},
  { 248, 255, sizeof(::evidence)},
  { 257, -1, sizeof(::evidence_list)},
  { 263, 270, sizeof(::sev_attestation_message)},
  { 272, 279, sizeof(::gramine_attestation_message)},
  { 281, 288, sizeof(::evidence_package)},
  { 290, -1, sizeof(::certifier_rules)},
  { 296, -1, sizeof(::proved_statements)},
  { 302, 311, sizeof(::proof_step)},
  { 315, 323, sizeof(::proof)},
  { 326, 336, sizeof(::trust_request_message)},
  { 341, 350, sizeof(::trust_response_message)},
  { 354, 364, sizeof(::storage_info_message)},
  { 369, 376, sizeof(::channel_key_message)},
  { 378, 386, sizeof(::trusted_service_message)},
  { 389, 396, sizeof(::tagged_claim)},
  { 398, -1, sizeof(::tagged_claims_sequence)},
  { 404, 416, sizeof(::policy_store_message)},
  { 423, -1, sizeof(::claims_sequence)},
  { 429, -1, sizeof(::signed_claim_sequence)},
  { 435, 442, sizeof(::tagged_signed_claim)},
  { 444, -1, sizeof(::buffer_sequence)},
  { 450, 458, sizeof(::run_request)},
  { 461, 467, sizeof(::run_response)},
  { 468, 475, sizeof(::app_request)},
  { 477, 485, sizeof(::app_response)},
  { 488, 495, sizeof(::tagged_blob_message)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_time_point_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_rsa_message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_point_message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ecc_message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_key_message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_protected_blob_message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_property_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_properties_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_platform_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_environment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_entity_message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_vse_clause_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_vse_clauses_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_claim_message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_attestation_user_data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_vse_attestation_report_info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_signed_report_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_signed_claim_message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_evidence_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_evidence_list_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_sev_attestation_message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_gramine_attestation_message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_evidence_package_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_certifier_rules_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_proved_statements_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_proof_step_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_proof_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_trust_request_message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_trust_response_message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_storage_info_message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_channel_key_message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_trusted_service_message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_tagged_claim_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_tagged_claims_sequence_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_policy_store_message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_claims_sequence_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_signed_claim_sequence_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_tagged_signed_claim_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_buffer_sequence_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_run_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_run_response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_app_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_app_response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_tagged_blob_message_default_instance_),
};

const char descriptor_table_protodef_certifier_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017certifier.proto\"e\n\ntime_point\022\014\n\004year\030"
  "\001 \001(\005\022\r\n\005month\030\002 \001(\005\022\013\n\003day\030\003 \001(\005\022\014\n\004hou"
  "r\030\004 \001(\005\022\016\n\006minute\030\005 \001(\005\022\017\n\007seconds\030\006 \001(\001"
  "\"\246\001\n\013rsa_message\022\026\n\016public_modulus\030\001 \001(\014"
  "\022\027\n\017public_exponent\030\002 \001(\014\022\030\n\020private_exp"
  "onent\030\003 \001(\014\022\021\n\tprivate_p\030\004 \001(\014\022\021\n\tprivat"
  "e_q\030\005 \001(\014\022\022\n\nprivate_dp\030\006 \001(\014\022\022\n\nprivate"
  "_dq\030\007 \001(\014\"%\n\rpoint_message\022\t\n\001x\030\001 \001(\014\022\t\n"
  "\001y\030\002 \001(\014\"\327\001\n\013ecc_message\022\022\n\ncurve_name\030\001"
  " \001(\t\022\017\n\007curve_p\030\002 \001(\014\022\017\n\007curve_a\030\003 \001(\014\022\017"
  "\n\007curve_b\030\004 \001(\014\022\"\n\nbase_point\030\005 \001(\0132\016.po"
  "int_message\022$\n\014public_point\030\006 \001(\0132\016.poin"
  "t_message\022\033\n\023order_of_base_point\030\007 \001(\014\022\032"
  "\n\022private_multiplier\030\010 \001(\014\"\363\001\n\013key_messa"
  "ge\022\020\n\010key_name\030\001 \001(\t\022\020\n\010key_type\030\002 \001(\t\022\022"
  "\n\nkey_format\030\003 \001(\t\022\035\n\007rsa_key\030\004 \001(\0132\014.rs"
  "a_message\022\035\n\007ecc_key\030\005 \001(\0132\014.ecc_message"
  "\022\027\n\017secret_key_bits\030\006 \001(\014\022\023\n\013certificate"
  "\030\007 \001(\014\022\031\n\021other_key_formats\030\010 \001(\014\022\022\n\nnot"
  "_before\030\t \001(\t\022\021\n\tnot_after\030\n \001(\t\"G\n\026prot"
  "ected_blob_message\022\025\n\rencrypted_key\030\001 \001("
  "\014\022\026\n\016encrypted_data\030\002 \001(\014\"r\n\010property\022\025\n"
  "\rproperty_name\030\001 \001(\t\022\022\n\nvalue_type\030\002 \001(\t"
  "\022\022\n\ncomparator\030\003 \001(\t\022\024\n\014string_value\030\004 \001"
  "(\t\022\021\n\tint_value\030\005 \001(\004\"&\n\nproperties\022\030\n\005p"
  "rops\030\001 \003(\0132\t.property\"p\n\010platform\022\025\n\rpla"
  "tform_type\030\001 \001(\t\022 \n\nattest_key\030\002 \001(\0132\014.k"
  "ey_message\022\032\n\005props\030\003 \001(\0132\013.properties\022\017"
  "\n\007has_key\030\004 \001(\010\"G\n\013environment\022\037\n\014the_pl"
  "atform\030\001 \001(\0132\t.platform\022\027\n\017the_measureme"
  "nt\030\002 \001(\014\"\235\001\n\016entity_message\022\023\n\013entity_ty"
  "pe\030\001 \001(\t\022\031\n\003key\030\002 \001(\0132\014.key_message\022\023\n\013m"
  "easurement\030\003 \001(\014\022\037\n\014platform_ent\030\004 \001(\0132\t"
  ".platform\022%\n\017environment_ent\030\005 \001(\0132\014.env"
  "ironment\"z\n\nvse_clause\022 \n\007subject\030\001 \001(\0132"
  "\017.entity_message\022\014\n\004verb\030\002 \001(\t\022\037\n\006object"
  "\030\003 \001(\0132\017.entity_message\022\033\n\006clause\030\004 \001(\0132"
  "\013.vse_clause\"+\n\013vse_clauses\022\034\n\007clauses\030\001"
  " \003(\0132\013.vse_clause\"\200\001\n\rclaim_message\022\024\n\014c"
  "laim_format\030\001 \001(\t\022\030\n\020claim_descriptor\030\002 "
  "\001(\t\022\022\n\nnot_before\030\003 \001(\t\022\021\n\tnot_after\030\004 \001"
  "(\t\022\030\n\020serialized_claim\030\005 \001(\014\"\200\001\n\025attesta"
  "tion_user_data\022\024\n\014enclave_type\030\001 \001(\t\022\014\n\004"
  "time\030\002 \001(\t\022!\n\013enclave_key\030\003 \001(\0132\014.key_me"
  "ssage\022 \n\npolicy_key\030\004 \001(\0132\014.key_message\""
  "\213\001\n\033vse_attestation_report_info\022\024\n\014encla"
  "ve_type\030\001 \001(\t\022\034\n\024verified_measurement\030\002 "
  "\001(\014\022\022\n\nnot_before\030\003 \001(\t\022\021\n\tnot_after\030\004 \001"
  "(\t\022\021\n\tuser_data\030\005 \001(\014\"\207\001\n\rsigned_report\022"
  "\025\n\rreport_format\030\001 \001(\t\022\016\n\006report\030\002 \001(\014\022!"
  "\n\013signing_key\030\003 \001(\0132\014.key_message\022\031\n\021sig"
  "ning_algorithm\030\004 \001(\t\022\021\n\tsignature\030\005 \001(\014\""
  "\211\001\n\024signed_claim_message\022 \n\030serialized_c"
  "laim_message\030\001 \001(\014\022!\n\013signing_key\030\002 \001(\0132"
  "\014.key_message\022\031\n\021signing_algorithm\030\003 \001(\t"
  "\022\021\n\tsignature\030\004 \001(\014\">\n\010evidence\022\025\n\revide"
  "nce_type\030\001 \001(\t\022\033\n\023serialized_evidence\030\002 "
  "\001(\014\"-\n\revidence_list\022\034\n\tassertion\030\001 \003(\0132"
  "\t.evidence\"N\n\027sev_attestation_message\022\025\n"
  "\rwhat_was_said\030\001 \001(\014\022\034\n\024reported_attesta"
  "tion\030\002 \001(\014\"R\n\033gramine_attestation_messag"
  "e\022\025\n\rwhat_was_said\030\001 \001(\014\022\034\n\024reported_att"
  "estation\030\002 \001(\014\"J\n\020evidence_package\022\023\n\013pr"
  "over_type\030\001 \001(\t\022!\n\016fact_assertion\030\002 \003(\0132"
  "\t.evidence\"\037\n\017certifier_rules\022\014\n\004rule\030\001 "
  "\003(\t\"0\n\021proved_statements\022\033\n\006proved\030\001 \003(\013"
  "2\013.vse_clause\"u\n\nproof_step\022\027\n\002s1\030\001 \001(\0132"
  "\013.vse_clause\022\027\n\002s2\030\002 \001(\0132\013.vse_clause\022\037\n"
  "\nconclusion\030\003 \001(\0132\013.vse_clause\022\024\n\014rule_a"
  "pplied\030\004 \001(\005\"g\n\005proof\022\035\n\010to_prove\030\001 \001(\0132"
  "\013.vse_clause\022#\n\016already_proved\030\002 \003(\0132\013.v"
  "se_clause\022\032\n\005steps\030\003 \003(\0132\013.proof_step\"\254\001"
  "\n\025trust_request_message\022\036\n\026requesting_en"
  "clave_tag\030\001 \001(\t\022\035\n\025providing_enclave_tag"
  "\030\002 \001(\t\022\037\n\027submitted_evidence_type\030\003 \001(\t\022"
  "\017\n\007purpose\030\004 \001(\t\022\"\n\007support\030\005 \001(\0132\021.evid"
  "ence_package\"y\n\026trust_response_message\022\016"
  "\n\006status\030\001 \001(\t\022\036\n\026requesting_enclave_tag"
  "\030\002 \001(\t\022\035\n\025providing_enclave_tag\030\003 \001(\t\022\020\n"
  "\010artifact\030\004 \001(\014\"\211\001\n\024storage_info_message"
  "\022\024\n\014storage_type\030\001 \001(\t\022\032\n\022storage_descri"
  "ptor\030\002 \001(\t\022\017\n\007address\030\003 \001(\t\022!\n\013storage_k"
  "ey\030\004 \001(\0132\014.key_message\022\013\n\003tag\030\005 \001(\t\"B\n\023c"
  "hannel_key_message\022\013\n\003tag\030\001 \001(\t\022\036\n\010auth_"
  "key\030\002 \001(\0132\014.key_message\"r\n\027trusted_servi"
  "ce_message\022\037\n\027trusted_service_address\030\001 "
  "\001(\t\022)\n\023trusted_service_key\030\002 \001(\0132\014.key_m"
  "essage\022\013\n\003tag\030\003 \001(\t\":\n\014tagged_claim\022\013\n\003t"
  "ag\030\001 \001(\t\022\035\n\005claim\030\002 \001(\0132\016.claim_message\""
  "7\n\026tagged_claims_sequence\022\035\n\006claims\030\001 \003("
  "\0132\r.tagged_claim\"\305\002\n\024policy_store_messag"
  "e\022 \n\npolicy_key\030\001 \001(\0132\014.key_message\0222\n\020t"
  "rusted_services\030\002 \003(\0132\030.trusted_service_"
  "message\0229\n\033channel_authentication_keys\030\003"
  " \003(\0132\024.channel_key_message\022\035\n\006claims\030\004 \003"
  "(\0132\r.tagged_claim\022+\n\014storage_info\030\005 \003(\0132"
  "\025.storage_info_message\022+\n\rsigned_claims\030"
  "\006 \003(\0132\024.tagged_signed_claim\022#\n\005blobs\030\007 \003"
  "(\0132\024.tagged_blob_message\"1\n\017claims_seque"
  "nce\022\036\n\006claims\030\001 \003(\0132\016.claim_message\">\n\025s"
  "igned_claim_sequence\022%\n\006claims\030\001 \003(\0132\025.s"
  "igned_claim_message\"E\n\023tagged_signed_cla"
  "im\022\013\n\003tag\030\001 \001(\t\022!\n\002sc\030\002 \001(\0132\025.signed_cla"
  "im_message\" \n\017buffer_sequence\022\r\n\005block\030\001"
  " \003(\014\";\n\013run_request\022\020\n\010location\030\001 \001(\t\022\014\n"
  "\004cert\030\002 \001(\014\022\014\n\004args\030\003 \003(\t\"\036\n\014run_respons"
  "e\022\016\n\006status\030\001 \001(\t\"-\n\013app_request\022\020\n\010func"
  "tion\030\001 \001(\t\022\014\n\004args\030\002 \003(\014\">\n\014app_response"
  "\022\020\n\010function\030\001 \001(\t\022\016\n\006status\030\002 \001(\t\022\014\n\004ar"
  "gs\030\003 \003(\014\"-\n\023tagged_blob_message\022\013\n\003tag\030\001"
  " \001(\t\022\t\n\001b\030\002 \001(\014"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_certifier_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_certifier_2eproto_sccs[44] = {
  &scc_info_app_request_certifier_2eproto.base,
  &scc_info_app_response_certifier_2eproto.base,
  &scc_info_attestation_user_data_certifier_2eproto.base,
  &scc_info_buffer_sequence_certifier_2eproto.base,
  &scc_info_certifier_rules_certifier_2eproto.base,
  &scc_info_channel_key_message_certifier_2eproto.base,
  &scc_info_claim_message_certifier_2eproto.base,
  &scc_info_claims_sequence_certifier_2eproto.base,
  &scc_info_ecc_message_certifier_2eproto.base,
  &scc_info_entity_message_certifier_2eproto.base,
  &scc_info_environment_certifier_2eproto.base,
  &scc_info_evidence_certifier_2eproto.base,
  &scc_info_evidence_list_certifier_2eproto.base,
  &scc_info_evidence_package_certifier_2eproto.base,
  &scc_info_gramine_attestation_message_certifier_2eproto.base,
  &scc_info_key_message_certifier_2eproto.base,
  &scc_info_platform_certifier_2eproto.base,
  &scc_info_point_message_certifier_2eproto.base,
  &scc_info_policy_store_message_certifier_2eproto.base,
  &scc_info_proof_certifier_2eproto.base,
  &scc_info_proof_step_certifier_2eproto.base,
  &scc_info_properties_certifier_2eproto.base,
  &scc_info_property_certifier_2eproto.base,
  &scc_info_protected_blob_message_certifier_2eproto.base,
  &scc_info_proved_statements_certifier_2eproto.base,
  &scc_info_rsa_message_certifier_2eproto.base,
  &scc_info_run_request_certifier_2eproto.base,
  &scc_info_run_response_certifier_2eproto.base,
  &scc_info_sev_attestation_message_certifier_2eproto.base,
  &scc_info_signed_claim_message_certifier_2eproto.base,
  &scc_info_signed_claim_sequence_certifier_2eproto.base,
  &scc_info_signed_report_certifier_2eproto.base,
  &scc_info_storage_info_message_certifier_2eproto.base,
  &scc_info_tagged_blob_message_certifier_2eproto.base,
  &scc_info_tagged_claim_certifier_2eproto.base,
  &scc_info_tagged_claims_sequence_certifier_2eproto.base,
  &scc_info_tagged_signed_claim_certifier_2eproto.base,
  &scc_info_time_point_certifier_2eproto.base,
  &scc_info_trust_request_message_certifier_2eproto.base,
  &scc_info_trust_response_message_certifier_2eproto.base,
  &scc_info_trusted_service_message_certifier_2eproto.base,
  &scc_info_vse_attestation_report_info_certifier_2eproto.base,
  &scc_info_vse_clause_certifier_2eproto.base,
  &scc_info_vse_clauses_certifier_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_certifier_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_certifier_2eproto = {
  false, false, descriptor_table_protodef_certifier_2eproto, "certifier.proto", 4415,
  &descriptor_table_certifier_2eproto_once, descriptor_table_certifier_2eproto_sccs, descriptor_table_certifier_2eproto_deps, 44, 0,
  schemas, file_default_instances, TableStruct_certifier_2eproto::offsets,
  file_level_metadata_certifier_2eproto, 44, file_level_enum_descriptors_certifier_2eproto, file_level_service_descriptors_certifier_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_certifier_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_certifier_2eproto)), true);

// ===================================================================

void time_point::InitAsDefaultInstance() {
}
class time_point::_Internal {
 public:
  using HasBits = decltype(std::declval<time_point>()._has_bits_);
  static void set_has_year(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_month(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_day(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hour(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_minute(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

time_point::time_point(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:time_point)
}
time_point::time_point(const time_point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
    _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&year_, &from.year_,
           static_cast<size_t>(reinterpret_cast<char*>(&minute_) -
                               reinterpret_cast<char*>(&year_)) + sizeof(minute_));
  // @@protoc_insertion_point(copy_constructor:time_point)
}

void time_point::SharedCtor() {
  ::memset(&year_, 0, static_cast<size_t>(
             reinterpret_cast<char*>(&minute_) -
             reinterpret_cast<char*>(&year_)) + sizeof(minute_));
}

time_point::~time_point() {
  // @@protoc_insertion_point(destructor:time_point)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void time_point::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void time_point::ArenaDtor(void* object) {
  time_point* _this = reinterpret_cast< time_point* >(object);
  (void)_this;
}
void time_point::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void time_point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const time_point& time_point::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_time_point_certifier_2eproto.base);
  return *internal_default_instance();
}


void time_point::Clear() {
// @@protoc_insertion_point(message_clear_start:time_point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&year_, 0, static_cast<size_t>(
               reinterpret_cast<char*>(&minute_) -
               reinterpret_cast<char*>(&year_)) + sizeof(minute_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* time_point::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits {};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // optional int32 year = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
        _Internal::set_has_year(&has_bits);
        year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional int32 month = 2;
    case 2:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
        _Internal::set_has_month(&has_bits);
        month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional int32 day = 3;
    case 3:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
        _Internal::set_has_day(&has_bits);
        day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional int32 hour = 4;
    case 4:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
        _Internal::set_has_hour(&has_bits);
        hour_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional int32 minute = 5;
    case 5:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
        _Internal::set_has_minute(&has_bits);
        minute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional double seconds = 6;
    case 6:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
        _Internal::set_has_seconds(&has_bits);
        seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
        ptr += sizeof(double);
      } else goto handle_unusual;
      continue;
    default: {
handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* time_point::_InternalSerialize(
  ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:time_point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 year = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_year(), target);
  }

  // optional int32 month = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_month(), target);
  }

  // optional int32 day = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_day(), target);
  }

  // optional int32 hour = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_hour(), target);
  }

  // optional int32 minute = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_minute(), target);
  }

  // optional double seconds = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
               _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:time_point)
  return target;
}

size_t time_point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:time_point)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 year = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                      this->_internal_year());
    }

    // optional int32 month = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                      this->_internal_month());
    }

    // optional int32 day = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                      this->_internal_day());
    }

    // optional int32 hour = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                      this->_internal_hour());
    }

    // optional double seconds = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional int32 minute = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                      this->_internal_minute());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
             _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void time_point::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:time_point)
  GOOGLE_DCHECK_NE(&from, this);
  const time_point* source =
    ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<time_point>(
      &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:time_point)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:time_point)
    MergeFrom(*source);
  }
}

void time_point::MergeFrom(const time_point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:time_point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      year_ = from.year_;
    }
    if (cached_has_bits & 0x00000002u) {
      month_ = from.month_;
    }
    if (cached_has_bits & 0x00000004u) {
      day_ = from.day_;
    }
    if (cached_has_bits & 0x00000008u) {
      hour_ = from.hour_;
    }
    if (cached_has_bits & 0x00000010u) {
      seconds_ = from.seconds_;
    }
    if (cached_has_bits & 0x00000020u) {
      minute_ = from.minute_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void time_point::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:time_point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void time_point::CopyFrom(const time_point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:time_point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool time_point::IsInitialized() const {
  return true;
}

void time_point::InternalSwap(time_point* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
  PROTOBUF_FIELD_OFFSET(time_point, minute_)
  + sizeof(time_point::minute_)
  - PROTOBUF_FIELD_OFFSET(time_point, year_)>(
    reinterpret_cast<char*>(&year_),
    reinterpret_cast<char*>(&other->year_));
}

::PROTOBUF_NAMESPACE_ID::Metadata time_point::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void rsa_message::InitAsDefaultInstance() {
}
class rsa_message::_Internal {
 public:
  using HasBits = decltype(std::declval<rsa_message>()._has_bits_);
  static void set_has_public_modulus(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_public_exponent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_private_exponent(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_private_p(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_private_q(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_private_dp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_private_dq(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

rsa_message::rsa_message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rsa_message)
}
rsa_message::rsa_message(const rsa_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
    _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  public_modulus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_public_modulus()) {
    public_modulus_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_public_modulus(),
                        GetArena());
  }
  public_exponent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_public_exponent()) {
    public_exponent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_public_exponent(),
                         GetArena());
  }
  private_exponent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_private_exponent()) {
    private_exponent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_private_exponent(),
                          GetArena());
  }
  private_p_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_private_p()) {
    private_p_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_private_p(),
                   GetArena());
  }
  private_q_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_private_q()) {
    private_q_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_private_q(),
                   GetArena());
  }
  private_dp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_private_dp()) {
    private_dp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_private_dp(),
                    GetArena());
  }
  private_dq_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_private_dq()) {
    private_dq_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_private_dq(),
                    GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:rsa_message)
}

void rsa_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_rsa_message_certifier_2eproto.base);
  public_modulus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_exponent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  private_exponent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  private_p_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  private_q_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  private_dp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  private_dq_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

rsa_message::~rsa_message() {
  // @@protoc_insertion_point(destructor:rsa_message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void rsa_message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  public_modulus_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_exponent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  private_exponent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  private_p_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  private_q_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  private_dp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  private_dq_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void rsa_message::ArenaDtor(void* object) {
  rsa_message* _this = reinterpret_cast< rsa_message* >(object);
  (void)_this;
}
void rsa_message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void rsa_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const rsa_message& rsa_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_rsa_message_certifier_2eproto.base);
  return *internal_default_instance();
}


void rsa_message::Clear() {
// @@protoc_insertion_point(message_clear_start:rsa_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      public_modulus_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      public_exponent_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      private_exponent_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      private_p_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      private_q_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      private_dp_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      private_dq_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* rsa_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits {};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // optional bytes public_modulus = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        auto str = _internal_mutable_public_modulus();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional bytes public_exponent = 2;
    case 2:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
        auto str = _internal_mutable_public_exponent();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional bytes private_exponent = 3;
    case 3:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
        auto str = _internal_mutable_private_exponent();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional bytes private_p = 4;
    case 4:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
        auto str = _internal_mutable_private_p();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional bytes private_q = 5;
    case 5:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
        auto str = _internal_mutable_private_q();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional bytes private_dp = 6;
    case 6:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
        auto str = _internal_mutable_private_dp();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional bytes private_dq = 7;
    case 7:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
        auto str = _internal_mutable_private_dq();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    default: {
handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* rsa_message::_InternalSerialize(
  ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rsa_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes public_modulus = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
               1, this->_internal_public_modulus(), target);
  }

  // optional bytes public_exponent = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
               2, this->_internal_public_exponent(), target);
  }

  // optional bytes private_exponent = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
               3, this->_internal_private_exponent(), target);
  }

  // optional bytes private_p = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
               4, this->_internal_private_p(), target);
  }

  // optional bytes private_q = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
               5, this->_internal_private_q(), target);
  }

  // optional bytes private_dp = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
               6, this->_internal_private_dp(), target);
  }

  // optional bytes private_dq = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteBytesMaybeAliased(
               7, this->_internal_private_dq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
               _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rsa_message)
  return target;
}

size_t rsa_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rsa_message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bytes public_modulus = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                      this->_internal_public_modulus());
    }

    // optional bytes public_exponent = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                      this->_internal_public_exponent());
    }

    // optional bytes private_exponent = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                      this->_internal_private_exponent());
    }

    // optional bytes private_p = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                      this->_internal_private_p());
    }

    // optional bytes private_q = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                      this->_internal_private_q());
    }

    // optional bytes private_dp = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                      this->_internal_private_dp());
    }

    // optional bytes private_dq = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                      this->_internal_private_dq());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
             _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void rsa_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rsa_message)
  GOOGLE_DCHECK_NE(&from, this);
  const rsa_message* source =
    ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<rsa_message>(
      &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:rsa_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:rsa_message)
    MergeFrom(*source);
  }
}

void rsa_message::MergeFrom(const rsa_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rsa_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_public_modulus(from._internal_public_modulus());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_public_exponent(from._internal_public_exponent());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_private_exponent(from._internal_private_exponent());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_private_p(from._internal_private_p());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_private_q(from._internal_private_q());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_private_dp(from._internal_private_dp());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_private_dq(from._internal_private_dq());
    }
  }
}

void rsa_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rsa_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rsa_message::CopyFrom(const rsa_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rsa_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rsa_message::IsInitialized() const {
  return true;
}

void rsa_message::InternalSwap(rsa_message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  public_modulus_.Swap(&other->public_modulus_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  public_exponent_.Swap(&other->public_exponent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  private_exponent_.Swap(&other->private_exponent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  private_p_.Swap(&other->private_p_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  private_q_.Swap(&other->private_q_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  private_dp_.Swap(&other->private_dp_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  private_dq_.Swap(&other->private_dq_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata rsa_message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void point_message::InitAsDefaultInstance() {
}
class point_message::_Internal {
 public:
  using HasBits = decltype(std::declval<point_message>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

point_message::point_message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:point_message)
}
point_message::point_message(const point_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
    _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  x_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_x()) {
    x_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_x(),
           GetArena());
  }
  y_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_y()) {
    y_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_y(),
           GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:point_message)
}

void point_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_point_message_certifier_2eproto.base);
  x_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  y_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

point_message::~point_message() {
  // @@protoc_insertion_point(destructor:point_message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void point_message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  x_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  y_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void point_message::ArenaDtor(void* object) {
  point_message* _this = reinterpret_cast< point_message* >(object);
  (void)_this;
}
void point_message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void point_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const point_message& point_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_point_message_certifier_2eproto.base);
  return *internal_default_instance();
}


void point_message::Clear() {
// @@protoc_insertion_point(message_clear_start:point_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      x_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      y_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* point_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits {};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // optional bytes x = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        auto str = _internal_mutable_x();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional bytes y = 2;
    case 2:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
        auto str = _internal_mutable_y();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    default: {
handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* point_message::_InternalSerialize(
  ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:point_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
               1, this->_internal_x(), target);
  }

  // optional bytes y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
               2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
               _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:point_message)
  return target;
}

size_t point_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:point_message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                      this->_internal_x());
    }

    // optional bytes y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                      this->_internal_y());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
             _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void point_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:point_message)
  GOOGLE_DCHECK_NE(&from, this);
  const point_message* source =
    ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<point_message>(
      &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:point_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:point_message)
    MergeFrom(*source);
  }
}

void point_message::MergeFrom(const point_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:point_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_x(from._internal_x());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_y(from._internal_y());
    }
  }
}

void point_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:point_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void point_message::CopyFrom(const point_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:point_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool point_message::IsInitialized() const {
  return true;
}

void point_message::InternalSwap(point_message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  x_.Swap(&other->x_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  y_.Swap(&other->y_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata point_message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ecc_message::InitAsDefaultInstance() {
  ::_ecc_message_default_instance_._instance.get_mutable()->base_point_ = const_cast< ::point_message*>(
        ::point_message::internal_default_instance());
  ::_ecc_message_default_instance_._instance.get_mutable()->public_point_ = const_cast< ::point_message*>(
        ::point_message::internal_default_instance());
}
class ecc_message::_Internal {
 public:
  using HasBits = decltype(std::declval<ecc_message>()._has_bits_);
  static void set_has_curve_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_curve_p(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_curve_a(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_curve_b(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::point_message& base_point(const ecc_message* msg);
  static void set_has_base_point(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::point_message& public_point(const ecc_message* msg);
  static void set_has_public_point(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_order_of_base_point(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_private_multiplier(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::point_message&
ecc_message::_Internal::base_point(const ecc_message* msg) {
  return *msg->base_point_;
}
const ::point_message&
ecc_message::_Internal::public_point(const ecc_message* msg) {
  return *msg->public_point_;
}
ecc_message::ecc_message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ecc_message)
}
ecc_message::ecc_message(const ecc_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
    _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  curve_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_curve_name()) {
    curve_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_curve_name(),
                    GetArena());
  }
  curve_p_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_curve_p()) {
    curve_p_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_curve_p(),
                 GetArena());
  }
  curve_a_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_curve_a()) {
    curve_a_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_curve_a(),
                 GetArena());
  }
  curve_b_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_curve_b()) {
    curve_b_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_curve_b(),
                 GetArena());
  }
  order_of_base_point_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_order_of_base_point()) {
    order_of_base_point_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_order_of_base_point(),
                             GetArena());
  }
  private_multiplier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_private_multiplier()) {
    private_multiplier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_private_multiplier(),
                            GetArena());
  }
  if (from._internal_has_base_point()) {
    base_point_ = new ::point_message(*from.base_point_);
  } else {
    base_point_ = nullptr;
  }
  if (from._internal_has_public_point()) {
    public_point_ = new ::point_message(*from.public_point_);
  } else {
    public_point_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ecc_message)
}

void ecc_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ecc_message_certifier_2eproto.base);
  curve_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  curve_p_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  curve_a_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  curve_b_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  order_of_base_point_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  private_multiplier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_point_, 0, static_cast<size_t>(
             reinterpret_cast<char*>(&public_point_) -
             reinterpret_cast<char*>(&base_point_)) + sizeof(public_point_));
}

ecc_message::~ecc_message() {
  // @@protoc_insertion_point(destructor:ecc_message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ecc_message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  curve_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  curve_p_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  curve_a_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  curve_b_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  order_of_base_point_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  private_multiplier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_point_;
  if (this != internal_default_instance()) delete public_point_;
}

void ecc_message::ArenaDtor(void* object) {
  ecc_message* _this = reinterpret_cast< ecc_message* >(object);
  (void)_this;
}
void ecc_message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ecc_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ecc_message& ecc_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ecc_message_certifier_2eproto.base);
  return *internal_default_instance();
}


void ecc_message::Clear() {
// @@protoc_insertion_point(message_clear_start:ecc_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      curve_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      curve_p_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      curve_a_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      curve_b_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      order_of_base_point_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      private_multiplier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(base_point_ != nullptr);
      base_point_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(public_point_ != nullptr);
      public_point_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ecc_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits {};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // optional string curve_name = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        auto str = _internal_mutable_curve_name();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ecc_message.curve_name");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional bytes curve_p = 2;
    case 2:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
        auto str = _internal_mutable_curve_p();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional bytes curve_a = 3;
    case 3:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
        auto str = _internal_mutable_curve_a();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional bytes curve_b = 4;
    case 4:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
        auto str = _internal_mutable_curve_b();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional .point_message base_point = 5;
    case 5:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
        ptr = ctx->ParseMessage(_internal_mutable_base_point(), ptr);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional .point_message public_point = 6;
    case 6:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
        ptr = ctx->ParseMessage(_internal_mutable_public_point(), ptr);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional bytes order_of_base_point = 7;
    case 7:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
        auto str = _internal_mutable_order_of_base_point();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional bytes private_multiplier = 8;
    case 8:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
        auto str = _internal_mutable_private_multiplier();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    default: {
handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ecc_message::_InternalSerialize(
  ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecc_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string curve_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_curve_name().data(), static_cast<int>(this->_internal_curve_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ecc_message.curve_name");
    target = stream->WriteStringMaybeAliased(
               1, this->_internal_curve_name(), target);
  }

  // optional bytes curve_p = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
               2, this->_internal_curve_p(), target);
  }

  // optional bytes curve_a = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
               3, this->_internal_curve_a(), target);
  }

  // optional bytes curve_b = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
               4, this->_internal_curve_b(), target);
  }

  // optional .point_message base_point = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
             InternalWriteMessage(
               5, _Internal::base_point(this), target, stream);
  }

  // optional .point_message public_point = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
             InternalWriteMessage(
               6, _Internal::public_point(this), target, stream);
  }

  // optional bytes order_of_base_point = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
               7, this->_internal_order_of_base_point(), target);
  }

  // optional bytes private_multiplier = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
               8, this->_internal_private_multiplier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
               _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecc_message)
  return target;
}

size_t ecc_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ecc_message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string curve_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                      this->_internal_curve_name());
    }

    // optional bytes curve_p = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                      this->_internal_curve_p());
    }

    // optional bytes curve_a = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                      this->_internal_curve_a());
    }

    // optional bytes curve_b = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                      this->_internal_curve_b());
    }

    // optional bytes order_of_base_point = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                      this->_internal_order_of_base_point());
    }

    // optional bytes private_multiplier = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                      this->_internal_private_multiplier());
    }

    // optional .point_message base_point = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                      *base_point_);
    }

    // optional .point_message public_point = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                      *public_point_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
             _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ecc_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ecc_message)
  GOOGLE_DCHECK_NE(&from, this);
  const ecc_message* source =
    ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ecc_message>(
      &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:ecc_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:ecc_message)
    MergeFrom(*source);
  }
}

void ecc_message::MergeFrom(const ecc_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ecc_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_curve_name(from._internal_curve_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_curve_p(from._internal_curve_p());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_curve_a(from._internal_curve_a());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_curve_b(from._internal_curve_b());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_order_of_base_point(from._internal_order_of_base_point());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_private_multiplier(from._internal_private_multiplier());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_base_point()->::point_message::MergeFrom(from._internal_base_point());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_public_point()->::point_message::MergeFrom(from._internal_public_point());
    }
  }
}

void ecc_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ecc_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ecc_message::CopyFrom(const ecc_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ecc_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ecc_message::IsInitialized() const {
  return true;
}

void ecc_message::InternalSwap(ecc_message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  curve_name_.Swap(&other->curve_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  curve_p_.Swap(&other->curve_p_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  curve_a_.Swap(&other->curve_a_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  curve_b_.Swap(&other->curve_b_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  order_of_base_point_.Swap(&other->order_of_base_point_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  private_multiplier_.Swap(&other->private_multiplier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
  PROTOBUF_FIELD_OFFSET(ecc_message, public_point_)
  + sizeof(ecc_message::public_point_)
  - PROTOBUF_FIELD_OFFSET(ecc_message, base_point_)>(
    reinterpret_cast<char*>(&base_point_),
    reinterpret_cast<char*>(&other->base_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ecc_message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void key_message::InitAsDefaultInstance() {
  ::_key_message_default_instance_._instance.get_mutable()->rsa_key_ = const_cast< ::rsa_message*>(
        ::rsa_message::internal_default_instance());
  ::_key_message_default_instance_._instance.get_mutable()->ecc_key_ = const_cast< ::ecc_message*>(
        ::ecc_message::internal_default_instance());
}
class key_message::_Internal {
 public:
  using HasBits = decltype(std::declval<key_message>()._has_bits_);
  static void set_has_key_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_key_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_key_format(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::rsa_message& rsa_key(const key_message* msg);
  static void set_has_rsa_key(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::ecc_message& ecc_key(const key_message* msg);
  static void set_has_ecc_key(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_secret_key_bits(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_certificate(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_other_key_formats(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_not_before(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_not_after(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::rsa_message&
key_message::_Internal::rsa_key(const key_message* msg) {
  return *msg->rsa_key_;
}
const ::ecc_message&
key_message::_Internal::ecc_key(const key_message* msg) {
  return *msg->ecc_key_;
}
key_message::key_message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:key_message)
}
key_message::key_message(const key_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
    _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key_name()) {
    key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key_name(),
                  GetArena());
  }
  key_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key_type()) {
    key_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key_type(),
                  GetArena());
  }
  key_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key_format()) {
    key_format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key_format(),
                    GetArena());
  }
  secret_key_bits_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_secret_key_bits()) {
    secret_key_bits_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_secret_key_bits(),
                         GetArena());
  }
  certificate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_certificate()) {
    certificate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_certificate(),
                     GetArena());
  }
  other_key_formats_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_other_key_formats()) {
    other_key_formats_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_other_key_formats(),
                           GetArena());
  }
  not_before_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_not_before()) {
    not_before_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_not_before(),
                    GetArena());
  }
  not_after_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_not_after()) {
    not_after_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_not_after(),
                   GetArena());
  }
  if (from._internal_has_rsa_key()) {
    rsa_key_ = new ::rsa_message(*from.rsa_key_);
  } else {
    rsa_key_ = nullptr;
  }
  if (from._internal_has_ecc_key()) {
    ecc_key_ = new ::ecc_message(*from.ecc_key_);
  } else {
    ecc_key_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:key_message)
}

void key_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_key_message_certifier_2eproto.base);
  key_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_key_bits_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  certificate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  other_key_formats_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  not_before_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  not_after_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rsa_key_, 0, static_cast<size_t>(
             reinterpret_cast<char*>(&ecc_key_) -
             reinterpret_cast<char*>(&rsa_key_)) + sizeof(ecc_key_));
}

key_message::~key_message() {
  // @@protoc_insertion_point(destructor:key_message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void key_message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_format_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_key_bits_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  certificate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  other_key_formats_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  not_before_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  not_after_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rsa_key_;
  if (this != internal_default_instance()) delete ecc_key_;
}

void key_message::ArenaDtor(void* object) {
  key_message* _this = reinterpret_cast< key_message* >(object);
  (void)_this;
}
void key_message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void key_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const key_message& key_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_key_message_certifier_2eproto.base);
  return *internal_default_instance();
}


void key_message::Clear() {
// @@protoc_insertion_point(message_clear_start:key_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      key_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      key_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      key_format_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      secret_key_bits_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      certificate_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      other_key_formats_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      not_before_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      not_after_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(rsa_key_ != nullptr);
      rsa_key_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(ecc_key_ != nullptr);
      ecc_key_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* key_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits {};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // optional string key_name = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        auto str = _internal_mutable_key_name();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "key_message.key_name");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional string key_type = 2;
    case 2:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
        auto str = _internal_mutable_key_type();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "key_message.key_type");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional string key_format = 3;
    case 3:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
        auto str = _internal_mutable_key_format();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "key_message.key_format");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional .rsa_message rsa_key = 4;
    case 4:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
        ptr = ctx->ParseMessage(_internal_mutable_rsa_key(), ptr);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional .ecc_message ecc_key = 5;
    case 5:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
        ptr = ctx->ParseMessage(_internal_mutable_ecc_key(), ptr);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional bytes secret_key_bits = 6;
    case 6:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
        auto str = _internal_mutable_secret_key_bits();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional bytes certificate = 7;
    case 7:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
        auto str = _internal_mutable_certificate();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional bytes other_key_formats = 8;
    case 8:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
        auto str = _internal_mutable_other_key_formats();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional string not_before = 9;
    case 9:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
        auto str = _internal_mutable_not_before();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "key_message.not_before");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional string not_after = 10;
    case 10:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
        auto str = _internal_mutable_not_after();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "key_message.not_after");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    default: {
handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* key_message::_InternalSerialize(
  ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:key_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key_name().data(), static_cast<int>(this->_internal_key_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "key_message.key_name");
    target = stream->WriteStringMaybeAliased(
               1, this->_internal_key_name(), target);
  }

  // optional string key_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key_type().data(), static_cast<int>(this->_internal_key_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "key_message.key_type");
    target = stream->WriteStringMaybeAliased(
               2, this->_internal_key_type(), target);
  }

  // optional string key_format = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key_format().data(), static_cast<int>(this->_internal_key_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "key_message.key_format");
    target = stream->WriteStringMaybeAliased(
               3, this->_internal_key_format(), target);
  }

  // optional .rsa_message rsa_key = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
             InternalWriteMessage(
               4, _Internal::rsa_key(this), target, stream);
  }

  // optional .ecc_message ecc_key = 5;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
             InternalWriteMessage(
               5, _Internal::ecc_key(this), target, stream);
  }

  // optional bytes secret_key_bits = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
               6, this->_internal_secret_key_bits(), target);
  }

  // optional bytes certificate = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
               7, this->_internal_certificate(), target);
  }

  // optional bytes other_key_formats = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
               8, this->_internal_other_key_formats(), target);
  }

  // optional string not_before = 9;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_not_before().data(), static_cast<int>(this->_internal_not_before().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "key_message.not_before");
    target = stream->WriteStringMaybeAliased(
               9, this->_internal_not_before(), target);
  }

  // optional string not_after = 10;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_not_after().data(), static_cast<int>(this->_internal_not_after().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "key_message.not_after");
    target = stream->WriteStringMaybeAliased(
               10, this->_internal_not_after(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
               _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:key_message)
  return target;
}

size_t key_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:key_message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string key_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                      this->_internal_key_name());
    }

    // optional string key_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                      this->_internal_key_type());
    }

    // optional string key_format = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                      this->_internal_key_format());
    }

    // optional bytes secret_key_bits = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                      this->_internal_secret_key_bits());
    }

    // optional bytes certificate = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                      this->_internal_certificate());
    }

    // optional bytes other_key_formats = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                      this->_internal_other_key_formats());
    }

    // optional string not_before = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                      this->_internal_not_before());
    }

    // optional string not_after = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                      this->_internal_not_after());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .rsa_message rsa_key = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                      *rsa_key_);
    }

    // optional .ecc_message ecc_key = 5;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                      *ecc_key_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
             _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void key_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:key_message)
  GOOGLE_DCHECK_NE(&from, this);
  const key_message* source =
    ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<key_message>(
      &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:key_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:key_message)
    MergeFrom(*source);
  }
}

void key_message::MergeFrom(const key_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:key_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key_name(from._internal_key_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_key_type(from._internal_key_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_key_format(from._internal_key_format());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_secret_key_bits(from._internal_secret_key_bits());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_certificate(from._internal_certificate());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_other_key_formats(from._internal_other_key_formats());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_not_before(from._internal_not_before());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_not_after(from._internal_not_after());
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_rsa_key()->::rsa_message::MergeFrom(from._internal_rsa_key());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_ecc_key()->::ecc_message::MergeFrom(from._internal_ecc_key());
    }
  }
}

void key_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:key_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void key_message::CopyFrom(const key_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:key_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool key_message::IsInitialized() const {
  return true;
}

void key_message::InternalSwap(key_message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_name_.Swap(&other->key_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  key_type_.Swap(&other->key_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  key_format_.Swap(&other->key_format_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  secret_key_bits_.Swap(&other->secret_key_bits_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  certificate_.Swap(&other->certificate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  other_key_formats_.Swap(&other->other_key_formats_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  not_before_.Swap(&other->not_before_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  not_after_.Swap(&other->not_after_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
  PROTOBUF_FIELD_OFFSET(key_message, ecc_key_)
  + sizeof(key_message::ecc_key_)
  - PROTOBUF_FIELD_OFFSET(key_message, rsa_key_)>(
    reinterpret_cast<char*>(&rsa_key_),
    reinterpret_cast<char*>(&other->rsa_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata key_message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void protected_blob_message::InitAsDefaultInstance() {
}
class protected_blob_message::_Internal {
 public:
  using HasBits = decltype(std::declval<protected_blob_message>()._has_bits_);
  static void set_has_encrypted_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_encrypted_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

protected_blob_message::protected_blob_message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protected_blob_message)
}
protected_blob_message::protected_blob_message(const protected_blob_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
    _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encrypted_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_encrypted_key()) {
    encrypted_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_encrypted_key(),
                       GetArena());
  }
  encrypted_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_encrypted_data()) {
    encrypted_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_encrypted_data(),
                        GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:protected_blob_message)
}

void protected_blob_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_protected_blob_message_certifier_2eproto.base);
  encrypted_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encrypted_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

protected_blob_message::~protected_blob_message() {
  // @@protoc_insertion_point(destructor:protected_blob_message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void protected_blob_message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  encrypted_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encrypted_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void protected_blob_message::ArenaDtor(void* object) {
  protected_blob_message* _this = reinterpret_cast< protected_blob_message* >(object);
  (void)_this;
}
void protected_blob_message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void protected_blob_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const protected_blob_message& protected_blob_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_protected_blob_message_certifier_2eproto.base);
  return *internal_default_instance();
}


void protected_blob_message::Clear() {
// @@protoc_insertion_point(message_clear_start:protected_blob_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      encrypted_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      encrypted_data_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* protected_blob_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits {};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // optional bytes encrypted_key = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        auto str = _internal_mutable_encrypted_key();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional bytes encrypted_data = 2;
    case 2:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
        auto str = _internal_mutable_encrypted_data();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    default: {
handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* protected_blob_message::_InternalSerialize(
  ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protected_blob_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes encrypted_key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
               1, this->_internal_encrypted_key(), target);
  }

  // optional bytes encrypted_data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
               2, this->_internal_encrypted_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
               _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protected_blob_message)
  return target;
}

size_t protected_blob_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protected_blob_message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes encrypted_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                      this->_internal_encrypted_key());
    }

    // optional bytes encrypted_data = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                      this->_internal_encrypted_data());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
             _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void protected_blob_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protected_blob_message)
  GOOGLE_DCHECK_NE(&from, this);
  const protected_blob_message* source =
    ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<protected_blob_message>(
      &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:protected_blob_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:protected_blob_message)
    MergeFrom(*source);
  }
}

void protected_blob_message::MergeFrom(const protected_blob_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protected_blob_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_encrypted_key(from._internal_encrypted_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_encrypted_data(from._internal_encrypted_data());
    }
  }
}

void protected_blob_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protected_blob_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void protected_blob_message::CopyFrom(const protected_blob_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protected_blob_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool protected_blob_message::IsInitialized() const {
  return true;
}

void protected_blob_message::InternalSwap(protected_blob_message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  encrypted_key_.Swap(&other->encrypted_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  encrypted_data_.Swap(&other->encrypted_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata protected_blob_message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void property::InitAsDefaultInstance() {
}
class property::_Internal {
 public:
  using HasBits = decltype(std::declval<property>()._has_bits_);
  static void set_has_property_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_comparator(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_string_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_int_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

property::property(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:property)
}
property::property(const property& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
    _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  property_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_property_name()) {
    property_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_property_name(),
                       GetArena());
  }
  value_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value_type()) {
    value_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value_type(),
                    GetArena());
  }
  comparator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_comparator()) {
    comparator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_comparator(),
                    GetArena());
  }
  string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_string_value()) {
    string_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_string_value(),
                      GetArena());
  }
  int_value_ = from.int_value_;
  // @@protoc_insertion_point(copy_constructor:property)
}

void property::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_property_certifier_2eproto.base);
  property_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comparator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  int_value_ = PROTOBUF_ULONGLONG(0);
}

property::~property() {
  // @@protoc_insertion_point(destructor:property)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void property::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  property_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comparator_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  string_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void property::ArenaDtor(void* object) {
  property* _this = reinterpret_cast< property* >(object);
  (void)_this;
}
void property::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void property::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const property& property::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_property_certifier_2eproto.base);
  return *internal_default_instance();
}


void property::Clear() {
// @@protoc_insertion_point(message_clear_start:property)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      property_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      comparator_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      string_value_.ClearNonDefaultToEmpty();
    }
  }
  int_value_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* property::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits {};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // optional string property_name = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        auto str = _internal_mutable_property_name();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "property.property_name");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional string value_type = 2;
    case 2:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
        auto str = _internal_mutable_value_type();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "property.value_type");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional string comparator = 3;
    case 3:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
        auto str = _internal_mutable_comparator();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "property.comparator");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional string string_value = 4;
    case 4:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
        auto str = _internal_mutable_string_value();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "property.string_value");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional uint64 int_value = 5;
    case 5:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
        _Internal::set_has_int_value(&has_bits);
        int_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    default: {
handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* property::_InternalSerialize(
  ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:property)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string property_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_property_name().data(), static_cast<int>(this->_internal_property_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "property.property_name");
    target = stream->WriteStringMaybeAliased(
               1, this->_internal_property_name(), target);
  }

  // optional string value_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value_type().data(), static_cast<int>(this->_internal_value_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "property.value_type");
    target = stream->WriteStringMaybeAliased(
               2, this->_internal_value_type(), target);
  }

  // optional string comparator = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_comparator().data(), static_cast<int>(this->_internal_comparator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "property.comparator");
    target = stream->WriteStringMaybeAliased(
               3, this->_internal_comparator(), target);
  }

  // optional string string_value = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "property.string_value");
    target = stream->WriteStringMaybeAliased(
               4, this->_internal_string_value(), target);
  }

  // optional uint64 int_value = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_int_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
               _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:property)
  return target;
}

size_t property::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:property)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string property_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                      this->_internal_property_name());
    }

    // optional string value_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                      this->_internal_value_type());
    }

    // optional string comparator = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                      this->_internal_comparator());
    }

    // optional string string_value = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                      this->_internal_string_value());
    }

    // optional uint64 int_value = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                      this->_internal_int_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
             _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void property::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:property)
  GOOGLE_DCHECK_NE(&from, this);
  const property* source =
    ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<property>(
      &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:property)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:property)
    MergeFrom(*source);
  }
}

void property::MergeFrom(const property& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:property)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_property_name(from._internal_property_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value_type(from._internal_value_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_comparator(from._internal_comparator());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_string_value(from._internal_string_value());
    }
    if (cached_has_bits & 0x00000010u) {
      int_value_ = from.int_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void property::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:property)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void property::CopyFrom(const property& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:property)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool property::IsInitialized() const {
  return true;
}

void property::InternalSwap(property* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  property_name_.Swap(&other->property_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_type_.Swap(&other->value_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  comparator_.Swap(&other->comparator_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  string_value_.Swap(&other->string_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(int_value_, other->int_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata property::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void properties::InitAsDefaultInstance() {
}
class properties::_Internal {
 public:
};

properties::properties(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
    props_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:properties)
}
properties::properties(const properties& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
    props_(from.props_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:properties)
}

void properties::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_properties_certifier_2eproto.base);
}

properties::~properties() {
  // @@protoc_insertion_point(destructor:properties)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void properties::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void properties::ArenaDtor(void* object) {
  properties* _this = reinterpret_cast< properties* >(object);
  (void)_this;
}
void properties::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void properties::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const properties& properties::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_properties_certifier_2eproto.base);
  return *internal_default_instance();
}


void properties::Clear() {
// @@protoc_insertion_point(message_clear_start:properties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  props_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* properties::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // repeated .property props = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        ptr -= 1;
        do {
          ptr += 1;
          ptr = ctx->ParseMessage(_internal_add_props(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
        } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
      } else goto handle_unusual;
      continue;
    default: {
handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* properties::_InternalSerialize(
  ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:properties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .property props = 1;
  for (unsigned int i = 0,
       n = static_cast<unsigned int>(this->_internal_props_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
             InternalWriteMessage(1, this->_internal_props(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
               _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:properties)
  return target;
}

size_t properties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:properties)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .property props = 1;
  total_size += 1UL * this->_internal_props_size();
  for (const auto& msg : this->props_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
             _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void properties::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:properties)
  GOOGLE_DCHECK_NE(&from, this);
  const properties* source =
    ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<properties>(
      &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:properties)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:properties)
    MergeFrom(*source);
  }
}

void properties::MergeFrom(const properties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:properties)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  props_.MergeFrom(from.props_);
}

void properties::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:properties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void properties::CopyFrom(const properties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:properties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool properties::IsInitialized() const {
  return true;
}

void properties::InternalSwap(properties* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  props_.InternalSwap(&other->props_);
}

::PROTOBUF_NAMESPACE_ID::Metadata properties::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void platform::InitAsDefaultInstance() {
  ::_platform_default_instance_._instance.get_mutable()->attest_key_ = const_cast< ::key_message*>(
        ::key_message::internal_default_instance());
  ::_platform_default_instance_._instance.get_mutable()->props_ = const_cast< ::properties*>(
        ::properties::internal_default_instance());
}
class platform::_Internal {
 public:
  using HasBits = decltype(std::declval<platform>()._has_bits_);
  static void set_has_platform_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::key_message& attest_key(const platform* msg);
  static void set_has_attest_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::properties& props(const platform* msg);
  static void set_has_props(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::key_message&
platform::_Internal::attest_key(const platform* msg) {
  return *msg->attest_key_;
}
const ::properties&
platform::_Internal::props(const platform* msg) {
  return *msg->props_;
}
platform::platform(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:platform)
}
platform::platform(const platform& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
    _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  platform_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_platform_type()) {
    platform_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_platform_type(),
                       GetArena());
  }
  if (from._internal_has_attest_key()) {
    attest_key_ = new ::key_message(*from.attest_key_);
  } else {
    attest_key_ = nullptr;
  }
  if (from._internal_has_props()) {
    props_ = new ::properties(*from.props_);
  } else {
    props_ = nullptr;
  }
  has_key_ = from.has_key_;
  // @@protoc_insertion_point(copy_constructor:platform)
}

void platform::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_platform_certifier_2eproto.base);
  platform_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&attest_key_, 0, static_cast<size_t>(
             reinterpret_cast<char*>(&has_key_) -
             reinterpret_cast<char*>(&attest_key_)) + sizeof(has_key_));
}

platform::~platform() {
  // @@protoc_insertion_point(destructor:platform)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void platform::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  platform_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete attest_key_;
  if (this != internal_default_instance()) delete props_;
}

void platform::ArenaDtor(void* object) {
  platform* _this = reinterpret_cast< platform* >(object);
  (void)_this;
}
void platform::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void platform::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const platform& platform::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_platform_certifier_2eproto.base);
  return *internal_default_instance();
}


void platform::Clear() {
// @@protoc_insertion_point(message_clear_start:platform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      platform_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(attest_key_ != nullptr);
      attest_key_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(props_ != nullptr);
      props_->Clear();
    }
  }
  has_key_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* platform::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits {};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // optional string platform_type = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        auto str = _internal_mutable_platform_type();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "platform.platform_type");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional .key_message attest_key = 2;
    case 2:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
        ptr = ctx->ParseMessage(_internal_mutable_attest_key(), ptr);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional .properties props = 3;
    case 3:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
        ptr = ctx->ParseMessage(_internal_mutable_props(), ptr);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional bool has_key = 4;
    case 4:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
        _Internal::set_has_has_key(&has_bits);
        has_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    default: {
handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* platform::_InternalSerialize(
  ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:platform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string platform_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_platform_type().data(), static_cast<int>(this->_internal_platform_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "platform.platform_type");
    target = stream->WriteStringMaybeAliased(
               1, this->_internal_platform_type(), target);
  }

  // optional .key_message attest_key = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
             InternalWriteMessage(
               2, _Internal::attest_key(this), target, stream);
  }

  // optional .properties props = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
             InternalWriteMessage(
               3, _Internal::props(this), target, stream);
  }

  // optional bool has_key = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_has_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
               _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:platform)
  return target;
}

size_t platform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:platform)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string platform_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                      this->_internal_platform_type());
    }

    // optional .key_message attest_key = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                      *attest_key_);
    }

    // optional .properties props = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                      *props_);
    }

    // optional bool has_key = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
             _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void platform::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:platform)
  GOOGLE_DCHECK_NE(&from, this);
  const platform* source =
    ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<platform>(
      &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:platform)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:platform)
    MergeFrom(*source);
  }
}

void platform::MergeFrom(const platform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:platform)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_platform_type(from._internal_platform_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_attest_key()->::key_message::MergeFrom(from._internal_attest_key());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_props()->::properties::MergeFrom(from._internal_props());
    }
    if (cached_has_bits & 0x00000008u) {
      has_key_ = from.has_key_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void platform::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:platform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void platform::CopyFrom(const platform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:platform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool platform::IsInitialized() const {
  return true;
}

void platform::InternalSwap(platform* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  platform_type_.Swap(&other->platform_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
  PROTOBUF_FIELD_OFFSET(platform, has_key_)
  + sizeof(platform::has_key_)
  - PROTOBUF_FIELD_OFFSET(platform, attest_key_)>(
    reinterpret_cast<char*>(&attest_key_),
    reinterpret_cast<char*>(&other->attest_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata platform::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void environment::InitAsDefaultInstance() {
  ::_environment_default_instance_._instance.get_mutable()->the_platform_ = const_cast< ::platform*>(
        ::platform::internal_default_instance());
}
class environment::_Internal {
 public:
  using HasBits = decltype(std::declval<environment>()._has_bits_);
  static const ::platform& the_platform(const environment* msg);
  static void set_has_the_platform(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_the_measurement(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::platform&
environment::_Internal::the_platform(const environment* msg) {
  return *msg->the_platform_;
}
environment::environment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:environment)
}
environment::environment(const environment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
    _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  the_measurement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_the_measurement()) {
    the_measurement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_the_measurement(),
                         GetArena());
  }
  if (from._internal_has_the_platform()) {
    the_platform_ = new ::platform(*from.the_platform_);
  } else {
    the_platform_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:environment)
}

void environment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_environment_certifier_2eproto.base);
  the_measurement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  the_platform_ = nullptr;
}

environment::~environment() {
  // @@protoc_insertion_point(destructor:environment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void environment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  the_measurement_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete the_platform_;
}

void environment::ArenaDtor(void* object) {
  environment* _this = reinterpret_cast< environment* >(object);
  (void)_this;
}
void environment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void environment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const environment& environment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_environment_certifier_2eproto.base);
  return *internal_default_instance();
}


void environment::Clear() {
// @@protoc_insertion_point(message_clear_start:environment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      the_measurement_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(the_platform_ != nullptr);
      the_platform_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* environment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits {};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // optional .platform the_platform = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        ptr = ctx->ParseMessage(_internal_mutable_the_platform(), ptr);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional bytes the_measurement = 2;
    case 2:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
        auto str = _internal_mutable_the_measurement();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    default: {
handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* environment::_InternalSerialize(
  ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:environment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .platform the_platform = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
             InternalWriteMessage(
               1, _Internal::the_platform(this), target, stream);
  }

  // optional bytes the_measurement = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
               2, this->_internal_the_measurement(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
               _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:environment)
  return target;
}

size_t environment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:environment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes the_measurement = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                      this->_internal_the_measurement());
    }

    // optional .platform the_platform = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                      *the_platform_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
             _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void environment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:environment)
  GOOGLE_DCHECK_NE(&from, this);
  const environment* source =
    ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<environment>(
      &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:environment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:environment)
    MergeFrom(*source);
  }
}

void environment::MergeFrom(const environment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:environment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_the_measurement(from._internal_the_measurement());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_the_platform()->::platform::MergeFrom(from._internal_the_platform());
    }
  }
}

void environment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:environment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void environment::CopyFrom(const environment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:environment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool environment::IsInitialized() const {
  return true;
}

void environment::InternalSwap(environment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  the_measurement_.Swap(&other->the_measurement_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(the_platform_, other->the_platform_);
}

::PROTOBUF_NAMESPACE_ID::Metadata environment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void entity_message::InitAsDefaultInstance() {
  ::_entity_message_default_instance_._instance.get_mutable()->key_ = const_cast< ::key_message*>(
        ::key_message::internal_default_instance());
  ::_entity_message_default_instance_._instance.get_mutable()->platform_ent_ = const_cast< ::platform*>(
        ::platform::internal_default_instance());
  ::_entity_message_default_instance_._instance.get_mutable()->environment_ent_ = const_cast< ::environment*>(
        ::environment::internal_default_instance());
}
class entity_message::_Internal {
 public:
  using HasBits = decltype(std::declval<entity_message>()._has_bits_);
  static void set_has_entity_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::key_message& key(const entity_message* msg);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_measurement(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::platform& platform_ent(const entity_message* msg);
  static void set_has_platform_ent(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::environment& environment_ent(const entity_message* msg);
  static void set_has_environment_ent(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::key_message&
entity_message::_Internal::key(const entity_message* msg) {
  return *msg->key_;
}
const ::platform&
entity_message::_Internal::platform_ent(const entity_message* msg) {
  return *msg->platform_ent_;
}
const ::environment&
entity_message::_Internal::environment_ent(const entity_message* msg) {
  return *msg->environment_ent_;
}
entity_message::entity_message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:entity_message)
}
entity_message::entity_message(const entity_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
    _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  entity_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_entity_type()) {
    entity_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_entity_type(),
                     GetArena());
  }
  measurement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_measurement()) {
    measurement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_measurement(),
                     GetArena());
  }
  if (from._internal_has_key()) {
    key_ = new ::key_message(*from.key_);
  } else {
    key_ = nullptr;
  }
  if (from._internal_has_platform_ent()) {
    platform_ent_ = new ::platform(*from.platform_ent_);
  } else {
    platform_ent_ = nullptr;
  }
  if (from._internal_has_environment_ent()) {
    environment_ent_ = new ::environment(*from.environment_ent_);
  } else {
    environment_ent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:entity_message)
}

void entity_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_entity_message_certifier_2eproto.base);
  entity_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  measurement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&key_, 0, static_cast<size_t>(
             reinterpret_cast<char*>(&environment_ent_) -
             reinterpret_cast<char*>(&key_)) + sizeof(environment_ent_));
}

entity_message::~entity_message() {
  // @@protoc_insertion_point(destructor:entity_message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void entity_message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  entity_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  measurement_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete key_;
  if (this != internal_default_instance()) delete platform_ent_;
  if (this != internal_default_instance()) delete environment_ent_;
}

void entity_message::ArenaDtor(void* object) {
  entity_message* _this = reinterpret_cast< entity_message* >(object);
  (void)_this;
}
void entity_message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void entity_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const entity_message& entity_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_entity_message_certifier_2eproto.base);
  return *internal_default_instance();
}


void entity_message::Clear() {
// @@protoc_insertion_point(message_clear_start:entity_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      entity_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      measurement_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(key_ != nullptr);
      key_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(platform_ent_ != nullptr);
      platform_ent_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(environment_ent_ != nullptr);
      environment_ent_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* entity_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits {};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // optional string entity_type = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        auto str = _internal_mutable_entity_type();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "entity_message.entity_type");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional .key_message key = 2;
    case 2:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
        ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional bytes measurement = 3;
    case 3:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
        auto str = _internal_mutable_measurement();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional .platform platform_ent = 4;
    case 4:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
        ptr = ctx->ParseMessage(_internal_mutable_platform_ent(), ptr);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional .environment environment_ent = 5;
    case 5:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
        ptr = ctx->ParseMessage(_internal_mutable_environment_ent(), ptr);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    default: {
handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* entity_message::_InternalSerialize(
  ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:entity_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string entity_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_entity_type().data(), static_cast<int>(this->_internal_entity_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "entity_message.entity_type");
    target = stream->WriteStringMaybeAliased(
               1, this->_internal_entity_type(), target);
  }

  // optional .key_message key = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
             InternalWriteMessage(
               2, _Internal::key(this), target, stream);
  }

  // optional bytes measurement = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
               3, this->_internal_measurement(), target);
  }

  // optional .platform platform_ent = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
             InternalWriteMessage(
               4, _Internal::platform_ent(this), target, stream);
  }

  // optional .environment environment_ent = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
             InternalWriteMessage(
               5, _Internal::environment_ent(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
               _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:entity_message)
  return target;
}

size_t entity_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:entity_message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string entity_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                      this->_internal_entity_type());
    }

    // optional bytes measurement = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                      this->_internal_measurement());
    }

    // optional .key_message key = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                      *key_);
    }

    // optional .platform platform_ent = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                      *platform_ent_);
    }

    // optional .environment environment_ent = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                      *environment_ent_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
             _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void entity_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:entity_message)
  GOOGLE_DCHECK_NE(&from, this);
  const entity_message* source =
    ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<entity_message>(
      &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:entity_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:entity_message)
    MergeFrom(*source);
  }
}

void entity_message::MergeFrom(const entity_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:entity_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_entity_type(from._internal_entity_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_measurement(from._internal_measurement());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_key()->::key_message::MergeFrom(from._internal_key());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_platform_ent()->::platform::MergeFrom(from._internal_platform_ent());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_environment_ent()->::environment::MergeFrom(from._internal_environment_ent());
    }
  }
}

void entity_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:entity_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void entity_message::CopyFrom(const entity_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:entity_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool entity_message::IsInitialized() const {
  return true;
}

void entity_message::InternalSwap(entity_message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entity_type_.Swap(&other->entity_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  measurement_.Swap(&other->measurement_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
  PROTOBUF_FIELD_OFFSET(entity_message, environment_ent_)
  + sizeof(entity_message::environment_ent_)
  - PROTOBUF_FIELD_OFFSET(entity_message, key_)>(
    reinterpret_cast<char*>(&key_),
    reinterpret_cast<char*>(&other->key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata entity_message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void vse_clause::InitAsDefaultInstance() {
  ::_vse_clause_default_instance_._instance.get_mutable()->subject_ = const_cast< ::entity_message*>(
        ::entity_message::internal_default_instance());
  ::_vse_clause_default_instance_._instance.get_mutable()->object_ = const_cast< ::entity_message*>(
        ::entity_message::internal_default_instance());
  ::_vse_clause_default_instance_._instance.get_mutable()->clause_ = const_cast< ::vse_clause*>(
        ::vse_clause::internal_default_instance());
}
class vse_clause::_Internal {
 public:
  using HasBits = decltype(std::declval<vse_clause>()._has_bits_);
  static const ::entity_message& subject(const vse_clause* msg);
  static void set_has_subject(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_verb(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::entity_message& object(const vse_clause* msg);
  static void set_has_object(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::vse_clause& clause(const vse_clause* msg);
  static void set_has_clause(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::entity_message&
vse_clause::_Internal::subject(const vse_clause* msg) {
  return *msg->subject_;
}
const ::entity_message&
vse_clause::_Internal::object(const vse_clause* msg) {
  return *msg->object_;
}
const ::vse_clause&
vse_clause::_Internal::clause(const vse_clause* msg) {
  return *msg->clause_;
}
vse_clause::vse_clause(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vse_clause)
}
vse_clause::vse_clause(const vse_clause& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
    _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  verb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_verb()) {
    verb_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_verb(),
              GetArena());
  }
  if (from._internal_has_subject()) {
    subject_ = new ::entity_message(*from.subject_);
  } else {
    subject_ = nullptr;
  }
  if (from._internal_has_object()) {
    object_ = new ::entity_message(*from.object_);
  } else {
    object_ = nullptr;
  }
  if (from._internal_has_clause()) {
    clause_ = new ::vse_clause(*from.clause_);
  } else {
    clause_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vse_clause)
}

void vse_clause::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_vse_clause_certifier_2eproto.base);
  verb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&subject_, 0, static_cast<size_t>(
             reinterpret_cast<char*>(&clause_) -
             reinterpret_cast<char*>(&subject_)) + sizeof(clause_));
}

vse_clause::~vse_clause() {
  // @@protoc_insertion_point(destructor:vse_clause)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void vse_clause::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  verb_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete subject_;
  if (this != internal_default_instance()) delete object_;
  if (this != internal_default_instance()) delete clause_;
}

void vse_clause::ArenaDtor(void* object) {
  vse_clause* _this = reinterpret_cast< vse_clause* >(object);
  (void)_this;
}
void vse_clause::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void vse_clause::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const vse_clause& vse_clause::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_vse_clause_certifier_2eproto.base);
  return *internal_default_instance();
}


void vse_clause::Clear() {
// @@protoc_insertion_point(message_clear_start:vse_clause)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      verb_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(subject_ != nullptr);
      subject_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(object_ != nullptr);
      object_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(clause_ != nullptr);
      clause_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* vse_clause::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits {};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // optional .entity_message subject = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        ptr = ctx->ParseMessage(_internal_mutable_subject(), ptr);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional string verb = 2;
    case 2:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
        auto str = _internal_mutable_verb();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vse_clause.verb");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional .entity_message object = 3;
    case 3:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
        ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional .vse_clause clause = 4;
    case 4:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
        ptr = ctx->ParseMessage(_internal_mutable_clause(), ptr);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    default: {
handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* vse_clause::_InternalSerialize(
  ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vse_clause)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .entity_message subject = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
             InternalWriteMessage(
               1, _Internal::subject(this), target, stream);
  }

  // optional string verb = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_verb().data(), static_cast<int>(this->_internal_verb().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vse_clause.verb");
    target = stream->WriteStringMaybeAliased(
               2, this->_internal_verb(), target);
  }

  // optional .entity_message object = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
             InternalWriteMessage(
               3, _Internal::object(this), target, stream);
  }

  // optional .vse_clause clause = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
             InternalWriteMessage(
               4, _Internal::clause(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
               _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vse_clause)
  return target;
}

size_t vse_clause::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vse_clause)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string verb = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                      this->_internal_verb());
    }

    // optional .entity_message subject = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                      *subject_);
    }

    // optional .entity_message object = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                      *object_);
    }

    // optional .vse_clause clause = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                      *clause_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
             _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void vse_clause::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vse_clause)
  GOOGLE_DCHECK_NE(&from, this);
  const vse_clause* source =
    ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<vse_clause>(
      &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:vse_clause)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:vse_clause)
    MergeFrom(*source);
  }
}

void vse_clause::MergeFrom(const vse_clause& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vse_clause)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_verb(from._internal_verb());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_subject()->::entity_message::MergeFrom(from._internal_subject());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_object()->::entity_message::MergeFrom(from._internal_object());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_clause()->::vse_clause::MergeFrom(from._internal_clause());
    }
  }
}

void vse_clause::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vse_clause)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vse_clause::CopyFrom(const vse_clause& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vse_clause)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vse_clause::IsInitialized() const {
  return true;
}

void vse_clause::InternalSwap(vse_clause* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  verb_.Swap(&other->verb_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
  PROTOBUF_FIELD_OFFSET(vse_clause, clause_)
  + sizeof(vse_clause::clause_)
  - PROTOBUF_FIELD_OFFSET(vse_clause, subject_)>(
    reinterpret_cast<char*>(&subject_),
    reinterpret_cast<char*>(&other->subject_));
}

::PROTOBUF_NAMESPACE_ID::Metadata vse_clause::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void vse_clauses::InitAsDefaultInstance() {
}
class vse_clauses::_Internal {
 public:
};

vse_clauses::vse_clauses(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
    clauses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vse_clauses)
}
vse_clauses::vse_clauses(const vse_clauses& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
    clauses_(from.clauses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vse_clauses)
}

void vse_clauses::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_vse_clauses_certifier_2eproto.base);
}

vse_clauses::~vse_clauses() {
  // @@protoc_insertion_point(destructor:vse_clauses)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void vse_clauses::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void vse_clauses::ArenaDtor(void* object) {
  vse_clauses* _this = reinterpret_cast< vse_clauses* >(object);
  (void)_this;
}
void vse_clauses::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void vse_clauses::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const vse_clauses& vse_clauses::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_vse_clauses_certifier_2eproto.base);
  return *internal_default_instance();
}


void vse_clauses::Clear() {
// @@protoc_insertion_point(message_clear_start:vse_clauses)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clauses_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* vse_clauses::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // repeated .vse_clause clauses = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        ptr -= 1;
        do {
          ptr += 1;
          ptr = ctx->ParseMessage(_internal_add_clauses(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
        } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
      } else goto handle_unusual;
      continue;
    default: {
handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* vse_clauses::_InternalSerialize(
  ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vse_clauses)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vse_clause clauses = 1;
  for (unsigned int i = 0,
       n = static_cast<unsigned int>(this->_internal_clauses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
             InternalWriteMessage(1, this->_internal_clauses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
               _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vse_clauses)
  return target;
}

size_t vse_clauses::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vse_clauses)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vse_clause clauses = 1;
  total_size += 1UL * this->_internal_clauses_size();
  for (const auto& msg : this->clauses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
             _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void vse_clauses::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vse_clauses)
  GOOGLE_DCHECK_NE(&from, this);
  const vse_clauses* source =
    ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<vse_clauses>(
      &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:vse_clauses)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:vse_clauses)
    MergeFrom(*source);
  }
}

void vse_clauses::MergeFrom(const vse_clauses& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vse_clauses)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  clauses_.MergeFrom(from.clauses_);
}

void vse_clauses::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vse_clauses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vse_clauses::CopyFrom(const vse_clauses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vse_clauses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vse_clauses::IsInitialized() const {
  return true;
}

void vse_clauses::InternalSwap(vse_clauses* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  clauses_.InternalSwap(&other->clauses_);
}

::PROTOBUF_NAMESPACE_ID::Metadata vse_clauses::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void claim_message::InitAsDefaultInstance() {
}
class claim_message::_Internal {
 public:
  using HasBits = decltype(std::declval<claim_message>()._has_bits_);
  static void set_has_claim_format(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_claim_descriptor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_not_before(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_not_after(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_serialized_claim(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

claim_message::claim_message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:claim_message)
}
claim_message::claim_message(const claim_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
    _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  claim_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_claim_format()) {
    claim_format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_claim_format(),
                      GetArena());
  }
  claim_descriptor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_claim_descriptor()) {
    claim_descriptor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_claim_descriptor(),
                          GetArena());
  }
  not_before_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_not_before()) {
    not_before_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_not_before(),
                    GetArena());
  }
  not_after_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_not_after()) {
    not_after_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_not_after(),
                   GetArena());
  }
  serialized_claim_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_serialized_claim()) {
    serialized_claim_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_serialized_claim(),
                          GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:claim_message)
}

void claim_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_claim_message_certifier_2eproto.base);
  claim_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  claim_descriptor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  not_before_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  not_after_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serialized_claim_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

claim_message::~claim_message() {
  // @@protoc_insertion_point(destructor:claim_message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void claim_message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  claim_format_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  claim_descriptor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  not_before_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  not_after_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serialized_claim_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void claim_message::ArenaDtor(void* object) {
  claim_message* _this = reinterpret_cast< claim_message* >(object);
  (void)_this;
}
void claim_message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void claim_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const claim_message& claim_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_claim_message_certifier_2eproto.base);
  return *internal_default_instance();
}


void claim_message::Clear() {
// @@protoc_insertion_point(message_clear_start:claim_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      claim_format_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      claim_descriptor_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      not_before_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      not_after_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      serialized_claim_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* claim_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits {};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // optional string claim_format = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        auto str = _internal_mutable_claim_format();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "claim_message.claim_format");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional string claim_descriptor = 2;
    case 2:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
        auto str = _internal_mutable_claim_descriptor();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "claim_message.claim_descriptor");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional string not_before = 3;
    case 3:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
        auto str = _internal_mutable_not_before();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "claim_message.not_before");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional string not_after = 4;
    case 4:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
        auto str = _internal_mutable_not_after();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "claim_message.not_after");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional bytes serialized_claim = 5;
    case 5:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
        auto str = _internal_mutable_serialized_claim();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    default: {
handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* claim_message::_InternalSerialize(
  ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:claim_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string claim_format = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_claim_format().data(), static_cast<int>(this->_internal_claim_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "claim_message.claim_format");
    target = stream->WriteStringMaybeAliased(
               1, this->_internal_claim_format(), target);
  }

  // optional string claim_descriptor = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_claim_descriptor().data(), static_cast<int>(this->_internal_claim_descriptor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "claim_message.claim_descriptor");
    target = stream->WriteStringMaybeAliased(
               2, this->_internal_claim_descriptor(), target);
  }

  // optional string not_before = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_not_before().data(), static_cast<int>(this->_internal_not_before().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "claim_message.not_before");
    target = stream->WriteStringMaybeAliased(
               3, this->_internal_not_before(), target);
  }

  // optional string not_after = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_not_after().data(), static_cast<int>(this->_internal_not_after().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "claim_message.not_after");
    target = stream->WriteStringMaybeAliased(
               4, this->_internal_not_after(), target);
  }

  // optional bytes serialized_claim = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
               5, this->_internal_serialized_claim(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
               _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:claim_message)
  return target;
}

size_t claim_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:claim_message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string claim_format = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                      this->_internal_claim_format());
    }

    // optional string claim_descriptor = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                      this->_internal_claim_descriptor());
    }

    // optional string not_before = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                      this->_internal_not_before());
    }

    // optional string not_after = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                      this->_internal_not_after());
    }

    // optional bytes serialized_claim = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                      this->_internal_serialized_claim());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
             _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void claim_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:claim_message)
  GOOGLE_DCHECK_NE(&from, this);
  const claim_message* source =
    ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<claim_message>(
      &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:claim_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:claim_message)
    MergeFrom(*source);
  }
}

void claim_message::MergeFrom(const claim_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:claim_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_claim_format(from._internal_claim_format());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_claim_descriptor(from._internal_claim_descriptor());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_not_before(from._internal_not_before());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_not_after(from._internal_not_after());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_serialized_claim(from._internal_serialized_claim());
    }
  }
}

void claim_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:claim_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void claim_message::CopyFrom(const claim_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:claim_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool claim_message::IsInitialized() const {
  return true;
}

void claim_message::InternalSwap(claim_message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  claim_format_.Swap(&other->claim_format_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  claim_descriptor_.Swap(&other->claim_descriptor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  not_before_.Swap(&other->not_before_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  not_after_.Swap(&other->not_after_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  serialized_claim_.Swap(&other->serialized_claim_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata claim_message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void attestation_user_data::InitAsDefaultInstance() {
  ::_attestation_user_data_default_instance_._instance.get_mutable()->enclave_key_ = const_cast< ::key_message*>(
        ::key_message::internal_default_instance());
  ::_attestation_user_data_default_instance_._instance.get_mutable()->policy_key_ = const_cast< ::key_message*>(
        ::key_message::internal_default_instance());
}
class attestation_user_data::_Internal {
 public:
  using HasBits = decltype(std::declval<attestation_user_data>()._has_bits_);
  static void set_has_enclave_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::key_message& enclave_key(const attestation_user_data* msg);
  static void set_has_enclave_key(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::key_message& policy_key(const attestation_user_data* msg);
  static void set_has_policy_key(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::key_message&
attestation_user_data::_Internal::enclave_key(const attestation_user_data* msg) {
  return *msg->enclave_key_;
}
const ::key_message&
attestation_user_data::_Internal::policy_key(const attestation_user_data* msg) {
  return *msg->policy_key_;
}
attestation_user_data::attestation_user_data(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:attestation_user_data)
}
attestation_user_data::attestation_user_data(const attestation_user_data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
    _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enclave_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enclave_type()) {
    enclave_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enclave_type(),
                      GetArena());
  }
  time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_time()) {
    time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_time(),
              GetArena());
  }
  if (from._internal_has_enclave_key()) {
    enclave_key_ = new ::key_message(*from.enclave_key_);
  } else {
    enclave_key_ = nullptr;
  }
  if (from._internal_has_policy_key()) {
    policy_key_ = new ::key_message(*from.policy_key_);
  } else {
    policy_key_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:attestation_user_data)
}

void attestation_user_data::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_attestation_user_data_certifier_2eproto.base);
  enclave_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&enclave_key_, 0, static_cast<size_t>(
             reinterpret_cast<char*>(&policy_key_) -
             reinterpret_cast<char*>(&enclave_key_)) + sizeof(policy_key_));
}

attestation_user_data::~attestation_user_data() {
  // @@protoc_insertion_point(destructor:attestation_user_data)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void attestation_user_data::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enclave_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete enclave_key_;
  if (this != internal_default_instance()) delete policy_key_;
}

void attestation_user_data::ArenaDtor(void* object) {
  attestation_user_data* _this = reinterpret_cast< attestation_user_data* >(object);
  (void)_this;
}
void attestation_user_data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void attestation_user_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const attestation_user_data& attestation_user_data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_attestation_user_data_certifier_2eproto.base);
  return *internal_default_instance();
}


void attestation_user_data::Clear() {
// @@protoc_insertion_point(message_clear_start:attestation_user_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      enclave_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      time_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(enclave_key_ != nullptr);
      enclave_key_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(policy_key_ != nullptr);
      policy_key_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* attestation_user_data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits {};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // optional string enclave_type = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        auto str = _internal_mutable_enclave_type();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "attestation_user_data.enclave_type");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional string time = 2;
    case 2:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
        auto str = _internal_mutable_time();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "attestation_user_data.time");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional .key_message enclave_key = 3;
    case 3:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
        ptr = ctx->ParseMessage(_internal_mutable_enclave_key(), ptr);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional .key_message policy_key = 4;
    case 4:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
        ptr = ctx->ParseMessage(_internal_mutable_policy_key(), ptr);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    default: {
handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* attestation_user_data::_InternalSerialize(
  ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:attestation_user_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enclave_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enclave_type().data(), static_cast<int>(this->_internal_enclave_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "attestation_user_data.enclave_type");
    target = stream->WriteStringMaybeAliased(
               1, this->_internal_enclave_type(), target);
  }

  // optional string time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_time().data(), static_cast<int>(this->_internal_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "attestation_user_data.time");
    target = stream->WriteStringMaybeAliased(
               2, this->_internal_time(), target);
  }

  // optional .key_message enclave_key = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
             InternalWriteMessage(
               3, _Internal::enclave_key(this), target, stream);
  }

  // optional .key_message policy_key = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
             InternalWriteMessage(
               4, _Internal::policy_key(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
               _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:attestation_user_data)
  return target;
}

size_t attestation_user_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:attestation_user_data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string enclave_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                      this->_internal_enclave_type());
    }

    // optional string time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                      this->_internal_time());
    }

    // optional .key_message enclave_key = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                      *enclave_key_);
    }

    // optional .key_message policy_key = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                      *policy_key_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
             _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void attestation_user_data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:attestation_user_data)
  GOOGLE_DCHECK_NE(&from, this);
  const attestation_user_data* source =
    ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<attestation_user_data>(
      &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:attestation_user_data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:attestation_user_data)
    MergeFrom(*source);
  }
}

void attestation_user_data::MergeFrom(const attestation_user_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:attestation_user_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_enclave_type(from._internal_enclave_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_time(from._internal_time());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_enclave_key()->::key_message::MergeFrom(from._internal_enclave_key());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_policy_key()->::key_message::MergeFrom(from._internal_policy_key());
    }
  }
}

void attestation_user_data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:attestation_user_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void attestation_user_data::CopyFrom(const attestation_user_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:attestation_user_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool attestation_user_data::IsInitialized() const {
  return true;
}

void attestation_user_data::InternalSwap(attestation_user_data* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enclave_type_.Swap(&other->enclave_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  time_.Swap(&other->time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
  PROTOBUF_FIELD_OFFSET(attestation_user_data, policy_key_)
  + sizeof(attestation_user_data::policy_key_)
  - PROTOBUF_FIELD_OFFSET(attestation_user_data, enclave_key_)>(
    reinterpret_cast<char*>(&enclave_key_),
    reinterpret_cast<char*>(&other->enclave_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata attestation_user_data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void vse_attestation_report_info::InitAsDefaultInstance() {
}
class vse_attestation_report_info::_Internal {
 public:
  using HasBits = decltype(std::declval<vse_attestation_report_info>()._has_bits_);
  static void set_has_enclave_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_verified_measurement(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_not_before(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_not_after(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_user_data(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

vse_attestation_report_info::vse_attestation_report_info(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vse_attestation_report_info)
}
vse_attestation_report_info::vse_attestation_report_info(const vse_attestation_report_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
    _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enclave_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enclave_type()) {
    enclave_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enclave_type(),
                      GetArena());
  }
  verified_measurement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_verified_measurement()) {
    verified_measurement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_verified_measurement(),
                              GetArena());
  }
  not_before_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_not_before()) {
    not_before_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_not_before(),
                    GetArena());
  }
  not_after_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_not_after()) {
    not_after_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_not_after(),
                   GetArena());
  }
  user_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_data()) {
    user_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_data(),
                   GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vse_attestation_report_info)
}

void vse_attestation_report_info::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_vse_attestation_report_info_certifier_2eproto.base);
  enclave_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  verified_measurement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  not_before_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  not_after_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

vse_attestation_report_info::~vse_attestation_report_info() {
  // @@protoc_insertion_point(destructor:vse_attestation_report_info)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void vse_attestation_report_info::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enclave_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  verified_measurement_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  not_before_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  not_after_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void vse_attestation_report_info::ArenaDtor(void* object) {
  vse_attestation_report_info* _this = reinterpret_cast< vse_attestation_report_info* >(object);
  (void)_this;
}
void vse_attestation_report_info::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void vse_attestation_report_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const vse_attestation_report_info& vse_attestation_report_info::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_vse_attestation_report_info_certifier_2eproto.base);
  return *internal_default_instance();
}


void vse_attestation_report_info::Clear() {
// @@protoc_insertion_point(message_clear_start:vse_attestation_report_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      enclave_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      verified_measurement_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      not_before_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      not_after_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      user_data_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* vse_attestation_report_info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits {};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // optional string enclave_type = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        auto str = _internal_mutable_enclave_type();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vse_attestation_report_info.enclave_type");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional bytes verified_measurement = 2;
    case 2:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
        auto str = _internal_mutable_verified_measurement();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional string not_before = 3;
    case 3:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
        auto str = _internal_mutable_not_before();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vse_attestation_report_info.not_before");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional string not_after = 4;
    case 4:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
        auto str = _internal_mutable_not_after();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vse_attestation_report_info.not_after");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional bytes user_data = 5;
    case 5:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
        auto str = _internal_mutable_user_data();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    default: {
handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* vse_attestation_report_info::_InternalSerialize(
  ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vse_attestation_report_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enclave_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enclave_type().data(), static_cast<int>(this->_internal_enclave_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vse_attestation_report_info.enclave_type");
    target = stream->WriteStringMaybeAliased(
               1, this->_internal_enclave_type(), target);
  }

  // optional bytes verified_measurement = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
               2, this->_internal_verified_measurement(), target);
  }

  // optional string not_before = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_not_before().data(), static_cast<int>(this->_internal_not_before().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vse_attestation_report_info.not_before");
    target = stream->WriteStringMaybeAliased(
               3, this->_internal_not_before(), target);
  }

  // optional string not_after = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_not_after().data(), static_cast<int>(this->_internal_not_after().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vse_attestation_report_info.not_after");
    target = stream->WriteStringMaybeAliased(
               4, this->_internal_not_after(), target);
  }

  // optional bytes user_data = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
               5, this->_internal_user_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
               _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vse_attestation_report_info)
  return target;
}

size_t vse_attestation_report_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vse_attestation_report_info)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string enclave_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                      this->_internal_enclave_type());
    }

    // optional bytes verified_measurement = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                      this->_internal_verified_measurement());
    }

    // optional string not_before = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                      this->_internal_not_before());
    }

    // optional string not_after = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                      this->_internal_not_after());
    }

    // optional bytes user_data = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                      this->_internal_user_data());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
             _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void vse_attestation_report_info::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vse_attestation_report_info)
  GOOGLE_DCHECK_NE(&from, this);
  const vse_attestation_report_info* source =
    ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<vse_attestation_report_info>(
      &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:vse_attestation_report_info)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:vse_attestation_report_info)
    MergeFrom(*source);
  }
}

void vse_attestation_report_info::MergeFrom(const vse_attestation_report_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vse_attestation_report_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_enclave_type(from._internal_enclave_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_verified_measurement(from._internal_verified_measurement());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_not_before(from._internal_not_before());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_not_after(from._internal_not_after());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_user_data(from._internal_user_data());
    }
  }
}

void vse_attestation_report_info::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vse_attestation_report_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vse_attestation_report_info::CopyFrom(const vse_attestation_report_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vse_attestation_report_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vse_attestation_report_info::IsInitialized() const {
  return true;
}

void vse_attestation_report_info::InternalSwap(vse_attestation_report_info* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enclave_type_.Swap(&other->enclave_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  verified_measurement_.Swap(&other->verified_measurement_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  not_before_.Swap(&other->not_before_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  not_after_.Swap(&other->not_after_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_data_.Swap(&other->user_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata vse_attestation_report_info::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void signed_report::InitAsDefaultInstance() {
  ::_signed_report_default_instance_._instance.get_mutable()->signing_key_ = const_cast< ::key_message*>(
        ::key_message::internal_default_instance());
}
class signed_report::_Internal {
 public:
  using HasBits = decltype(std::declval<signed_report>()._has_bits_);
  static void set_has_report_format(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_report(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::key_message& signing_key(const signed_report* msg);
  static void set_has_signing_key(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_signing_algorithm(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::key_message&
signed_report::_Internal::signing_key(const signed_report* msg) {
  return *msg->signing_key_;
}
signed_report::signed_report(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:signed_report)
}
signed_report::signed_report(const signed_report& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
    _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  report_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_report_format()) {
    report_format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_report_format(),
                       GetArena());
  }
  report_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_report()) {
    report_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_report(),
                GetArena());
  }
  signing_algorithm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_signing_algorithm()) {
    signing_algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_signing_algorithm(),
                           GetArena());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_signature()) {
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_signature(),
                   GetArena());
  }
  if (from._internal_has_signing_key()) {
    signing_key_ = new ::key_message(*from.signing_key_);
  } else {
    signing_key_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:signed_report)
}

void signed_report::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_signed_report_certifier_2eproto.base);
  report_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  report_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signing_algorithm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signing_key_ = nullptr;
}

signed_report::~signed_report() {
  // @@protoc_insertion_point(destructor:signed_report)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void signed_report::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  report_format_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  report_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signing_algorithm_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete signing_key_;
}

void signed_report::ArenaDtor(void* object) {
  signed_report* _this = reinterpret_cast< signed_report* >(object);
  (void)_this;
}
void signed_report::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void signed_report::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const signed_report& signed_report::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_signed_report_certifier_2eproto.base);
  return *internal_default_instance();
}


void signed_report::Clear() {
// @@protoc_insertion_point(message_clear_start:signed_report)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      report_format_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      report_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      signing_algorithm_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      signature_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(signing_key_ != nullptr);
      signing_key_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* signed_report::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits {};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // optional string report_format = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        auto str = _internal_mutable_report_format();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signed_report.report_format");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional bytes report = 2;
    case 2:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
        auto str = _internal_mutable_report();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional .key_message signing_key = 3;
    case 3:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
        ptr = ctx->ParseMessage(_internal_mutable_signing_key(), ptr);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional string signing_algorithm = 4;
    case 4:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
        auto str = _internal_mutable_signing_algorithm();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signed_report.signing_algorithm");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional bytes signature = 5;
    case 5:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
        auto str = _internal_mutable_signature();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    default: {
handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* signed_report::_InternalSerialize(
  ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:signed_report)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string report_format = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_report_format().data(), static_cast<int>(this->_internal_report_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "signed_report.report_format");
    target = stream->WriteStringMaybeAliased(
               1, this->_internal_report_format(), target);
  }

  // optional bytes report = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
               2, this->_internal_report(), target);
  }

  // optional .key_message signing_key = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
             InternalWriteMessage(
               3, _Internal::signing_key(this), target, stream);
  }

  // optional string signing_algorithm = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_signing_algorithm().data(), static_cast<int>(this->_internal_signing_algorithm().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "signed_report.signing_algorithm");
    target = stream->WriteStringMaybeAliased(
               4, this->_internal_signing_algorithm(), target);
  }

  // optional bytes signature = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
               5, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
               _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:signed_report)
  return target;
}

size_t signed_report::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:signed_report)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string report_format = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                      this->_internal_report_format());
    }

    // optional bytes report = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                      this->_internal_report());
    }

    // optional string signing_algorithm = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                      this->_internal_signing_algorithm());
    }

    // optional bytes signature = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                      this->_internal_signature());
    }

    // optional .key_message signing_key = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                      *signing_key_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
             _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void signed_report::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:signed_report)
  GOOGLE_DCHECK_NE(&from, this);
  const signed_report* source =
    ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<signed_report>(
      &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:signed_report)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:signed_report)
    MergeFrom(*source);
  }
}

void signed_report::MergeFrom(const signed_report& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:signed_report)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_report_format(from._internal_report_format());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_report(from._internal_report());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_signing_algorithm(from._internal_signing_algorithm());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_signature(from._internal_signature());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_signing_key()->::key_message::MergeFrom(from._internal_signing_key());
    }
  }
}

void signed_report::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:signed_report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void signed_report::CopyFrom(const signed_report& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:signed_report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool signed_report::IsInitialized() const {
  return true;
}

void signed_report::InternalSwap(signed_report* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  report_format_.Swap(&other->report_format_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  report_.Swap(&other->report_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signing_algorithm_.Swap(&other->signing_algorithm_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(signing_key_, other->signing_key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata signed_report::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void signed_claim_message::InitAsDefaultInstance() {
  ::_signed_claim_message_default_instance_._instance.get_mutable()->signing_key_ = const_cast< ::key_message*>(
        ::key_message::internal_default_instance());
}
class signed_claim_message::_Internal {
 public:
  using HasBits = decltype(std::declval<signed_claim_message>()._has_bits_);
  static void set_has_serialized_claim_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::key_message& signing_key(const signed_claim_message* msg);
  static void set_has_signing_key(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_signing_algorithm(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::key_message&
signed_claim_message::_Internal::signing_key(const signed_claim_message* msg) {
  return *msg->signing_key_;
}
signed_claim_message::signed_claim_message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:signed_claim_message)
}
signed_claim_message::signed_claim_message(const signed_claim_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
    _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serialized_claim_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_serialized_claim_message()) {
    serialized_claim_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_serialized_claim_message(),
                                  GetArena());
  }
  signing_algorithm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_signing_algorithm()) {
    signing_algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_signing_algorithm(),
                           GetArena());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_signature()) {
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_signature(),
                   GetArena());
  }
  if (from._internal_has_signing_key()) {
    signing_key_ = new ::key_message(*from.signing_key_);
  } else {
    signing_key_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:signed_claim_message)
}

void signed_claim_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_signed_claim_message_certifier_2eproto.base);
  serialized_claim_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signing_algorithm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signing_key_ = nullptr;
}

signed_claim_message::~signed_claim_message() {
  // @@protoc_insertion_point(destructor:signed_claim_message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void signed_claim_message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  serialized_claim_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signing_algorithm_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete signing_key_;
}

void signed_claim_message::ArenaDtor(void* object) {
  signed_claim_message* _this = reinterpret_cast< signed_claim_message* >(object);
  (void)_this;
}
void signed_claim_message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void signed_claim_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const signed_claim_message& signed_claim_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_signed_claim_message_certifier_2eproto.base);
  return *internal_default_instance();
}


void signed_claim_message::Clear() {
// @@protoc_insertion_point(message_clear_start:signed_claim_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      serialized_claim_message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      signing_algorithm_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      signature_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(signing_key_ != nullptr);
      signing_key_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* signed_claim_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits {};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // optional bytes serialized_claim_message = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        auto str = _internal_mutable_serialized_claim_message();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional .key_message signing_key = 2;
    case 2:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
        ptr = ctx->ParseMessage(_internal_mutable_signing_key(), ptr);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional string signing_algorithm = 3;
    case 3:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
        auto str = _internal_mutable_signing_algorithm();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signed_claim_message.signing_algorithm");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional bytes signature = 4;
    case 4:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
        auto str = _internal_mutable_signature();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    default: {
handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* signed_claim_message::_InternalSerialize(
  ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:signed_claim_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes serialized_claim_message = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
               1, this->_internal_serialized_claim_message(), target);
  }

  // optional .key_message signing_key = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
             InternalWriteMessage(
               2, _Internal::signing_key(this), target, stream);
  }

  // optional string signing_algorithm = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_signing_algorithm().data(), static_cast<int>(this->_internal_signing_algorithm().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "signed_claim_message.signing_algorithm");
    target = stream->WriteStringMaybeAliased(
               3, this->_internal_signing_algorithm(), target);
  }

  // optional bytes signature = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
               4, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
               _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:signed_claim_message)
  return target;
}

size_t signed_claim_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:signed_claim_message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes serialized_claim_message = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                      this->_internal_serialized_claim_message());
    }

    // optional string signing_algorithm = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                      this->_internal_signing_algorithm());
    }

    // optional bytes signature = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                      this->_internal_signature());
    }

    // optional .key_message signing_key = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                      *signing_key_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
             _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void signed_claim_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:signed_claim_message)
  GOOGLE_DCHECK_NE(&from, this);
  const signed_claim_message* source =
    ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<signed_claim_message>(
      &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:signed_claim_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:signed_claim_message)
    MergeFrom(*source);
  }
}

void signed_claim_message::MergeFrom(const signed_claim_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:signed_claim_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_serialized_claim_message(from._internal_serialized_claim_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_signing_algorithm(from._internal_signing_algorithm());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_signature(from._internal_signature());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_signing_key()->::key_message::MergeFrom(from._internal_signing_key());
    }
  }
}

void signed_claim_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:signed_claim_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void signed_claim_message::CopyFrom(const signed_claim_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:signed_claim_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool signed_claim_message::IsInitialized() const {
  return true;
}

void signed_claim_message::InternalSwap(signed_claim_message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  serialized_claim_message_.Swap(&other->serialized_claim_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signing_algorithm_.Swap(&other->signing_algorithm_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(signing_key_, other->signing_key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata signed_claim_message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void evidence::InitAsDefaultInstance() {
}
class evidence::_Internal {
 public:
  using HasBits = decltype(std::declval<evidence>()._has_bits_);
  static void set_has_evidence_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_serialized_evidence(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

evidence::evidence(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:evidence)
}
evidence::evidence(const evidence& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
    _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  evidence_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_evidence_type()) {
    evidence_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_evidence_type(),
                       GetArena());
  }
  serialized_evidence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_serialized_evidence()) {
    serialized_evidence_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_serialized_evidence(),
                             GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:evidence)
}

void evidence::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_evidence_certifier_2eproto.base);
  evidence_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serialized_evidence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

evidence::~evidence() {
  // @@protoc_insertion_point(destructor:evidence)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void evidence::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  evidence_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serialized_evidence_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void evidence::ArenaDtor(void* object) {
  evidence* _this = reinterpret_cast< evidence* >(object);
  (void)_this;
}
void evidence::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void evidence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const evidence& evidence::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_evidence_certifier_2eproto.base);
  return *internal_default_instance();
}


void evidence::Clear() {
// @@protoc_insertion_point(message_clear_start:evidence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      evidence_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      serialized_evidence_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* evidence::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits {};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // optional string evidence_type = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        auto str = _internal_mutable_evidence_type();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "evidence.evidence_type");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional bytes serialized_evidence = 2;
    case 2:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
        auto str = _internal_mutable_serialized_evidence();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    default: {
handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* evidence::_InternalSerialize(
  ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:evidence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string evidence_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_evidence_type().data(), static_cast<int>(this->_internal_evidence_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "evidence.evidence_type");
    target = stream->WriteStringMaybeAliased(
               1, this->_internal_evidence_type(), target);
  }

  // optional bytes serialized_evidence = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
               2, this->_internal_serialized_evidence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
               _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:evidence)
  return target;
}

size_t evidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:evidence)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string evidence_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                      this->_internal_evidence_type());
    }

    // optional bytes serialized_evidence = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                      this->_internal_serialized_evidence());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
             _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void evidence::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:evidence)
  GOOGLE_DCHECK_NE(&from, this);
  const evidence* source =
    ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<evidence>(
      &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:evidence)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:evidence)
    MergeFrom(*source);
  }
}

void evidence::MergeFrom(const evidence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:evidence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_evidence_type(from._internal_evidence_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_serialized_evidence(from._internal_serialized_evidence());
    }
  }
}

void evidence::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:evidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void evidence::CopyFrom(const evidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:evidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool evidence::IsInitialized() const {
  return true;
}

void evidence::InternalSwap(evidence* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  evidence_type_.Swap(&other->evidence_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  serialized_evidence_.Swap(&other->serialized_evidence_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata evidence::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void evidence_list::InitAsDefaultInstance() {
}
class evidence_list::_Internal {
 public:
};

evidence_list::evidence_list(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
    assertion_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:evidence_list)
}
evidence_list::evidence_list(const evidence_list& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
    assertion_(from.assertion_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:evidence_list)
}

void evidence_list::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_evidence_list_certifier_2eproto.base);
}

evidence_list::~evidence_list() {
  // @@protoc_insertion_point(destructor:evidence_list)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void evidence_list::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void evidence_list::ArenaDtor(void* object) {
  evidence_list* _this = reinterpret_cast< evidence_list* >(object);
  (void)_this;
}
void evidence_list::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void evidence_list::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const evidence_list& evidence_list::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_evidence_list_certifier_2eproto.base);
  return *internal_default_instance();
}


void evidence_list::Clear() {
// @@protoc_insertion_point(message_clear_start:evidence_list)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assertion_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* evidence_list::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // repeated .evidence assertion = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        ptr -= 1;
        do {
          ptr += 1;
          ptr = ctx->ParseMessage(_internal_add_assertion(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
        } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
      } else goto handle_unusual;
      continue;
    default: {
handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* evidence_list::_InternalSerialize(
  ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:evidence_list)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .evidence assertion = 1;
  for (unsigned int i = 0,
       n = static_cast<unsigned int>(this->_internal_assertion_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
             InternalWriteMessage(1, this->_internal_assertion(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
               _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:evidence_list)
  return target;
}

size_t evidence_list::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:evidence_list)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .evidence assertion = 1;
  total_size += 1UL * this->_internal_assertion_size();
  for (const auto& msg : this->assertion_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
             _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void evidence_list::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:evidence_list)
  GOOGLE_DCHECK_NE(&from, this);
  const evidence_list* source =
    ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<evidence_list>(
      &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:evidence_list)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:evidence_list)
    MergeFrom(*source);
  }
}

void evidence_list::MergeFrom(const evidence_list& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:evidence_list)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  assertion_.MergeFrom(from.assertion_);
}

void evidence_list::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:evidence_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void evidence_list::CopyFrom(const evidence_list& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:evidence_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool evidence_list::IsInitialized() const {
  return true;
}

void evidence_list::InternalSwap(evidence_list* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  assertion_.InternalSwap(&other->assertion_);
}

::PROTOBUF_NAMESPACE_ID::Metadata evidence_list::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void sev_attestation_message::InitAsDefaultInstance() {
}
class sev_attestation_message::_Internal {
 public:
  using HasBits = decltype(std::declval<sev_attestation_message>()._has_bits_);
  static void set_has_what_was_said(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reported_attestation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

sev_attestation_message::sev_attestation_message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sev_attestation_message)
}
sev_attestation_message::sev_attestation_message(const sev_attestation_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
    _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  what_was_said_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_what_was_said()) {
    what_was_said_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_what_was_said(),
                       GetArena());
  }
  reported_attestation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reported_attestation()) {
    reported_attestation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reported_attestation(),
                              GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:sev_attestation_message)
}

void sev_attestation_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_sev_attestation_message_certifier_2eproto.base);
  what_was_said_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reported_attestation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

sev_attestation_message::~sev_attestation_message() {
  // @@protoc_insertion_point(destructor:sev_attestation_message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void sev_attestation_message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  what_was_said_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reported_attestation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void sev_attestation_message::ArenaDtor(void* object) {
  sev_attestation_message* _this = reinterpret_cast< sev_attestation_message* >(object);
  (void)_this;
}
void sev_attestation_message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void sev_attestation_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const sev_attestation_message& sev_attestation_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_sev_attestation_message_certifier_2eproto.base);
  return *internal_default_instance();
}


void sev_attestation_message::Clear() {
// @@protoc_insertion_point(message_clear_start:sev_attestation_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      what_was_said_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      reported_attestation_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* sev_attestation_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits {};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // optional bytes what_was_said = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        auto str = _internal_mutable_what_was_said();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional bytes reported_attestation = 2;
    case 2:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
        auto str = _internal_mutable_reported_attestation();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    default: {
handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* sev_attestation_message::_InternalSerialize(
  ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sev_attestation_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes what_was_said = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
               1, this->_internal_what_was_said(), target);
  }

  // optional bytes reported_attestation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
               2, this->_internal_reported_attestation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
               _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sev_attestation_message)
  return target;
}

size_t sev_attestation_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sev_attestation_message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes what_was_said = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                      this->_internal_what_was_said());
    }

    // optional bytes reported_attestation = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                      this->_internal_reported_attestation());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
             _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void sev_attestation_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sev_attestation_message)
  GOOGLE_DCHECK_NE(&from, this);
  const sev_attestation_message* source =
    ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<sev_attestation_message>(
      &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:sev_attestation_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:sev_attestation_message)
    MergeFrom(*source);
  }
}

void sev_attestation_message::MergeFrom(const sev_attestation_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sev_attestation_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_what_was_said(from._internal_what_was_said());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_reported_attestation(from._internal_reported_attestation());
    }
  }
}

void sev_attestation_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sev_attestation_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sev_attestation_message::CopyFrom(const sev_attestation_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sev_attestation_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sev_attestation_message::IsInitialized() const {
  return true;
}

void sev_attestation_message::InternalSwap(sev_attestation_message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  what_was_said_.Swap(&other->what_was_said_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reported_attestation_.Swap(&other->reported_attestation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata sev_attestation_message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void gramine_attestation_message::InitAsDefaultInstance() {
}
class gramine_attestation_message::_Internal {
 public:
  using HasBits = decltype(std::declval<gramine_attestation_message>()._has_bits_);
  static void set_has_what_was_said(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reported_attestation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

gramine_attestation_message::gramine_attestation_message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gramine_attestation_message)
}
gramine_attestation_message::gramine_attestation_message(const gramine_attestation_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
    _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  what_was_said_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_what_was_said()) {
    what_was_said_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_what_was_said(),
                       GetArena());
  }
  reported_attestation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reported_attestation()) {
    reported_attestation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reported_attestation(),
                              GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:gramine_attestation_message)
}

void gramine_attestation_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_gramine_attestation_message_certifier_2eproto.base);
  what_was_said_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reported_attestation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

gramine_attestation_message::~gramine_attestation_message() {
  // @@protoc_insertion_point(destructor:gramine_attestation_message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void gramine_attestation_message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  what_was_said_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reported_attestation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void gramine_attestation_message::ArenaDtor(void* object) {
  gramine_attestation_message* _this = reinterpret_cast< gramine_attestation_message* >(object);
  (void)_this;
}
void gramine_attestation_message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void gramine_attestation_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const gramine_attestation_message& gramine_attestation_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_gramine_attestation_message_certifier_2eproto.base);
  return *internal_default_instance();
}


void gramine_attestation_message::Clear() {
// @@protoc_insertion_point(message_clear_start:gramine_attestation_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      what_was_said_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      reported_attestation_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* gramine_attestation_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits {};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // optional bytes what_was_said = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        auto str = _internal_mutable_what_was_said();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional bytes reported_attestation = 2;
    case 2:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
        auto str = _internal_mutable_reported_attestation();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    default: {
handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* gramine_attestation_message::_InternalSerialize(
  ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gramine_attestation_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes what_was_said = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
               1, this->_internal_what_was_said(), target);
  }

  // optional bytes reported_attestation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
               2, this->_internal_reported_attestation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
               _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gramine_attestation_message)
  return target;
}

size_t gramine_attestation_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gramine_attestation_message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes what_was_said = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                      this->_internal_what_was_said());
    }

    // optional bytes reported_attestation = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                      this->_internal_reported_attestation());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
             _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void gramine_attestation_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gramine_attestation_message)
  GOOGLE_DCHECK_NE(&from, this);
  const gramine_attestation_message* source =
    ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<gramine_attestation_message>(
      &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:gramine_attestation_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:gramine_attestation_message)
    MergeFrom(*source);
  }
}

void gramine_attestation_message::MergeFrom(const gramine_attestation_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gramine_attestation_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_what_was_said(from._internal_what_was_said());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_reported_attestation(from._internal_reported_attestation());
    }
  }
}

void gramine_attestation_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gramine_attestation_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gramine_attestation_message::CopyFrom(const gramine_attestation_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gramine_attestation_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gramine_attestation_message::IsInitialized() const {
  return true;
}

void gramine_attestation_message::InternalSwap(gramine_attestation_message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  what_was_said_.Swap(&other->what_was_said_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reported_attestation_.Swap(&other->reported_attestation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata gramine_attestation_message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void evidence_package::InitAsDefaultInstance() {
}
class evidence_package::_Internal {
 public:
  using HasBits = decltype(std::declval<evidence_package>()._has_bits_);
  static void set_has_prover_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

evidence_package::evidence_package(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
    fact_assertion_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:evidence_package)
}
evidence_package::evidence_package(const evidence_package& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
    _has_bits_(from._has_bits_),
    fact_assertion_(from.fact_assertion_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prover_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_prover_type()) {
    prover_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prover_type(),
                     GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:evidence_package)
}

void evidence_package::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_evidence_package_certifier_2eproto.base);
  prover_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

evidence_package::~evidence_package() {
  // @@protoc_insertion_point(destructor:evidence_package)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void evidence_package::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  prover_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void evidence_package::ArenaDtor(void* object) {
  evidence_package* _this = reinterpret_cast< evidence_package* >(object);
  (void)_this;
}
void evidence_package::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void evidence_package::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const evidence_package& evidence_package::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_evidence_package_certifier_2eproto.base);
  return *internal_default_instance();
}


void evidence_package::Clear() {
// @@protoc_insertion_point(message_clear_start:evidence_package)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fact_assertion_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    prover_type_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* evidence_package::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits {};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // optional string prover_type = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        auto str = _internal_mutable_prover_type();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "evidence_package.prover_type");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // repeated .evidence fact_assertion = 2;
    case 2:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
        ptr -= 1;
        do {
          ptr += 1;
          ptr = ctx->ParseMessage(_internal_add_fact_assertion(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
        } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
      } else goto handle_unusual;
      continue;
    default: {
handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* evidence_package::_InternalSerialize(
  ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:evidence_package)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string prover_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_prover_type().data(), static_cast<int>(this->_internal_prover_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "evidence_package.prover_type");
    target = stream->WriteStringMaybeAliased(
               1, this->_internal_prover_type(), target);
  }

  // repeated .evidence fact_assertion = 2;
  for (unsigned int i = 0,
       n = static_cast<unsigned int>(this->_internal_fact_assertion_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
             InternalWriteMessage(2, this->_internal_fact_assertion(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
               _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:evidence_package)
  return target;
}

size_t evidence_package::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:evidence_package)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .evidence fact_assertion = 2;
  total_size += 1UL * this->_internal_fact_assertion_size();
  for (const auto& msg : this->fact_assertion_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string prover_type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
                  ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                    this->_internal_prover_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
             _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void evidence_package::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:evidence_package)
  GOOGLE_DCHECK_NE(&from, this);
  const evidence_package* source =
    ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<evidence_package>(
      &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:evidence_package)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:evidence_package)
    MergeFrom(*source);
  }
}

void evidence_package::MergeFrom(const evidence_package& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:evidence_package)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fact_assertion_.MergeFrom(from.fact_assertion_);
  if (from._internal_has_prover_type()) {
    _internal_set_prover_type(from._internal_prover_type());
  }
}

void evidence_package::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:evidence_package)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void evidence_package::CopyFrom(const evidence_package& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:evidence_package)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool evidence_package::IsInitialized() const {
  return true;
}

void evidence_package::InternalSwap(evidence_package* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fact_assertion_.InternalSwap(&other->fact_assertion_);
  prover_type_.Swap(&other->prover_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata evidence_package::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void certifier_rules::InitAsDefaultInstance() {
}
class certifier_rules::_Internal {
 public:
};

certifier_rules::certifier_rules(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
    rule_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:certifier_rules)
}
certifier_rules::certifier_rules(const certifier_rules& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
    rule_(from.rule_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:certifier_rules)
}

void certifier_rules::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_certifier_rules_certifier_2eproto.base);
}

certifier_rules::~certifier_rules() {
  // @@protoc_insertion_point(destructor:certifier_rules)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void certifier_rules::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void certifier_rules::ArenaDtor(void* object) {
  certifier_rules* _this = reinterpret_cast< certifier_rules* >(object);
  (void)_this;
}
void certifier_rules::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void certifier_rules::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const certifier_rules& certifier_rules::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_certifier_rules_certifier_2eproto.base);
  return *internal_default_instance();
}


void certifier_rules::Clear() {
// @@protoc_insertion_point(message_clear_start:certifier_rules)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rule_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* certifier_rules::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // repeated string rule = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        ptr -= 1;
        do {
          ptr += 1;
          auto str = _internal_add_rule();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "certifier_rules.rule");
#endif  // !NDEBUG
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
        } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
      } else goto handle_unusual;
      continue;
    default: {
handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* certifier_rules::_InternalSerialize(
  ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:certifier_rules)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string rule = 1;
  for (int i = 0, n = this->_internal_rule_size(); i < n; i++) {
    const auto& s = this->_internal_rule(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "certifier_rules.rule");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
               _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:certifier_rules)
  return target;
}

size_t certifier_rules::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:certifier_rules)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string rule = 1;
  total_size += 1 *
                ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(rule_.size());
  for (int i = 0, n = rule_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                    rule_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
             _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void certifier_rules::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:certifier_rules)
  GOOGLE_DCHECK_NE(&from, this);
  const certifier_rules* source =
    ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<certifier_rules>(
      &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:certifier_rules)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:certifier_rules)
    MergeFrom(*source);
  }
}

void certifier_rules::MergeFrom(const certifier_rules& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:certifier_rules)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rule_.MergeFrom(from.rule_);
}

void certifier_rules::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:certifier_rules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void certifier_rules::CopyFrom(const certifier_rules& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:certifier_rules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool certifier_rules::IsInitialized() const {
  return true;
}

void certifier_rules::InternalSwap(certifier_rules* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rule_.InternalSwap(&other->rule_);
}

::PROTOBUF_NAMESPACE_ID::Metadata certifier_rules::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void proved_statements::InitAsDefaultInstance() {
}
class proved_statements::_Internal {
 public:
};

proved_statements::proved_statements(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
    proved_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proved_statements)
}
proved_statements::proved_statements(const proved_statements& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
    proved_(from.proved_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proved_statements)
}

void proved_statements::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_proved_statements_certifier_2eproto.base);
}

proved_statements::~proved_statements() {
  // @@protoc_insertion_point(destructor:proved_statements)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void proved_statements::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void proved_statements::ArenaDtor(void* object) {
  proved_statements* _this = reinterpret_cast< proved_statements* >(object);
  (void)_this;
}
void proved_statements::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void proved_statements::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const proved_statements& proved_statements::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_proved_statements_certifier_2eproto.base);
  return *internal_default_instance();
}


void proved_statements::Clear() {
// @@protoc_insertion_point(message_clear_start:proved_statements)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proved_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* proved_statements::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // repeated .vse_clause proved = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        ptr -= 1;
        do {
          ptr += 1;
          ptr = ctx->ParseMessage(_internal_add_proved(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
        } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
      } else goto handle_unusual;
      continue;
    default: {
handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* proved_statements::_InternalSerialize(
  ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proved_statements)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vse_clause proved = 1;
  for (unsigned int i = 0,
       n = static_cast<unsigned int>(this->_internal_proved_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
             InternalWriteMessage(1, this->_internal_proved(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
               _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proved_statements)
  return target;
}

size_t proved_statements::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proved_statements)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vse_clause proved = 1;
  total_size += 1UL * this->_internal_proved_size();
  for (const auto& msg : this->proved_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
             _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void proved_statements::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proved_statements)
  GOOGLE_DCHECK_NE(&from, this);
  const proved_statements* source =
    ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<proved_statements>(
      &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:proved_statements)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:proved_statements)
    MergeFrom(*source);
  }
}

void proved_statements::MergeFrom(const proved_statements& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proved_statements)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  proved_.MergeFrom(from.proved_);
}

void proved_statements::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proved_statements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proved_statements::CopyFrom(const proved_statements& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proved_statements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proved_statements::IsInitialized() const {
  return true;
}

void proved_statements::InternalSwap(proved_statements* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  proved_.InternalSwap(&other->proved_);
}

::PROTOBUF_NAMESPACE_ID::Metadata proved_statements::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void proof_step::InitAsDefaultInstance() {
  ::_proof_step_default_instance_._instance.get_mutable()->s1_ = const_cast< ::vse_clause*>(
        ::vse_clause::internal_default_instance());
  ::_proof_step_default_instance_._instance.get_mutable()->s2_ = const_cast< ::vse_clause*>(
        ::vse_clause::internal_default_instance());
  ::_proof_step_default_instance_._instance.get_mutable()->conclusion_ = const_cast< ::vse_clause*>(
        ::vse_clause::internal_default_instance());
}
class proof_step::_Internal {
 public:
  using HasBits = decltype(std::declval<proof_step>()._has_bits_);
  static const ::vse_clause& s1(const proof_step* msg);
  static void set_has_s1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::vse_clause& s2(const proof_step* msg);
  static void set_has_s2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::vse_clause& conclusion(const proof_step* msg);
  static void set_has_conclusion(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rule_applied(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::vse_clause&
proof_step::_Internal::s1(const proof_step* msg) {
  return *msg->s1_;
}
const ::vse_clause&
proof_step::_Internal::s2(const proof_step* msg) {
  return *msg->s2_;
}
const ::vse_clause&
proof_step::_Internal::conclusion(const proof_step* msg) {
  return *msg->conclusion_;
}
proof_step::proof_step(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proof_step)
}
proof_step::proof_step(const proof_step& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
    _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_s1()) {
    s1_ = new ::vse_clause(*from.s1_);
  } else {
    s1_ = nullptr;
  }
  if (from._internal_has_s2()) {
    s2_ = new ::vse_clause(*from.s2_);
  } else {
    s2_ = nullptr;
  }
  if (from._internal_has_conclusion()) {
    conclusion_ = new ::vse_clause(*from.conclusion_);
  } else {
    conclusion_ = nullptr;
  }
  rule_applied_ = from.rule_applied_;
  // @@protoc_insertion_point(copy_constructor:proof_step)
}

void proof_step::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_proof_step_certifier_2eproto.base);
  ::memset(&s1_, 0, static_cast<size_t>(
             reinterpret_cast<char*>(&rule_applied_) -
             reinterpret_cast<char*>(&s1_)) + sizeof(rule_applied_));
}

proof_step::~proof_step() {
  // @@protoc_insertion_point(destructor:proof_step)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void proof_step::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete s1_;
  if (this != internal_default_instance()) delete s2_;
  if (this != internal_default_instance()) delete conclusion_;
}

void proof_step::ArenaDtor(void* object) {
  proof_step* _this = reinterpret_cast< proof_step* >(object);
  (void)_this;
}
void proof_step::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void proof_step::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const proof_step& proof_step::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_proof_step_certifier_2eproto.base);
  return *internal_default_instance();
}


void proof_step::Clear() {
// @@protoc_insertion_point(message_clear_start:proof_step)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(s1_ != nullptr);
      s1_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(s2_ != nullptr);
      s2_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(conclusion_ != nullptr);
      conclusion_->Clear();
    }
  }
  rule_applied_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* proof_step::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits {};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // optional .vse_clause s1 = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        ptr = ctx->ParseMessage(_internal_mutable_s1(), ptr);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional .vse_clause s2 = 2;
    case 2:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
        ptr = ctx->ParseMessage(_internal_mutable_s2(), ptr);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional .vse_clause conclusion = 3;
    case 3:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
        ptr = ctx->ParseMessage(_internal_mutable_conclusion(), ptr);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional int32 rule_applied = 4;
    case 4:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
        _Internal::set_has_rule_applied(&has_bits);
        rule_applied_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    default: {
handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* proof_step::_InternalSerialize(
  ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proof_step)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .vse_clause s1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
             InternalWriteMessage(
               1, _Internal::s1(this), target, stream);
  }

  // optional .vse_clause s2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
             InternalWriteMessage(
               2, _Internal::s2(this), target, stream);
  }

  // optional .vse_clause conclusion = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
             InternalWriteMessage(
               3, _Internal::conclusion(this), target, stream);
  }

  // optional int32 rule_applied = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_rule_applied(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
               _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proof_step)
  return target;
}

size_t proof_step::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proof_step)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .vse_clause s1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                      *s1_);
    }

    // optional .vse_clause s2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                      *s2_);
    }

    // optional .vse_clause conclusion = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                      *conclusion_);
    }

    // optional int32 rule_applied = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                      this->_internal_rule_applied());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
             _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void proof_step::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proof_step)
  GOOGLE_DCHECK_NE(&from, this);
  const proof_step* source =
    ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<proof_step>(
      &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:proof_step)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:proof_step)
    MergeFrom(*source);
  }
}

void proof_step::MergeFrom(const proof_step& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proof_step)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_s1()->::vse_clause::MergeFrom(from._internal_s1());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_s2()->::vse_clause::MergeFrom(from._internal_s2());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_conclusion()->::vse_clause::MergeFrom(from._internal_conclusion());
    }
    if (cached_has_bits & 0x00000008u) {
      rule_applied_ = from.rule_applied_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void proof_step::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proof_step)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proof_step::CopyFrom(const proof_step& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proof_step)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proof_step::IsInitialized() const {
  return true;
}

void proof_step::InternalSwap(proof_step* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
  PROTOBUF_FIELD_OFFSET(proof_step, rule_applied_)
  + sizeof(proof_step::rule_applied_)
  - PROTOBUF_FIELD_OFFSET(proof_step, s1_)>(
    reinterpret_cast<char*>(&s1_),
    reinterpret_cast<char*>(&other->s1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata proof_step::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void proof::InitAsDefaultInstance() {
  ::_proof_default_instance_._instance.get_mutable()->to_prove_ = const_cast< ::vse_clause*>(
        ::vse_clause::internal_default_instance());
}
class proof::_Internal {
 public:
  using HasBits = decltype(std::declval<proof>()._has_bits_);
  static const ::vse_clause& to_prove(const proof* msg);
  static void set_has_to_prove(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::vse_clause&
proof::_Internal::to_prove(const proof* msg) {
  return *msg->to_prove_;
}
proof::proof(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
    already_proved_(arena),
    steps_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proof)
}
proof::proof(const proof& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
    _has_bits_(from._has_bits_),
    already_proved_(from.already_proved_),
    steps_(from.steps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_to_prove()) {
    to_prove_ = new ::vse_clause(*from.to_prove_);
  } else {
    to_prove_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proof)
}

void proof::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_proof_certifier_2eproto.base);
  to_prove_ = nullptr;
}

proof::~proof() {
  // @@protoc_insertion_point(destructor:proof)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void proof::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete to_prove_;
}

void proof::ArenaDtor(void* object) {
  proof* _this = reinterpret_cast< proof* >(object);
  (void)_this;
}
void proof::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void proof::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const proof& proof::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_proof_certifier_2eproto.base);
  return *internal_default_instance();
}


void proof::Clear() {
// @@protoc_insertion_point(message_clear_start:proof)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  already_proved_.Clear();
  steps_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(to_prove_ != nullptr);
    to_prove_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* proof::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits {};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // optional .vse_clause to_prove = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        ptr = ctx->ParseMessage(_internal_mutable_to_prove(), ptr);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // repeated .vse_clause already_proved = 2;
    case 2:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
        ptr -= 1;
        do {
          ptr += 1;
          ptr = ctx->ParseMessage(_internal_add_already_proved(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
        } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
      } else goto handle_unusual;
      continue;
    // repeated .proof_step steps = 3;
    case 3:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
        ptr -= 1;
        do {
          ptr += 1;
          ptr = ctx->ParseMessage(_internal_add_steps(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
        } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
      } else goto handle_unusual;
      continue;
    default: {
handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* proof::_InternalSerialize(
  ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proof)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .vse_clause to_prove = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
             InternalWriteMessage(
               1, _Internal::to_prove(this), target, stream);
  }

  // repeated .vse_clause already_proved = 2;
  for (unsigned int i = 0,
       n = static_cast<unsigned int>(this->_internal_already_proved_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
             InternalWriteMessage(2, this->_internal_already_proved(i), target, stream);
  }

  // repeated .proof_step steps = 3;
  for (unsigned int i = 0,
       n = static_cast<unsigned int>(this->_internal_steps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
             InternalWriteMessage(3, this->_internal_steps(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
               _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proof)
  return target;
}

size_t proof::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proof)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vse_clause already_proved = 2;
  total_size += 1UL * this->_internal_already_proved_size();
  for (const auto& msg : this->already_proved_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proof_step steps = 3;
  total_size += 1UL * this->_internal_steps_size();
  for (const auto& msg : this->steps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .vse_clause to_prove = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
                  ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                    *to_prove_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
             _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void proof::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proof)
  GOOGLE_DCHECK_NE(&from, this);
  const proof* source =
    ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<proof>(
      &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:proof)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:proof)
    MergeFrom(*source);
  }
}

void proof::MergeFrom(const proof& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proof)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  already_proved_.MergeFrom(from.already_proved_);
  steps_.MergeFrom(from.steps_);
  if (from._internal_has_to_prove()) {
    _internal_mutable_to_prove()->::vse_clause::MergeFrom(from._internal_to_prove());
  }
}

void proof::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proof::CopyFrom(const proof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proof::IsInitialized() const {
  return true;
}

void proof::InternalSwap(proof* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  already_proved_.InternalSwap(&other->already_proved_);
  steps_.InternalSwap(&other->steps_);
  swap(to_prove_, other->to_prove_);
}

::PROTOBUF_NAMESPACE_ID::Metadata proof::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void trust_request_message::InitAsDefaultInstance() {
  ::_trust_request_message_default_instance_._instance.get_mutable()->support_ = const_cast< ::evidence_package*>(
        ::evidence_package::internal_default_instance());
}
class trust_request_message::_Internal {
 public:
  using HasBits = decltype(std::declval<trust_request_message>()._has_bits_);
  static void set_has_requesting_enclave_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_providing_enclave_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_submitted_evidence_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_purpose(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::evidence_package& support(const trust_request_message* msg);
  static void set_has_support(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::evidence_package&
trust_request_message::_Internal::support(const trust_request_message* msg) {
  return *msg->support_;
}
trust_request_message::trust_request_message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trust_request_message)
}
trust_request_message::trust_request_message(const trust_request_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
    _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  requesting_enclave_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_requesting_enclave_tag()) {
    requesting_enclave_tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_requesting_enclave_tag(),
                                GetArena());
  }
  providing_enclave_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_providing_enclave_tag()) {
    providing_enclave_tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_providing_enclave_tag(),
                               GetArena());
  }
  submitted_evidence_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_submitted_evidence_type()) {
    submitted_evidence_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_submitted_evidence_type(),
                                 GetArena());
  }
  purpose_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_purpose()) {
    purpose_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_purpose(),
                 GetArena());
  }
  if (from._internal_has_support()) {
    support_ = new ::evidence_package(*from.support_);
  } else {
    support_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:trust_request_message)
}

void trust_request_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_trust_request_message_certifier_2eproto.base);
  requesting_enclave_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  providing_enclave_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  submitted_evidence_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  purpose_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  support_ = nullptr;
}

trust_request_message::~trust_request_message() {
  // @@protoc_insertion_point(destructor:trust_request_message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void trust_request_message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  requesting_enclave_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  providing_enclave_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  submitted_evidence_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  purpose_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete support_;
}

void trust_request_message::ArenaDtor(void* object) {
  trust_request_message* _this = reinterpret_cast< trust_request_message* >(object);
  (void)_this;
}
void trust_request_message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void trust_request_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const trust_request_message& trust_request_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_trust_request_message_certifier_2eproto.base);
  return *internal_default_instance();
}


void trust_request_message::Clear() {
// @@protoc_insertion_point(message_clear_start:trust_request_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      requesting_enclave_tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      providing_enclave_tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      submitted_evidence_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      purpose_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(support_ != nullptr);
      support_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* trust_request_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits {};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // optional string requesting_enclave_tag = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        auto str = _internal_mutable_requesting_enclave_tag();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trust_request_message.requesting_enclave_tag");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional string providing_enclave_tag = 2;
    case 2:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
        auto str = _internal_mutable_providing_enclave_tag();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trust_request_message.providing_enclave_tag");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional string submitted_evidence_type = 3;
    case 3:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
        auto str = _internal_mutable_submitted_evidence_type();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trust_request_message.submitted_evidence_type");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional string purpose = 4;
    case 4:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
        auto str = _internal_mutable_purpose();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trust_request_message.purpose");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional .evidence_package support = 5;
    case 5:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
        ptr = ctx->ParseMessage(_internal_mutable_support(), ptr);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    default: {
handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* trust_request_message::_InternalSerialize(
  ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trust_request_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string requesting_enclave_tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_requesting_enclave_tag().data(), static_cast<int>(this->_internal_requesting_enclave_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "trust_request_message.requesting_enclave_tag");
    target = stream->WriteStringMaybeAliased(
               1, this->_internal_requesting_enclave_tag(), target);
  }

  // optional string providing_enclave_tag = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_providing_enclave_tag().data(), static_cast<int>(this->_internal_providing_enclave_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "trust_request_message.providing_enclave_tag");
    target = stream->WriteStringMaybeAliased(
               2, this->_internal_providing_enclave_tag(), target);
  }

  // optional string submitted_evidence_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_submitted_evidence_type().data(), static_cast<int>(this->_internal_submitted_evidence_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "trust_request_message.submitted_evidence_type");
    target = stream->WriteStringMaybeAliased(
               3, this->_internal_submitted_evidence_type(), target);
  }

  // optional string purpose = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_purpose().data(), static_cast<int>(this->_internal_purpose().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "trust_request_message.purpose");
    target = stream->WriteStringMaybeAliased(
               4, this->_internal_purpose(), target);
  }

  // optional .evidence_package support = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
             InternalWriteMessage(
               5, _Internal::support(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
               _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trust_request_message)
  return target;
}

size_t trust_request_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trust_request_message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string requesting_enclave_tag = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                      this->_internal_requesting_enclave_tag());
    }

    // optional string providing_enclave_tag = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                      this->_internal_providing_enclave_tag());
    }

    // optional string submitted_evidence_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                      this->_internal_submitted_evidence_type());
    }

    // optional string purpose = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                      this->_internal_purpose());
    }

    // optional .evidence_package support = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                      *support_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
             _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void trust_request_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trust_request_message)
  GOOGLE_DCHECK_NE(&from, this);
  const trust_request_message* source =
    ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<trust_request_message>(
      &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:trust_request_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:trust_request_message)
    MergeFrom(*source);
  }
}

void trust_request_message::MergeFrom(const trust_request_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trust_request_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_requesting_enclave_tag(from._internal_requesting_enclave_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_providing_enclave_tag(from._internal_providing_enclave_tag());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_submitted_evidence_type(from._internal_submitted_evidence_type());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_purpose(from._internal_purpose());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_support()->::evidence_package::MergeFrom(from._internal_support());
    }
  }
}

void trust_request_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trust_request_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void trust_request_message::CopyFrom(const trust_request_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trust_request_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool trust_request_message::IsInitialized() const {
  return true;
}

void trust_request_message::InternalSwap(trust_request_message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  requesting_enclave_tag_.Swap(&other->requesting_enclave_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  providing_enclave_tag_.Swap(&other->providing_enclave_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  submitted_evidence_type_.Swap(&other->submitted_evidence_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  purpose_.Swap(&other->purpose_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(support_, other->support_);
}

::PROTOBUF_NAMESPACE_ID::Metadata trust_request_message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void trust_response_message::InitAsDefaultInstance() {
}
class trust_response_message::_Internal {
 public:
  using HasBits = decltype(std::declval<trust_response_message>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_requesting_enclave_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_providing_enclave_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_artifact(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

trust_response_message::trust_response_message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trust_response_message)
}
trust_response_message::trust_response_message(const trust_response_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
    _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_status()) {
    status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_status(),
                GetArena());
  }
  requesting_enclave_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_requesting_enclave_tag()) {
    requesting_enclave_tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_requesting_enclave_tag(),
                                GetArena());
  }
  providing_enclave_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_providing_enclave_tag()) {
    providing_enclave_tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_providing_enclave_tag(),
                               GetArena());
  }
  artifact_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_artifact()) {
    artifact_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_artifact(),
                  GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:trust_response_message)
}

void trust_response_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_trust_response_message_certifier_2eproto.base);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requesting_enclave_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  providing_enclave_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  artifact_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

trust_response_message::~trust_response_message() {
  // @@protoc_insertion_point(destructor:trust_response_message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void trust_response_message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requesting_enclave_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  providing_enclave_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  artifact_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void trust_response_message::ArenaDtor(void* object) {
  trust_response_message* _this = reinterpret_cast< trust_response_message* >(object);
  (void)_this;
}
void trust_response_message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void trust_response_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const trust_response_message& trust_response_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_trust_response_message_certifier_2eproto.base);
  return *internal_default_instance();
}


void trust_response_message::Clear() {
// @@protoc_insertion_point(message_clear_start:trust_response_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      status_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      requesting_enclave_tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      providing_enclave_tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      artifact_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* trust_response_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits {};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // optional string status = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        auto str = _internal_mutable_status();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trust_response_message.status");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional string requesting_enclave_tag = 2;
    case 2:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
        auto str = _internal_mutable_requesting_enclave_tag();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trust_response_message.requesting_enclave_tag");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional string providing_enclave_tag = 3;
    case 3:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
        auto str = _internal_mutable_providing_enclave_tag();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trust_response_message.providing_enclave_tag");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional bytes artifact = 4;
    case 4:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
        auto str = _internal_mutable_artifact();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    default: {
handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* trust_response_message::_InternalSerialize(
  ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trust_response_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "trust_response_message.status");
    target = stream->WriteStringMaybeAliased(
               1, this->_internal_status(), target);
  }

  // optional string requesting_enclave_tag = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_requesting_enclave_tag().data(), static_cast<int>(this->_internal_requesting_enclave_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "trust_response_message.requesting_enclave_tag");
    target = stream->WriteStringMaybeAliased(
               2, this->_internal_requesting_enclave_tag(), target);
  }

  // optional string providing_enclave_tag = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_providing_enclave_tag().data(), static_cast<int>(this->_internal_providing_enclave_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "trust_response_message.providing_enclave_tag");
    target = stream->WriteStringMaybeAliased(
               3, this->_internal_providing_enclave_tag(), target);
  }

  // optional bytes artifact = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
               4, this->_internal_artifact(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
               _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trust_response_message)
  return target;
}

size_t trust_response_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trust_response_message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string status = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                      this->_internal_status());
    }

    // optional string requesting_enclave_tag = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                      this->_internal_requesting_enclave_tag());
    }

    // optional string providing_enclave_tag = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                      this->_internal_providing_enclave_tag());
    }

    // optional bytes artifact = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                      this->_internal_artifact());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
             _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void trust_response_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trust_response_message)
  GOOGLE_DCHECK_NE(&from, this);
  const trust_response_message* source =
    ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<trust_response_message>(
      &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:trust_response_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:trust_response_message)
    MergeFrom(*source);
  }
}

void trust_response_message::MergeFrom(const trust_response_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trust_response_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_status(from._internal_status());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_requesting_enclave_tag(from._internal_requesting_enclave_tag());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_providing_enclave_tag(from._internal_providing_enclave_tag());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_artifact(from._internal_artifact());
    }
  }
}

void trust_response_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trust_response_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void trust_response_message::CopyFrom(const trust_response_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trust_response_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool trust_response_message::IsInitialized() const {
  return true;
}

void trust_response_message::InternalSwap(trust_response_message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  requesting_enclave_tag_.Swap(&other->requesting_enclave_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  providing_enclave_tag_.Swap(&other->providing_enclave_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  artifact_.Swap(&other->artifact_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata trust_response_message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void storage_info_message::InitAsDefaultInstance() {
  ::_storage_info_message_default_instance_._instance.get_mutable()->storage_key_ = const_cast< ::key_message*>(
        ::key_message::internal_default_instance());
}
class storage_info_message::_Internal {
 public:
  using HasBits = decltype(std::declval<storage_info_message>()._has_bits_);
  static void set_has_storage_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_storage_descriptor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_address(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::key_message& storage_key(const storage_info_message* msg);
  static void set_has_storage_key(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::key_message&
storage_info_message::_Internal::storage_key(const storage_info_message* msg) {
  return *msg->storage_key_;
}
storage_info_message::storage_info_message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:storage_info_message)
}
storage_info_message::storage_info_message(const storage_info_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
    _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  storage_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_storage_type()) {
    storage_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_storage_type(),
                      GetArena());
  }
  storage_descriptor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_storage_descriptor()) {
    storage_descriptor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_storage_descriptor(),
                            GetArena());
  }
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_address()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
                 GetArena());
  }
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tag()) {
    tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tag(),
             GetArena());
  }
  if (from._internal_has_storage_key()) {
    storage_key_ = new ::key_message(*from.storage_key_);
  } else {
    storage_key_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:storage_info_message)
}

void storage_info_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_storage_info_message_certifier_2eproto.base);
  storage_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  storage_descriptor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  storage_key_ = nullptr;
}

storage_info_message::~storage_info_message() {
  // @@protoc_insertion_point(destructor:storage_info_message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void storage_info_message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  storage_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  storage_descriptor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete storage_key_;
}

void storage_info_message::ArenaDtor(void* object) {
  storage_info_message* _this = reinterpret_cast< storage_info_message* >(object);
  (void)_this;
}
void storage_info_message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void storage_info_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const storage_info_message& storage_info_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_storage_info_message_certifier_2eproto.base);
  return *internal_default_instance();
}


void storage_info_message::Clear() {
// @@protoc_insertion_point(message_clear_start:storage_info_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      storage_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      storage_descriptor_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(storage_key_ != nullptr);
      storage_key_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* storage_info_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits {};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // optional string storage_type = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        auto str = _internal_mutable_storage_type();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "storage_info_message.storage_type");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional string storage_descriptor = 2;
    case 2:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
        auto str = _internal_mutable_storage_descriptor();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "storage_info_message.storage_descriptor");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional string address = 3;
    case 3:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
        auto str = _internal_mutable_address();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "storage_info_message.address");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional .key_message storage_key = 4;
    case 4:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
        ptr = ctx->ParseMessage(_internal_mutable_storage_key(), ptr);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional string tag = 5;
    case 5:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
        auto str = _internal_mutable_tag();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "storage_info_message.tag");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    default: {
handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* storage_info_message::_InternalSerialize(
  ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:storage_info_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string storage_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_storage_type().data(), static_cast<int>(this->_internal_storage_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "storage_info_message.storage_type");
    target = stream->WriteStringMaybeAliased(
               1, this->_internal_storage_type(), target);
  }

  // optional string storage_descriptor = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_storage_descriptor().data(), static_cast<int>(this->_internal_storage_descriptor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "storage_info_message.storage_descriptor");
    target = stream->WriteStringMaybeAliased(
               2, this->_internal_storage_descriptor(), target);
  }

  // optional string address = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "storage_info_message.address");
    target = stream->WriteStringMaybeAliased(
               3, this->_internal_address(), target);
  }

  // optional .key_message storage_key = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
             InternalWriteMessage(
               4, _Internal::storage_key(this), target, stream);
  }

  // optional string tag = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "storage_info_message.tag");
    target = stream->WriteStringMaybeAliased(
               5, this->_internal_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
               _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:storage_info_message)
  return target;
}

size_t storage_info_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storage_info_message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string storage_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                      this->_internal_storage_type());
    }

    // optional string storage_descriptor = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                      this->_internal_storage_descriptor());
    }

    // optional string address = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                      this->_internal_address());
    }

    // optional string tag = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                      this->_internal_tag());
    }

    // optional .key_message storage_key = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                      *storage_key_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
             _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void storage_info_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:storage_info_message)
  GOOGLE_DCHECK_NE(&from, this);
  const storage_info_message* source =
    ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<storage_info_message>(
      &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:storage_info_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:storage_info_message)
    MergeFrom(*source);
  }
}

void storage_info_message::MergeFrom(const storage_info_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storage_info_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_storage_type(from._internal_storage_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_storage_descriptor(from._internal_storage_descriptor());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_address(from._internal_address());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_tag(from._internal_tag());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_storage_key()->::key_message::MergeFrom(from._internal_storage_key());
    }
  }
}

void storage_info_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:storage_info_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void storage_info_message::CopyFrom(const storage_info_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storage_info_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool storage_info_message::IsInitialized() const {
  return true;
}

void storage_info_message::InternalSwap(storage_info_message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  storage_type_.Swap(&other->storage_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  storage_descriptor_.Swap(&other->storage_descriptor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(storage_key_, other->storage_key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata storage_info_message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void channel_key_message::InitAsDefaultInstance() {
  ::_channel_key_message_default_instance_._instance.get_mutable()->auth_key_ = const_cast< ::key_message*>(
        ::key_message::internal_default_instance());
}
class channel_key_message::_Internal {
 public:
  using HasBits = decltype(std::declval<channel_key_message>()._has_bits_);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::key_message& auth_key(const channel_key_message* msg);
  static void set_has_auth_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::key_message&
channel_key_message::_Internal::auth_key(const channel_key_message* msg) {
  return *msg->auth_key_;
}
channel_key_message::channel_key_message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:channel_key_message)
}
channel_key_message::channel_key_message(const channel_key_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
    _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tag()) {
    tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tag(),
             GetArena());
  }
  if (from._internal_has_auth_key()) {
    auth_key_ = new ::key_message(*from.auth_key_);
  } else {
    auth_key_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:channel_key_message)
}

void channel_key_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_channel_key_message_certifier_2eproto.base);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_key_ = nullptr;
}

channel_key_message::~channel_key_message() {
  // @@protoc_insertion_point(destructor:channel_key_message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void channel_key_message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete auth_key_;
}

void channel_key_message::ArenaDtor(void* object) {
  channel_key_message* _this = reinterpret_cast< channel_key_message* >(object);
  (void)_this;
}
void channel_key_message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void channel_key_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const channel_key_message& channel_key_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_channel_key_message_certifier_2eproto.base);
  return *internal_default_instance();
}


void channel_key_message::Clear() {
// @@protoc_insertion_point(message_clear_start:channel_key_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(auth_key_ != nullptr);
      auth_key_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* channel_key_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits {};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // optional string tag = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        auto str = _internal_mutable_tag();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "channel_key_message.tag");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional .key_message auth_key = 2;
    case 2:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
        ptr = ctx->ParseMessage(_internal_mutable_auth_key(), ptr);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    default: {
handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* channel_key_message::_InternalSerialize(
  ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:channel_key_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "channel_key_message.tag");
    target = stream->WriteStringMaybeAliased(
               1, this->_internal_tag(), target);
  }

  // optional .key_message auth_key = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
             InternalWriteMessage(
               2, _Internal::auth_key(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
               _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channel_key_message)
  return target;
}

size_t channel_key_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channel_key_message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string tag = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                      this->_internal_tag());
    }

    // optional .key_message auth_key = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                      *auth_key_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
             _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void channel_key_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channel_key_message)
  GOOGLE_DCHECK_NE(&from, this);
  const channel_key_message* source =
    ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<channel_key_message>(
      &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:channel_key_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:channel_key_message)
    MergeFrom(*source);
  }
}

void channel_key_message::MergeFrom(const channel_key_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channel_key_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tag(from._internal_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_auth_key()->::key_message::MergeFrom(from._internal_auth_key());
    }
  }
}

void channel_key_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channel_key_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void channel_key_message::CopyFrom(const channel_key_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channel_key_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool channel_key_message::IsInitialized() const {
  return true;
}

void channel_key_message::InternalSwap(channel_key_message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(auth_key_, other->auth_key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata channel_key_message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void trusted_service_message::InitAsDefaultInstance() {
  ::_trusted_service_message_default_instance_._instance.get_mutable()->trusted_service_key_ = const_cast< ::key_message*>(
        ::key_message::internal_default_instance());
}
class trusted_service_message::_Internal {
 public:
  using HasBits = decltype(std::declval<trusted_service_message>()._has_bits_);
  static void set_has_trusted_service_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::key_message& trusted_service_key(const trusted_service_message* msg);
  static void set_has_trusted_service_key(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::key_message&
trusted_service_message::_Internal::trusted_service_key(const trusted_service_message* msg) {
  return *msg->trusted_service_key_;
}
trusted_service_message::trusted_service_message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trusted_service_message)
}
trusted_service_message::trusted_service_message(const trusted_service_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
    _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  trusted_service_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_trusted_service_address()) {
    trusted_service_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_trusted_service_address(),
                                 GetArena());
  }
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tag()) {
    tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tag(),
             GetArena());
  }
  if (from._internal_has_trusted_service_key()) {
    trusted_service_key_ = new ::key_message(*from.trusted_service_key_);
  } else {
    trusted_service_key_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:trusted_service_message)
}

void trusted_service_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_trusted_service_message_certifier_2eproto.base);
  trusted_service_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trusted_service_key_ = nullptr;
}

trusted_service_message::~trusted_service_message() {
  // @@protoc_insertion_point(destructor:trusted_service_message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void trusted_service_message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  trusted_service_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete trusted_service_key_;
}

void trusted_service_message::ArenaDtor(void* object) {
  trusted_service_message* _this = reinterpret_cast< trusted_service_message* >(object);
  (void)_this;
}
void trusted_service_message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void trusted_service_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const trusted_service_message& trusted_service_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_trusted_service_message_certifier_2eproto.base);
  return *internal_default_instance();
}


void trusted_service_message::Clear() {
// @@protoc_insertion_point(message_clear_start:trusted_service_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      trusted_service_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(trusted_service_key_ != nullptr);
      trusted_service_key_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* trusted_service_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits {};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // optional string trusted_service_address = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        auto str = _internal_mutable_trusted_service_address();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trusted_service_message.trusted_service_address");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional .key_message trusted_service_key = 2;
    case 2:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
        ptr = ctx->ParseMessage(_internal_mutable_trusted_service_key(), ptr);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional string tag = 3;
    case 3:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
        auto str = _internal_mutable_tag();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trusted_service_message.tag");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    default: {
handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* trusted_service_message::_InternalSerialize(
  ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trusted_service_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string trusted_service_address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_trusted_service_address().data(), static_cast<int>(this->_internal_trusted_service_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "trusted_service_message.trusted_service_address");
    target = stream->WriteStringMaybeAliased(
               1, this->_internal_trusted_service_address(), target);
  }

  // optional .key_message trusted_service_key = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
             InternalWriteMessage(
               2, _Internal::trusted_service_key(this), target, stream);
  }

  // optional string tag = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "trusted_service_message.tag");
    target = stream->WriteStringMaybeAliased(
               3, this->_internal_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
               _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trusted_service_message)
  return target;
}

size_t trusted_service_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trusted_service_message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string trusted_service_address = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                      this->_internal_trusted_service_address());
    }

    // optional string tag = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                      this->_internal_tag());
    }

    // optional .key_message trusted_service_key = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                      *trusted_service_key_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
             _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void trusted_service_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trusted_service_message)
  GOOGLE_DCHECK_NE(&from, this);
  const trusted_service_message* source =
    ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<trusted_service_message>(
      &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:trusted_service_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:trusted_service_message)
    MergeFrom(*source);
  }
}

void trusted_service_message::MergeFrom(const trusted_service_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trusted_service_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_trusted_service_address(from._internal_trusted_service_address());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_tag(from._internal_tag());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_trusted_service_key()->::key_message::MergeFrom(from._internal_trusted_service_key());
    }
  }
}

void trusted_service_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trusted_service_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void trusted_service_message::CopyFrom(const trusted_service_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trusted_service_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool trusted_service_message::IsInitialized() const {
  return true;
}

void trusted_service_message::InternalSwap(trusted_service_message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  trusted_service_address_.Swap(&other->trusted_service_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(trusted_service_key_, other->trusted_service_key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata trusted_service_message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void tagged_claim::InitAsDefaultInstance() {
  ::_tagged_claim_default_instance_._instance.get_mutable()->claim_ = const_cast< ::claim_message*>(
        ::claim_message::internal_default_instance());
}
class tagged_claim::_Internal {
 public:
  using HasBits = decltype(std::declval<tagged_claim>()._has_bits_);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::claim_message& claim(const tagged_claim* msg);
  static void set_has_claim(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::claim_message&
tagged_claim::_Internal::claim(const tagged_claim* msg) {
  return *msg->claim_;
}
tagged_claim::tagged_claim(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tagged_claim)
}
tagged_claim::tagged_claim(const tagged_claim& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
    _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tag()) {
    tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tag(),
             GetArena());
  }
  if (from._internal_has_claim()) {
    claim_ = new ::claim_message(*from.claim_);
  } else {
    claim_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tagged_claim)
}

void tagged_claim::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_tagged_claim_certifier_2eproto.base);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  claim_ = nullptr;
}

tagged_claim::~tagged_claim() {
  // @@protoc_insertion_point(destructor:tagged_claim)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void tagged_claim::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete claim_;
}

void tagged_claim::ArenaDtor(void* object) {
  tagged_claim* _this = reinterpret_cast< tagged_claim* >(object);
  (void)_this;
}
void tagged_claim::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void tagged_claim::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const tagged_claim& tagged_claim::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_tagged_claim_certifier_2eproto.base);
  return *internal_default_instance();
}


void tagged_claim::Clear() {
// @@protoc_insertion_point(message_clear_start:tagged_claim)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(claim_ != nullptr);
      claim_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* tagged_claim::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits {};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // optional string tag = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        auto str = _internal_mutable_tag();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tagged_claim.tag");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional .claim_message claim = 2;
    case 2:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
        ptr = ctx->ParseMessage(_internal_mutable_claim(), ptr);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    default: {
handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* tagged_claim::_InternalSerialize(
  ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tagged_claim)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tagged_claim.tag");
    target = stream->WriteStringMaybeAliased(
               1, this->_internal_tag(), target);
  }

  // optional .claim_message claim = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
             InternalWriteMessage(
               2, _Internal::claim(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
               _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tagged_claim)
  return target;
}

size_t tagged_claim::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tagged_claim)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string tag = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                      this->_internal_tag());
    }

    // optional .claim_message claim = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                      *claim_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
             _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void tagged_claim::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tagged_claim)
  GOOGLE_DCHECK_NE(&from, this);
  const tagged_claim* source =
    ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<tagged_claim>(
      &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:tagged_claim)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:tagged_claim)
    MergeFrom(*source);
  }
}

void tagged_claim::MergeFrom(const tagged_claim& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tagged_claim)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tag(from._internal_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_claim()->::claim_message::MergeFrom(from._internal_claim());
    }
  }
}

void tagged_claim::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tagged_claim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagged_claim::CopyFrom(const tagged_claim& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tagged_claim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagged_claim::IsInitialized() const {
  return true;
}

void tagged_claim::InternalSwap(tagged_claim* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(claim_, other->claim_);
}

::PROTOBUF_NAMESPACE_ID::Metadata tagged_claim::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void tagged_claims_sequence::InitAsDefaultInstance() {
}
class tagged_claims_sequence::_Internal {
 public:
};

tagged_claims_sequence::tagged_claims_sequence(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
    claims_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tagged_claims_sequence)
}
tagged_claims_sequence::tagged_claims_sequence(const tagged_claims_sequence& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
    claims_(from.claims_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tagged_claims_sequence)
}

void tagged_claims_sequence::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_tagged_claims_sequence_certifier_2eproto.base);
}

tagged_claims_sequence::~tagged_claims_sequence() {
  // @@protoc_insertion_point(destructor:tagged_claims_sequence)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void tagged_claims_sequence::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void tagged_claims_sequence::ArenaDtor(void* object) {
  tagged_claims_sequence* _this = reinterpret_cast< tagged_claims_sequence* >(object);
  (void)_this;
}
void tagged_claims_sequence::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void tagged_claims_sequence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const tagged_claims_sequence& tagged_claims_sequence::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_tagged_claims_sequence_certifier_2eproto.base);
  return *internal_default_instance();
}


void tagged_claims_sequence::Clear() {
// @@protoc_insertion_point(message_clear_start:tagged_claims_sequence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  claims_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* tagged_claims_sequence::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // repeated .tagged_claim claims = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        ptr -= 1;
        do {
          ptr += 1;
          ptr = ctx->ParseMessage(_internal_add_claims(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
        } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
      } else goto handle_unusual;
      continue;
    default: {
handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* tagged_claims_sequence::_InternalSerialize(
  ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tagged_claims_sequence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tagged_claim claims = 1;
  for (unsigned int i = 0,
       n = static_cast<unsigned int>(this->_internal_claims_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
             InternalWriteMessage(1, this->_internal_claims(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
               _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tagged_claims_sequence)
  return target;
}

size_t tagged_claims_sequence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tagged_claims_sequence)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tagged_claim claims = 1;
  total_size += 1UL * this->_internal_claims_size();
  for (const auto& msg : this->claims_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
             _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void tagged_claims_sequence::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tagged_claims_sequence)
  GOOGLE_DCHECK_NE(&from, this);
  const tagged_claims_sequence* source =
    ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<tagged_claims_sequence>(
      &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:tagged_claims_sequence)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:tagged_claims_sequence)
    MergeFrom(*source);
  }
}

void tagged_claims_sequence::MergeFrom(const tagged_claims_sequence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tagged_claims_sequence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  claims_.MergeFrom(from.claims_);
}

void tagged_claims_sequence::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tagged_claims_sequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagged_claims_sequence::CopyFrom(const tagged_claims_sequence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tagged_claims_sequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagged_claims_sequence::IsInitialized() const {
  return true;
}

void tagged_claims_sequence::InternalSwap(tagged_claims_sequence* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  claims_.InternalSwap(&other->claims_);
}

::PROTOBUF_NAMESPACE_ID::Metadata tagged_claims_sequence::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void policy_store_message::InitAsDefaultInstance() {
  ::_policy_store_message_default_instance_._instance.get_mutable()->policy_key_ = const_cast< ::key_message*>(
        ::key_message::internal_default_instance());
}
class policy_store_message::_Internal {
 public:
  using HasBits = decltype(std::declval<policy_store_message>()._has_bits_);
  static const ::key_message& policy_key(const policy_store_message* msg);
  static void set_has_policy_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::key_message&
policy_store_message::_Internal::policy_key(const policy_store_message* msg) {
  return *msg->policy_key_;
}
policy_store_message::policy_store_message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
    trusted_services_(arena),
    channel_authentication_keys_(arena),
    claims_(arena),
    storage_info_(arena),
    signed_claims_(arena),
    blobs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:policy_store_message)
}
policy_store_message::policy_store_message(const policy_store_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
    _has_bits_(from._has_bits_),
    trusted_services_(from.trusted_services_),
    channel_authentication_keys_(from.channel_authentication_keys_),
    claims_(from.claims_),
    storage_info_(from.storage_info_),
    signed_claims_(from.signed_claims_),
    blobs_(from.blobs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_policy_key()) {
    policy_key_ = new ::key_message(*from.policy_key_);
  } else {
    policy_key_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:policy_store_message)
}

void policy_store_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_policy_store_message_certifier_2eproto.base);
  policy_key_ = nullptr;
}

policy_store_message::~policy_store_message() {
  // @@protoc_insertion_point(destructor:policy_store_message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void policy_store_message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete policy_key_;
}

void policy_store_message::ArenaDtor(void* object) {
  policy_store_message* _this = reinterpret_cast< policy_store_message* >(object);
  (void)_this;
}
void policy_store_message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void policy_store_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const policy_store_message& policy_store_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_policy_store_message_certifier_2eproto.base);
  return *internal_default_instance();
}


void policy_store_message::Clear() {
// @@protoc_insertion_point(message_clear_start:policy_store_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trusted_services_.Clear();
  channel_authentication_keys_.Clear();
  claims_.Clear();
  storage_info_.Clear();
  signed_claims_.Clear();
  blobs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(policy_key_ != nullptr);
    policy_key_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* policy_store_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits {};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // optional .key_message policy_key = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        ptr = ctx->ParseMessage(_internal_mutable_policy_key(), ptr);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // repeated .trusted_service_message trusted_services = 2;
    case 2:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
        ptr -= 1;
        do {
          ptr += 1;
          ptr = ctx->ParseMessage(_internal_add_trusted_services(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
        } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
      } else goto handle_unusual;
      continue;
    // repeated .channel_key_message channel_authentication_keys = 3;
    case 3:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
        ptr -= 1;
        do {
          ptr += 1;
          ptr = ctx->ParseMessage(_internal_add_channel_authentication_keys(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
        } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
      } else goto handle_unusual;
      continue;
    // repeated .tagged_claim claims = 4;
    case 4:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
        ptr -= 1;
        do {
          ptr += 1;
          ptr = ctx->ParseMessage(_internal_add_claims(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
        } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
      } else goto handle_unusual;
      continue;
    // repeated .storage_info_message storage_info = 5;
    case 5:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
        ptr -= 1;
        do {
          ptr += 1;
          ptr = ctx->ParseMessage(_internal_add_storage_info(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
        } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
      } else goto handle_unusual;
      continue;
    // repeated .tagged_signed_claim signed_claims = 6;
    case 6:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
        ptr -= 1;
        do {
          ptr += 1;
          ptr = ctx->ParseMessage(_internal_add_signed_claims(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
        } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
      } else goto handle_unusual;
      continue;
    // repeated .tagged_blob_message blobs = 7;
    case 7:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
        ptr -= 1;
        do {
          ptr += 1;
          ptr = ctx->ParseMessage(_internal_add_blobs(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
        } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
      } else goto handle_unusual;
      continue;
    default: {
handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* policy_store_message::_InternalSerialize(
  ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:policy_store_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .key_message policy_key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
             InternalWriteMessage(
               1, _Internal::policy_key(this), target, stream);
  }

  // repeated .trusted_service_message trusted_services = 2;
  for (unsigned int i = 0,
       n = static_cast<unsigned int>(this->_internal_trusted_services_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
             InternalWriteMessage(2, this->_internal_trusted_services(i), target, stream);
  }

  // repeated .channel_key_message channel_authentication_keys = 3;
  for (unsigned int i = 0,
       n = static_cast<unsigned int>(this->_internal_channel_authentication_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
             InternalWriteMessage(3, this->_internal_channel_authentication_keys(i), target, stream);
  }

  // repeated .tagged_claim claims = 4;
  for (unsigned int i = 0,
       n = static_cast<unsigned int>(this->_internal_claims_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
             InternalWriteMessage(4, this->_internal_claims(i), target, stream);
  }

  // repeated .storage_info_message storage_info = 5;
  for (unsigned int i = 0,
       n = static_cast<unsigned int>(this->_internal_storage_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
             InternalWriteMessage(5, this->_internal_storage_info(i), target, stream);
  }

  // repeated .tagged_signed_claim signed_claims = 6;
  for (unsigned int i = 0,
       n = static_cast<unsigned int>(this->_internal_signed_claims_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
             InternalWriteMessage(6, this->_internal_signed_claims(i), target, stream);
  }

  // repeated .tagged_blob_message blobs = 7;
  for (unsigned int i = 0,
       n = static_cast<unsigned int>(this->_internal_blobs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
             InternalWriteMessage(7, this->_internal_blobs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
               _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:policy_store_message)
  return target;
}

size_t policy_store_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:policy_store_message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .trusted_service_message trusted_services = 2;
  total_size += 1UL * this->_internal_trusted_services_size();
  for (const auto& msg : this->trusted_services_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .channel_key_message channel_authentication_keys = 3;
  total_size += 1UL * this->_internal_channel_authentication_keys_size();
  for (const auto& msg : this->channel_authentication_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tagged_claim claims = 4;
  total_size += 1UL * this->_internal_claims_size();
  for (const auto& msg : this->claims_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .storage_info_message storage_info = 5;
  total_size += 1UL * this->_internal_storage_info_size();
  for (const auto& msg : this->storage_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tagged_signed_claim signed_claims = 6;
  total_size += 1UL * this->_internal_signed_claims_size();
  for (const auto& msg : this->signed_claims_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tagged_blob_message blobs = 7;
  total_size += 1UL * this->_internal_blobs_size();
  for (const auto& msg : this->blobs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .key_message policy_key = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
                  ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                    *policy_key_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
             _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void policy_store_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:policy_store_message)
  GOOGLE_DCHECK_NE(&from, this);
  const policy_store_message* source =
    ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<policy_store_message>(
      &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:policy_store_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:policy_store_message)
    MergeFrom(*source);
  }
}

void policy_store_message::MergeFrom(const policy_store_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:policy_store_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trusted_services_.MergeFrom(from.trusted_services_);
  channel_authentication_keys_.MergeFrom(from.channel_authentication_keys_);
  claims_.MergeFrom(from.claims_);
  storage_info_.MergeFrom(from.storage_info_);
  signed_claims_.MergeFrom(from.signed_claims_);
  blobs_.MergeFrom(from.blobs_);
  if (from._internal_has_policy_key()) {
    _internal_mutable_policy_key()->::key_message::MergeFrom(from._internal_policy_key());
  }
}

void policy_store_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:policy_store_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void policy_store_message::CopyFrom(const policy_store_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:policy_store_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool policy_store_message::IsInitialized() const {
  return true;
}

void policy_store_message::InternalSwap(policy_store_message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  trusted_services_.InternalSwap(&other->trusted_services_);
  channel_authentication_keys_.InternalSwap(&other->channel_authentication_keys_);
  claims_.InternalSwap(&other->claims_);
  storage_info_.InternalSwap(&other->storage_info_);
  signed_claims_.InternalSwap(&other->signed_claims_);
  blobs_.InternalSwap(&other->blobs_);
  swap(policy_key_, other->policy_key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata policy_store_message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void claims_sequence::InitAsDefaultInstance() {
}
class claims_sequence::_Internal {
 public:
};

claims_sequence::claims_sequence(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
    claims_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:claims_sequence)
}
claims_sequence::claims_sequence(const claims_sequence& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
    claims_(from.claims_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:claims_sequence)
}

void claims_sequence::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_claims_sequence_certifier_2eproto.base);
}

claims_sequence::~claims_sequence() {
  // @@protoc_insertion_point(destructor:claims_sequence)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void claims_sequence::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void claims_sequence::ArenaDtor(void* object) {
  claims_sequence* _this = reinterpret_cast< claims_sequence* >(object);
  (void)_this;
}
void claims_sequence::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void claims_sequence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const claims_sequence& claims_sequence::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_claims_sequence_certifier_2eproto.base);
  return *internal_default_instance();
}


void claims_sequence::Clear() {
// @@protoc_insertion_point(message_clear_start:claims_sequence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  claims_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* claims_sequence::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // repeated .claim_message claims = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        ptr -= 1;
        do {
          ptr += 1;
          ptr = ctx->ParseMessage(_internal_add_claims(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
        } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
      } else goto handle_unusual;
      continue;
    default: {
handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* claims_sequence::_InternalSerialize(
  ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:claims_sequence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .claim_message claims = 1;
  for (unsigned int i = 0,
       n = static_cast<unsigned int>(this->_internal_claims_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
             InternalWriteMessage(1, this->_internal_claims(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
               _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:claims_sequence)
  return target;
}

size_t claims_sequence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:claims_sequence)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .claim_message claims = 1;
  total_size += 1UL * this->_internal_claims_size();
  for (const auto& msg : this->claims_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
             _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void claims_sequence::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:claims_sequence)
  GOOGLE_DCHECK_NE(&from, this);
  const claims_sequence* source =
    ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<claims_sequence>(
      &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:claims_sequence)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:claims_sequence)
    MergeFrom(*source);
  }
}

void claims_sequence::MergeFrom(const claims_sequence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:claims_sequence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  claims_.MergeFrom(from.claims_);
}

void claims_sequence::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:claims_sequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void claims_sequence::CopyFrom(const claims_sequence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:claims_sequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool claims_sequence::IsInitialized() const {
  return true;
}

void claims_sequence::InternalSwap(claims_sequence* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  claims_.InternalSwap(&other->claims_);
}

::PROTOBUF_NAMESPACE_ID::Metadata claims_sequence::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void signed_claim_sequence::InitAsDefaultInstance() {
}
class signed_claim_sequence::_Internal {
 public:
};

signed_claim_sequence::signed_claim_sequence(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
    claims_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:signed_claim_sequence)
}
signed_claim_sequence::signed_claim_sequence(const signed_claim_sequence& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
    claims_(from.claims_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:signed_claim_sequence)
}

void signed_claim_sequence::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_signed_claim_sequence_certifier_2eproto.base);
}

signed_claim_sequence::~signed_claim_sequence() {
  // @@protoc_insertion_point(destructor:signed_claim_sequence)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void signed_claim_sequence::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void signed_claim_sequence::ArenaDtor(void* object) {
  signed_claim_sequence* _this = reinterpret_cast< signed_claim_sequence* >(object);
  (void)_this;
}
void signed_claim_sequence::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void signed_claim_sequence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const signed_claim_sequence& signed_claim_sequence::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_signed_claim_sequence_certifier_2eproto.base);
  return *internal_default_instance();
}


void signed_claim_sequence::Clear() {
// @@protoc_insertion_point(message_clear_start:signed_claim_sequence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  claims_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* signed_claim_sequence::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // repeated .signed_claim_message claims = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        ptr -= 1;
        do {
          ptr += 1;
          ptr = ctx->ParseMessage(_internal_add_claims(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
        } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
      } else goto handle_unusual;
      continue;
    default: {
handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* signed_claim_sequence::_InternalSerialize(
  ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:signed_claim_sequence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .signed_claim_message claims = 1;
  for (unsigned int i = 0,
       n = static_cast<unsigned int>(this->_internal_claims_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
             InternalWriteMessage(1, this->_internal_claims(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
               _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:signed_claim_sequence)
  return target;
}

size_t signed_claim_sequence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:signed_claim_sequence)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .signed_claim_message claims = 1;
  total_size += 1UL * this->_internal_claims_size();
  for (const auto& msg : this->claims_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
             _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void signed_claim_sequence::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:signed_claim_sequence)
  GOOGLE_DCHECK_NE(&from, this);
  const signed_claim_sequence* source =
    ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<signed_claim_sequence>(
      &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:signed_claim_sequence)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:signed_claim_sequence)
    MergeFrom(*source);
  }
}

void signed_claim_sequence::MergeFrom(const signed_claim_sequence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:signed_claim_sequence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  claims_.MergeFrom(from.claims_);
}

void signed_claim_sequence::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:signed_claim_sequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void signed_claim_sequence::CopyFrom(const signed_claim_sequence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:signed_claim_sequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool signed_claim_sequence::IsInitialized() const {
  return true;
}

void signed_claim_sequence::InternalSwap(signed_claim_sequence* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  claims_.InternalSwap(&other->claims_);
}

::PROTOBUF_NAMESPACE_ID::Metadata signed_claim_sequence::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void tagged_signed_claim::InitAsDefaultInstance() {
  ::_tagged_signed_claim_default_instance_._instance.get_mutable()->sc_ = const_cast< ::signed_claim_message*>(
        ::signed_claim_message::internal_default_instance());
}
class tagged_signed_claim::_Internal {
 public:
  using HasBits = decltype(std::declval<tagged_signed_claim>()._has_bits_);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::signed_claim_message& sc(const tagged_signed_claim* msg);
  static void set_has_sc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::signed_claim_message&
tagged_signed_claim::_Internal::sc(const tagged_signed_claim* msg) {
  return *msg->sc_;
}
tagged_signed_claim::tagged_signed_claim(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tagged_signed_claim)
}
tagged_signed_claim::tagged_signed_claim(const tagged_signed_claim& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
    _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tag()) {
    tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tag(),
             GetArena());
  }
  if (from._internal_has_sc()) {
    sc_ = new ::signed_claim_message(*from.sc_);
  } else {
    sc_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tagged_signed_claim)
}

void tagged_signed_claim::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_tagged_signed_claim_certifier_2eproto.base);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sc_ = nullptr;
}

tagged_signed_claim::~tagged_signed_claim() {
  // @@protoc_insertion_point(destructor:tagged_signed_claim)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void tagged_signed_claim::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sc_;
}

void tagged_signed_claim::ArenaDtor(void* object) {
  tagged_signed_claim* _this = reinterpret_cast< tagged_signed_claim* >(object);
  (void)_this;
}
void tagged_signed_claim::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void tagged_signed_claim::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const tagged_signed_claim& tagged_signed_claim::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_tagged_signed_claim_certifier_2eproto.base);
  return *internal_default_instance();
}


void tagged_signed_claim::Clear() {
// @@protoc_insertion_point(message_clear_start:tagged_signed_claim)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sc_ != nullptr);
      sc_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* tagged_signed_claim::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits {};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // optional string tag = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        auto str = _internal_mutable_tag();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tagged_signed_claim.tag");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional .signed_claim_message sc = 2;
    case 2:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
        ptr = ctx->ParseMessage(_internal_mutable_sc(), ptr);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    default: {
handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* tagged_signed_claim::_InternalSerialize(
  ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tagged_signed_claim)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tagged_signed_claim.tag");
    target = stream->WriteStringMaybeAliased(
               1, this->_internal_tag(), target);
  }

  // optional .signed_claim_message sc = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
             InternalWriteMessage(
               2, _Internal::sc(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
               _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tagged_signed_claim)
  return target;
}

size_t tagged_signed_claim::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tagged_signed_claim)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string tag = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                      this->_internal_tag());
    }

    // optional .signed_claim_message sc = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                      *sc_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
             _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void tagged_signed_claim::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tagged_signed_claim)
  GOOGLE_DCHECK_NE(&from, this);
  const tagged_signed_claim* source =
    ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<tagged_signed_claim>(
      &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:tagged_signed_claim)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:tagged_signed_claim)
    MergeFrom(*source);
  }
}

void tagged_signed_claim::MergeFrom(const tagged_signed_claim& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tagged_signed_claim)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tag(from._internal_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sc()->::signed_claim_message::MergeFrom(from._internal_sc());
    }
  }
}

void tagged_signed_claim::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tagged_signed_claim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagged_signed_claim::CopyFrom(const tagged_signed_claim& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tagged_signed_claim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagged_signed_claim::IsInitialized() const {
  return true;
}

void tagged_signed_claim::InternalSwap(tagged_signed_claim* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(sc_, other->sc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata tagged_signed_claim::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void buffer_sequence::InitAsDefaultInstance() {
}
class buffer_sequence::_Internal {
 public:
};

buffer_sequence::buffer_sequence(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
    block_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:buffer_sequence)
}
buffer_sequence::buffer_sequence(const buffer_sequence& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
    block_(from.block_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:buffer_sequence)
}

void buffer_sequence::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_buffer_sequence_certifier_2eproto.base);
}

buffer_sequence::~buffer_sequence() {
  // @@protoc_insertion_point(destructor:buffer_sequence)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void buffer_sequence::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void buffer_sequence::ArenaDtor(void* object) {
  buffer_sequence* _this = reinterpret_cast< buffer_sequence* >(object);
  (void)_this;
}
void buffer_sequence::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void buffer_sequence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const buffer_sequence& buffer_sequence::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_buffer_sequence_certifier_2eproto.base);
  return *internal_default_instance();
}


void buffer_sequence::Clear() {
// @@protoc_insertion_point(message_clear_start:buffer_sequence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* buffer_sequence::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // repeated bytes block = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        ptr -= 1;
        do {
          ptr += 1;
          auto str = _internal_add_block();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
        } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
      } else goto handle_unusual;
      continue;
    default: {
handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* buffer_sequence::_InternalSerialize(
  ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:buffer_sequence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes block = 1;
  for (int i = 0, n = this->_internal_block_size(); i < n; i++) {
    const auto& s = this->_internal_block(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
               _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:buffer_sequence)
  return target;
}

size_t buffer_sequence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:buffer_sequence)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes block = 1;
  total_size += 1 *
                ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(block_.size());
  for (int i = 0, n = block_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                    block_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
             _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void buffer_sequence::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:buffer_sequence)
  GOOGLE_DCHECK_NE(&from, this);
  const buffer_sequence* source =
    ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<buffer_sequence>(
      &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:buffer_sequence)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:buffer_sequence)
    MergeFrom(*source);
  }
}

void buffer_sequence::MergeFrom(const buffer_sequence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:buffer_sequence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  block_.MergeFrom(from.block_);
}

void buffer_sequence::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:buffer_sequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void buffer_sequence::CopyFrom(const buffer_sequence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:buffer_sequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool buffer_sequence::IsInitialized() const {
  return true;
}

void buffer_sequence::InternalSwap(buffer_sequence* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  block_.InternalSwap(&other->block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata buffer_sequence::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void run_request::InitAsDefaultInstance() {
}
class run_request::_Internal {
 public:
  using HasBits = decltype(std::declval<run_request>()._has_bits_);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cert(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

run_request::run_request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
    args_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:run_request)
}
run_request::run_request(const run_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
    _has_bits_(from._has_bits_),
    args_(from.args_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_location()) {
    location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_location(),
                  GetArena());
  }
  cert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_cert()) {
    cert_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cert(),
              GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:run_request)
}

void run_request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_run_request_certifier_2eproto.base);
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

run_request::~run_request() {
  // @@protoc_insertion_point(destructor:run_request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void run_request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cert_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void run_request::ArenaDtor(void* object) {
  run_request* _this = reinterpret_cast< run_request* >(object);
  (void)_this;
}
void run_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void run_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const run_request& run_request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_run_request_certifier_2eproto.base);
  return *internal_default_instance();
}


void run_request::Clear() {
// @@protoc_insertion_point(message_clear_start:run_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      location_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      cert_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* run_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits {};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // optional string location = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        auto str = _internal_mutable_location();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "run_request.location");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional bytes cert = 2;
    case 2:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
        auto str = _internal_mutable_cert();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // repeated string args = 3;
    case 3:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
        ptr -= 1;
        do {
          ptr += 1;
          auto str = _internal_add_args();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "run_request.args");
#endif  // !NDEBUG
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
        } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
      } else goto handle_unusual;
      continue;
    default: {
handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* run_request::_InternalSerialize(
  ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:run_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string location = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_location().data(), static_cast<int>(this->_internal_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "run_request.location");
    target = stream->WriteStringMaybeAliased(
               1, this->_internal_location(), target);
  }

  // optional bytes cert = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
               2, this->_internal_cert(), target);
  }

  // repeated string args = 3;
  for (int i = 0, n = this->_internal_args_size(); i < n; i++) {
    const auto& s = this->_internal_args(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "run_request.args");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
               _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:run_request)
  return target;
}

size_t run_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:run_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string args = 3;
  total_size += 1 *
                ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(args_.size());
  for (int i = 0, n = args_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                    args_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string location = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                      this->_internal_location());
    }

    // optional bytes cert = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                      this->_internal_cert());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
             _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void run_request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:run_request)
  GOOGLE_DCHECK_NE(&from, this);
  const run_request* source =
    ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<run_request>(
      &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:run_request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:run_request)
    MergeFrom(*source);
  }
}

void run_request::MergeFrom(const run_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:run_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_.MergeFrom(from.args_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_location(from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_cert(from._internal_cert());
    }
  }
}

void run_request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:run_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void run_request::CopyFrom(const run_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:run_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool run_request::IsInitialized() const {
  return true;
}

void run_request::InternalSwap(run_request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  args_.InternalSwap(&other->args_);
  location_.Swap(&other->location_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cert_.Swap(&other->cert_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata run_request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void run_response::InitAsDefaultInstance() {
}
class run_response::_Internal {
 public:
  using HasBits = decltype(std::declval<run_response>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

run_response::run_response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:run_response)
}
run_response::run_response(const run_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
    _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_status()) {
    status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_status(),
                GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:run_response)
}

void run_response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_run_response_certifier_2eproto.base);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

run_response::~run_response() {
  // @@protoc_insertion_point(destructor:run_response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void run_response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void run_response::ArenaDtor(void* object) {
  run_response* _this = reinterpret_cast< run_response* >(object);
  (void)_this;
}
void run_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void run_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const run_response& run_response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_run_response_certifier_2eproto.base);
  return *internal_default_instance();
}


void run_response::Clear() {
// @@protoc_insertion_point(message_clear_start:run_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    status_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* run_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits {};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // optional string status = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        auto str = _internal_mutable_status();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "run_response.status");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    default: {
handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* run_response::_InternalSerialize(
  ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:run_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "run_response.status");
    target = stream->WriteStringMaybeAliased(
               1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
               _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:run_response)
  return target;
}

size_t run_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:run_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string status = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
                  ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                    this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
             _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void run_response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:run_response)
  GOOGLE_DCHECK_NE(&from, this);
  const run_response* source =
    ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<run_response>(
      &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:run_response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:run_response)
    MergeFrom(*source);
  }
}

void run_response::MergeFrom(const run_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:run_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_set_status(from._internal_status());
  }
}

void run_response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:run_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void run_response::CopyFrom(const run_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:run_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool run_response::IsInitialized() const {
  return true;
}

void run_response::InternalSwap(run_response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata run_response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void app_request::InitAsDefaultInstance() {
}
class app_request::_Internal {
 public:
  using HasBits = decltype(std::declval<app_request>()._has_bits_);
  static void set_has_function(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

app_request::app_request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
    args_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:app_request)
}
app_request::app_request(const app_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
    _has_bits_(from._has_bits_),
    args_(from.args_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  function_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_function()) {
    function_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_function(),
                  GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:app_request)
}

void app_request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_app_request_certifier_2eproto.base);
  function_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

app_request::~app_request() {
  // @@protoc_insertion_point(destructor:app_request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void app_request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  function_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void app_request::ArenaDtor(void* object) {
  app_request* _this = reinterpret_cast< app_request* >(object);
  (void)_this;
}
void app_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void app_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const app_request& app_request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_app_request_certifier_2eproto.base);
  return *internal_default_instance();
}


void app_request::Clear() {
// @@protoc_insertion_point(message_clear_start:app_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    function_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* app_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits {};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // optional string function = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        auto str = _internal_mutable_function();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "app_request.function");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // repeated bytes args = 2;
    case 2:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
        ptr -= 1;
        do {
          ptr += 1;
          auto str = _internal_add_args();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
        } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
      } else goto handle_unusual;
      continue;
    default: {
handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* app_request::_InternalSerialize(
  ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:app_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string function = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_function().data(), static_cast<int>(this->_internal_function().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "app_request.function");
    target = stream->WriteStringMaybeAliased(
               1, this->_internal_function(), target);
  }

  // repeated bytes args = 2;
  for (int i = 0, n = this->_internal_args_size(); i < n; i++) {
    const auto& s = this->_internal_args(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
               _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:app_request)
  return target;
}

size_t app_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:app_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes args = 2;
  total_size += 1 *
                ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(args_.size());
  for (int i = 0, n = args_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                    args_.Get(i));
  }

  // optional string function = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
                  ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                    this->_internal_function());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
             _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void app_request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:app_request)
  GOOGLE_DCHECK_NE(&from, this);
  const app_request* source =
    ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<app_request>(
      &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:app_request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:app_request)
    MergeFrom(*source);
  }
}

void app_request::MergeFrom(const app_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:app_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_.MergeFrom(from.args_);
  if (from._internal_has_function()) {
    _internal_set_function(from._internal_function());
  }
}

void app_request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:app_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void app_request::CopyFrom(const app_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:app_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool app_request::IsInitialized() const {
  return true;
}

void app_request::InternalSwap(app_request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  args_.InternalSwap(&other->args_);
  function_.Swap(&other->function_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata app_request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void app_response::InitAsDefaultInstance() {
}
class app_response::_Internal {
 public:
  using HasBits = decltype(std::declval<app_response>()._has_bits_);
  static void set_has_function(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

app_response::app_response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
    args_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:app_response)
}
app_response::app_response(const app_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
    _has_bits_(from._has_bits_),
    args_(from.args_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  function_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_function()) {
    function_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_function(),
                  GetArena());
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_status()) {
    status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_status(),
                GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:app_response)
}

void app_response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_app_response_certifier_2eproto.base);
  function_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

app_response::~app_response() {
  // @@protoc_insertion_point(destructor:app_response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void app_response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  function_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void app_response::ArenaDtor(void* object) {
  app_response* _this = reinterpret_cast< app_response* >(object);
  (void)_this;
}
void app_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void app_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const app_response& app_response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_app_response_certifier_2eproto.base);
  return *internal_default_instance();
}


void app_response::Clear() {
// @@protoc_insertion_point(message_clear_start:app_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      function_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      status_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* app_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits {};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // optional string function = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        auto str = _internal_mutable_function();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "app_response.function");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional string status = 2;
    case 2:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
        auto str = _internal_mutable_status();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "app_response.status");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // repeated bytes args = 3;
    case 3:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
        ptr -= 1;
        do {
          ptr += 1;
          auto str = _internal_add_args();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
        } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
      } else goto handle_unusual;
      continue;
    default: {
handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* app_response::_InternalSerialize(
  ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:app_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string function = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_function().data(), static_cast<int>(this->_internal_function().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "app_response.function");
    target = stream->WriteStringMaybeAliased(
               1, this->_internal_function(), target);
  }

  // optional string status = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "app_response.status");
    target = stream->WriteStringMaybeAliased(
               2, this->_internal_status(), target);
  }

  // repeated bytes args = 3;
  for (int i = 0, n = this->_internal_args_size(); i < n; i++) {
    const auto& s = this->_internal_args(i);
    target = stream->WriteBytes(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
               _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:app_response)
  return target;
}

size_t app_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:app_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes args = 3;
  total_size += 1 *
                ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(args_.size());
  for (int i = 0, n = args_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                    args_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string function = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                      this->_internal_function());
    }

    // optional string status = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                      this->_internal_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
             _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void app_response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:app_response)
  GOOGLE_DCHECK_NE(&from, this);
  const app_response* source =
    ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<app_response>(
      &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:app_response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:app_response)
    MergeFrom(*source);
  }
}

void app_response::MergeFrom(const app_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:app_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_.MergeFrom(from.args_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_function(from._internal_function());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_status(from._internal_status());
    }
  }
}

void app_response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:app_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void app_response::CopyFrom(const app_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:app_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool app_response::IsInitialized() const {
  return true;
}

void app_response::InternalSwap(app_response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  args_.InternalSwap(&other->args_);
  function_.Swap(&other->function_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata app_response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void tagged_blob_message::InitAsDefaultInstance() {
}
class tagged_blob_message::_Internal {
 public:
  using HasBits = decltype(std::declval<tagged_blob_message>()._has_bits_);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

tagged_blob_message::tagged_blob_message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tagged_blob_message)
}
tagged_blob_message::tagged_blob_message(const tagged_blob_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
    _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tag()) {
    tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tag(),
             GetArena());
  }
  b_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_b()) {
    b_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_b(),
           GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:tagged_blob_message)
}

void tagged_blob_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_tagged_blob_message_certifier_2eproto.base);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  b_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

tagged_blob_message::~tagged_blob_message() {
  // @@protoc_insertion_point(destructor:tagged_blob_message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void tagged_blob_message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  b_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void tagged_blob_message::ArenaDtor(void* object) {
  tagged_blob_message* _this = reinterpret_cast< tagged_blob_message* >(object);
  (void)_this;
}
void tagged_blob_message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void tagged_blob_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const tagged_blob_message& tagged_blob_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_tagged_blob_message_certifier_2eproto.base);
  return *internal_default_instance();
}


void tagged_blob_message::Clear() {
// @@protoc_insertion_point(message_clear_start:tagged_blob_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      b_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* tagged_blob_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits {};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // optional string tag = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        auto str = _internal_mutable_tag();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
        ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tagged_blob_message.tag");
#endif  // !NDEBUG
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    // optional bytes b = 2;
    case 2:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
        auto str = _internal_mutable_b();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
        CHK_(ptr);
      } else goto handle_unusual;
      continue;
    default: {
handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* tagged_blob_message::_InternalSerialize(
  ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tagged_blob_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tagged_blob_message.tag");
    target = stream->WriteStringMaybeAliased(
               1, this->_internal_tag(), target);
  }

  // optional bytes b = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
               2, this->_internal_b(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
               _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tagged_blob_message)
  return target;
}

size_t tagged_blob_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tagged_blob_message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string tag = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                      this->_internal_tag());
    }

    // optional bytes b = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                      this->_internal_b());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
             _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void tagged_blob_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tagged_blob_message)
  GOOGLE_DCHECK_NE(&from, this);
  const tagged_blob_message* source =
    ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<tagged_blob_message>(
      &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:tagged_blob_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:tagged_blob_message)
    MergeFrom(*source);
  }
}

void tagged_blob_message::MergeFrom(const tagged_blob_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tagged_blob_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tag(from._internal_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_b(from._internal_b());
    }
  }
}

void tagged_blob_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tagged_blob_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagged_blob_message::CopyFrom(const tagged_blob_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tagged_blob_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagged_blob_message::IsInitialized() const {
  return true;
}

void tagged_blob_message::InternalSwap(tagged_blob_message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  b_.Swap(&other->b_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata tagged_blob_message::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::time_point* Arena::CreateMaybeMessage< ::time_point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::time_point >(arena);
}
template<> PROTOBUF_NOINLINE ::rsa_message* Arena::CreateMaybeMessage< ::rsa_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rsa_message >(arena);
}
template<> PROTOBUF_NOINLINE ::point_message* Arena::CreateMaybeMessage< ::point_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::point_message >(arena);
}
template<> PROTOBUF_NOINLINE ::ecc_message* Arena::CreateMaybeMessage< ::ecc_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ecc_message >(arena);
}
template<> PROTOBUF_NOINLINE ::key_message* Arena::CreateMaybeMessage< ::key_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::key_message >(arena);
}
template<> PROTOBUF_NOINLINE ::protected_blob_message* Arena::CreateMaybeMessage< ::protected_blob_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protected_blob_message >(arena);
}
template<> PROTOBUF_NOINLINE ::property* Arena::CreateMaybeMessage< ::property >(Arena* arena) {
  return Arena::CreateMessageInternal< ::property >(arena);
}
template<> PROTOBUF_NOINLINE ::properties* Arena::CreateMaybeMessage< ::properties >(Arena* arena) {
  return Arena::CreateMessageInternal< ::properties >(arena);
}
template<> PROTOBUF_NOINLINE ::platform* Arena::CreateMaybeMessage< ::platform >(Arena* arena) {
  return Arena::CreateMessageInternal< ::platform >(arena);
}
template<> PROTOBUF_NOINLINE ::environment* Arena::CreateMaybeMessage< ::environment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::environment >(arena);
}
template<> PROTOBUF_NOINLINE ::entity_message* Arena::CreateMaybeMessage< ::entity_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::entity_message >(arena);
}
template<> PROTOBUF_NOINLINE ::vse_clause* Arena::CreateMaybeMessage< ::vse_clause >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vse_clause >(arena);
}
template<> PROTOBUF_NOINLINE ::vse_clauses* Arena::CreateMaybeMessage< ::vse_clauses >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vse_clauses >(arena);
}
template<> PROTOBUF_NOINLINE ::claim_message* Arena::CreateMaybeMessage< ::claim_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::claim_message >(arena);
}
template<> PROTOBUF_NOINLINE ::attestation_user_data* Arena::CreateMaybeMessage< ::attestation_user_data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::attestation_user_data >(arena);
}
template<> PROTOBUF_NOINLINE ::vse_attestation_report_info* Arena::CreateMaybeMessage< ::vse_attestation_report_info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vse_attestation_report_info >(arena);
}
template<> PROTOBUF_NOINLINE ::signed_report* Arena::CreateMaybeMessage< ::signed_report >(Arena* arena) {
  return Arena::CreateMessageInternal< ::signed_report >(arena);
}
template<> PROTOBUF_NOINLINE ::signed_claim_message* Arena::CreateMaybeMessage< ::signed_claim_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::signed_claim_message >(arena);
}
template<> PROTOBUF_NOINLINE ::evidence* Arena::CreateMaybeMessage< ::evidence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::evidence >(arena);
}
template<> PROTOBUF_NOINLINE ::evidence_list* Arena::CreateMaybeMessage< ::evidence_list >(Arena* arena) {
  return Arena::CreateMessageInternal< ::evidence_list >(arena);
}
template<> PROTOBUF_NOINLINE ::sev_attestation_message* Arena::CreateMaybeMessage< ::sev_attestation_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sev_attestation_message >(arena);
}
template<> PROTOBUF_NOINLINE ::gramine_attestation_message* Arena::CreateMaybeMessage< ::gramine_attestation_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gramine_attestation_message >(arena);
}
template<> PROTOBUF_NOINLINE ::evidence_package* Arena::CreateMaybeMessage< ::evidence_package >(Arena* arena) {
  return Arena::CreateMessageInternal< ::evidence_package >(arena);
}
template<> PROTOBUF_NOINLINE ::certifier_rules* Arena::CreateMaybeMessage< ::certifier_rules >(Arena* arena) {
  return Arena::CreateMessageInternal< ::certifier_rules >(arena);
}
template<> PROTOBUF_NOINLINE ::proved_statements* Arena::CreateMaybeMessage< ::proved_statements >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proved_statements >(arena);
}
template<> PROTOBUF_NOINLINE ::proof_step* Arena::CreateMaybeMessage< ::proof_step >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proof_step >(arena);
}
template<> PROTOBUF_NOINLINE ::proof* Arena::CreateMaybeMessage< ::proof >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proof >(arena);
}
template<> PROTOBUF_NOINLINE ::trust_request_message* Arena::CreateMaybeMessage< ::trust_request_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trust_request_message >(arena);
}
template<> PROTOBUF_NOINLINE ::trust_response_message* Arena::CreateMaybeMessage< ::trust_response_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trust_response_message >(arena);
}
template<> PROTOBUF_NOINLINE ::storage_info_message* Arena::CreateMaybeMessage< ::storage_info_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::storage_info_message >(arena);
}
template<> PROTOBUF_NOINLINE ::channel_key_message* Arena::CreateMaybeMessage< ::channel_key_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::channel_key_message >(arena);
}
template<> PROTOBUF_NOINLINE ::trusted_service_message* Arena::CreateMaybeMessage< ::trusted_service_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trusted_service_message >(arena);
}
template<> PROTOBUF_NOINLINE ::tagged_claim* Arena::CreateMaybeMessage< ::tagged_claim >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tagged_claim >(arena);
}
template<> PROTOBUF_NOINLINE ::tagged_claims_sequence* Arena::CreateMaybeMessage< ::tagged_claims_sequence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tagged_claims_sequence >(arena);
}
template<> PROTOBUF_NOINLINE ::policy_store_message* Arena::CreateMaybeMessage< ::policy_store_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::policy_store_message >(arena);
}
template<> PROTOBUF_NOINLINE ::claims_sequence* Arena::CreateMaybeMessage< ::claims_sequence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::claims_sequence >(arena);
}
template<> PROTOBUF_NOINLINE ::signed_claim_sequence* Arena::CreateMaybeMessage< ::signed_claim_sequence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::signed_claim_sequence >(arena);
}
template<> PROTOBUF_NOINLINE ::tagged_signed_claim* Arena::CreateMaybeMessage< ::tagged_signed_claim >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tagged_signed_claim >(arena);
}
template<> PROTOBUF_NOINLINE ::buffer_sequence* Arena::CreateMaybeMessage< ::buffer_sequence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::buffer_sequence >(arena);
}
template<> PROTOBUF_NOINLINE ::run_request* Arena::CreateMaybeMessage< ::run_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::run_request >(arena);
}
template<> PROTOBUF_NOINLINE ::run_response* Arena::CreateMaybeMessage< ::run_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::run_response >(arena);
}
template<> PROTOBUF_NOINLINE ::app_request* Arena::CreateMaybeMessage< ::app_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::app_request >(arena);
}
template<> PROTOBUF_NOINLINE ::app_response* Arena::CreateMaybeMessage< ::app_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::app_response >(arena);
}
template<> PROTOBUF_NOINLINE ::tagged_blob_message* Arena::CreateMaybeMessage< ::tagged_blob_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tagged_blob_message >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
