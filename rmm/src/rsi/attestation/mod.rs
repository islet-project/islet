pub mod claims;

use alloc::{boxed::Box, string::String, vec::Vec};
use ciborium::{ser, Value};
use coset::{CoseSign1Builder, HeaderBuilder, TaggedCborSerializable};
use ecdsa::signature::Signer;
use tinyvec::ArrayVec;

use crate::{
    measurement::Measurement,
    rmi::{HASH_ALGO_SHA256, HASH_ALGO_SHA512},
};

use self::claims::RealmClaims;

pub const MAX_TOKEN_SIZE: usize = 4096;

const DUMMY_PLATFORM_TOKEN: [u8; 523] = [
    0xd2, 0x84, 0x44, 0xa1, 0x01, 0x38, 0x22, 0xa0, 0x59, 0x01, 0x9e, 0xa9, 0x0a, 0x58, 0x20, 0x21,
    0xba, 0xae, 0x2c, 0x2a, 0x77, 0xf5, 0xdf, 0xc2, 0x20, 0xe5, 0x48, 0x22, 0x1e, 0x34, 0x56, 0xa8,
    0x26, 0x67, 0x7d, 0x9d, 0x4a, 0xc2, 0x53, 0x2a, 0x02, 0x4e, 0x0f, 0x61, 0x0c, 0x10, 0xb2, 0x19,
    0x01, 0x00, 0x58, 0x21, 0x01, 0x1b, 0xe9, 0xc3, 0x36, 0xd7, 0xa7, 0x0b, 0x66, 0x13, 0x82, 0x93,
    0x4a, 0x26, 0x01, 0x92, 0x35, 0x1a, 0xc6, 0x1d, 0x24, 0xe2, 0x0d, 0x88, 0x2f, 0x49, 0x4a, 0xbe,
    0xe8, 0x7f, 0x8a, 0x1e, 0x98, 0x19, 0x01, 0x09, 0x78, 0x1c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
    0x2f, 0x61, 0x72, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x43, 0x41, 0x2d, 0x53, 0x53, 0x44,
    0x2f, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0x19, 0x09, 0x5b, 0x19, 0x30, 0x00, 0x19, 0x09, 0x5c, 0x58,
    0x20, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb,
    0xbb, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
    0xdd, 0x19, 0x09, 0x5f, 0x82, 0xa5, 0x01, 0x63, 0x42, 0x4c, 0x31, 0x06, 0x67, 0x73, 0x68, 0x61,
    0x2d, 0x32, 0x35, 0x36, 0x02, 0x58, 0x20, 0x69, 0x7d, 0xe4, 0x40, 0x7d, 0xae, 0x45, 0xc0, 0x75,
    0x06, 0xd1, 0xf0, 0x0b, 0x3d, 0xbf, 0x5c, 0xe1, 0xdb, 0x41, 0xf6, 0x9e, 0x17, 0x50, 0xa3, 0x11,
    0xf9, 0x1d, 0x21, 0x3e, 0x11, 0x98, 0x89, 0x04, 0x65, 0x30, 0x2e, 0x31, 0x2e, 0x30, 0x05, 0x58,
    0x20, 0xc6, 0xc3, 0x2a, 0x95, 0x7d, 0xf4, 0xc6, 0x69, 0x8c, 0x55, 0x0b, 0x69, 0x5d, 0x02, 0x2e,
    0xd5, 0x18, 0x0c, 0xae, 0x71, 0xf8, 0xb4, 0x9c, 0xbb, 0x75, 0xe6, 0x06, 0x1c, 0x2e, 0xf4, 0x97,
    0xe1, 0xa5, 0x01, 0x63, 0x42, 0x4c, 0x32, 0x06, 0x67, 0x73, 0x68, 0x61, 0x2d, 0x35, 0x31, 0x32,
    0x02, 0x58, 0x40, 0x8e, 0x17, 0x5a, 0x1d, 0xcd, 0x79, 0xb8, 0xb5, 0x1c, 0xe9, 0xe2, 0x59, 0xc2,
    0x56, 0x83, 0x05, 0xb7, 0x3f, 0x5f, 0x26, 0xf5, 0x67, 0x3a, 0x8c, 0xf7, 0x81, 0xa9, 0x45, 0x98,
    0xe4, 0x4f, 0x67, 0xfd, 0xf4, 0x92, 0x68, 0x69, 0xee, 0x76, 0x67, 0xe9, 0x12, 0x0b, 0x5c, 0x1b,
    0x97, 0x62, 0x5c, 0xc9, 0x6d, 0x34, 0x7c, 0x23, 0xce, 0x3c, 0x5f, 0x76, 0x3b, 0xf1, 0xd9, 0xb5,
    0x47, 0x81, 0xf6, 0x04, 0x67, 0x31, 0x2e, 0x39, 0x2e, 0x30, 0x2b, 0x30, 0x05, 0x58, 0x20, 0xa0,
    0x64, 0xb1, 0xad, 0x60, 0xfa, 0x18, 0x33, 0x94, 0xdd, 0xa5, 0x78, 0x91, 0x35, 0x7f, 0x97, 0x2e,
    0x4f, 0xe7, 0x22, 0x78, 0x2a, 0xdf, 0xf1, 0x85, 0x4c, 0x8b, 0x2a, 0x14, 0x2c, 0x04, 0x10, 0x19,
    0x09, 0x60, 0x73, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x68, 0x61, 0x74, 0x65, 0x76,
    0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x19, 0x09, 0x61, 0x44, 0xef, 0xbe, 0xad, 0xde, 0x19, 0x09,
    0x62, 0x67, 0x73, 0x68, 0x61, 0x2d, 0x32, 0x35, 0x36, 0x58, 0x60, 0x6a, 0xfb, 0x30, 0x01, 0x57,
    0x42, 0x88, 0x97, 0xbb, 0x3c, 0xdf, 0x19, 0x8c, 0x5f, 0xcf, 0x93, 0xcc, 0x75, 0x05, 0x00, 0x8d,
    0x83, 0x85, 0x20, 0x17, 0x4d, 0xf3, 0x61, 0x2e, 0xd0, 0x61, 0x3d, 0x79, 0x87, 0xd3, 0xbc, 0xaf,
    0x8e, 0x11, 0x58, 0x13, 0x6e, 0x3b, 0xbe, 0xf1, 0x07, 0x16, 0x68, 0x95, 0x4b, 0x05, 0xe6, 0x90,
    0xba, 0xe8, 0x44, 0x7a, 0xa3, 0xba, 0xbd, 0x4b, 0xd9, 0x76, 0x44, 0x88, 0xe2, 0x78, 0x3f, 0xf0,
    0x09, 0xa3, 0xdc, 0x48, 0x18, 0xbc, 0x84, 0xc6, 0x2d, 0x0e, 0x2f, 0x36, 0x91, 0x26, 0xa8, 0x1b,
    0xa0, 0xb7, 0x5b, 0x02, 0xc7, 0x63, 0x63, 0x34, 0xeb, 0xcc, 0x7f,
];

const DUMMY_RAK_PRIV: [u8; 48] = [
    0xd7, 0x50, 0xb1, 0x63, 0x2d, 0xbd, 0x75, 0xf4, 0x6f, 0x2b, 0xb1, 0x74, 0x44, 0x45, 0xb5, 0xd0,
    0xba, 0xf6, 0x7e, 0x41, 0x84, 0x08, 0x6d, 0xdf, 0x18, 0xd5, 0xeb, 0xac, 0x1d, 0xb6, 0x27, 0x10,
    0xde, 0x2f, 0x61, 0xee, 0xf7, 0x31, 0xc2, 0x66, 0x06, 0x7c, 0x10, 0x26, 0x26, 0x18, 0x57, 0x85,
];

const DUMMY_PERSONALIZATION_VALUE: [u8; 64] = [0; 64];

const CCA_TOKEN_COLLECTION: u64 = 399;
const CCA_PLATFORM_TOKEN: u64 = 44234;
const CCA_REALM_DELEGATED_TOKEN: u64 = 44241;

type PlatformToken = ArrayVec<[u8; 4096]>;
// 48B - the length of EC-P384 private key
type RAKPriv = ArrayVec<[u8; 48]>;

#[derive(Debug, Default)]
pub struct Attestation {
    platform_token: PlatformToken,
    rak_priv: RAKPriv,
}

impl Attestation {
    pub fn new(_platform_token: &[u8], _rak_priv: &[u8]) -> Self {
        let mut at = Self::default();
        at.set_platform_token(&DUMMY_PLATFORM_TOKEN);
        at.set_rak_priv(&DUMMY_RAK_PRIV);
        at
    }

    fn set_platform_token(&mut self, token: &[u8]) {
        self.platform_token = token.iter().cloned().collect();
    }

    fn set_rak_priv(&mut self, key_priv: &[u8]) {
        self.rak_priv = key_priv.iter().cloned().collect();
    }

    // TODO: Consider returning errors.
    // Though all errors in here are programmer errors
    // or a result of incorrect data passed from HES.
    pub fn create_attestation_token(
        &self,
        challenge: &[u8],
        measurements: &[Measurement],
        hash_algo: u8,
    ) -> Vec<u8> {
        let mut cca_token = Vec::new();

        let realm_token = self.create_realm_token(challenge, measurements, hash_algo);

        let realm_token_entry = (
            Value::Integer(CCA_REALM_DELEGATED_TOKEN.into()),
            Value::Bytes(realm_token),
        );

        let platform_token_entry = (
            Value::Integer(CCA_PLATFORM_TOKEN.into()),
            Value::Bytes(DUMMY_PLATFORM_TOKEN.to_vec()),
        );

        let mut token_map: Vec<(Value, Value)> = Vec::new();
        token_map.push(platform_token_entry);
        token_map.push(realm_token_entry);

        ser::into_writer(
            &Value::Tag(CCA_TOKEN_COLLECTION.into(), Box::new(Value::Map(token_map))),
            &mut cca_token,
        )
        .expect("Failed to serialize CCA token");

        cca_token
    }

    fn create_realm_token(
        &self,
        challenge: &[u8],
        measurements: &[Measurement],
        hash_algo: u8,
    ) -> Vec<u8> {
        let hash_algo_id = match hash_algo {
            HASH_ALGO_SHA256 => String::from("sha-256"),
            HASH_ALGO_SHA512 => String::from("sha-512"),
            _ => panic!("Unrecognized hash algorithm {}", hash_algo),
        };

        let secret_key =
            p384::SecretKey::from_slice(&self.rak_priv).expect("Failed to import private RAK.");

        let public_key = secret_key.public_key().to_sec1_bytes().to_vec();

        let claims = RealmClaims::init(
            challenge,
            &DUMMY_PERSONALIZATION_VALUE,
            measurements,
            hash_algo_id,
            &public_key,
            // TODO: should this value be stored somewhere else?
            String::from("sha-256"),
        );

        let mut claims_map: Vec<(Value, Value)> = Vec::new();

        claims_map.push(claims.challenge.into());
        claims_map.push(claims.personalization_value.into());
        claims_map.push(claims.rim.into());
        claims_map.push(claims.rems.into());
        claims_map.push(claims.measurement_hash_algo.into());
        claims_map.push(claims.rak_pub.into());
        claims_map.push(claims.rak_pub_hash_algo.into());

        let mut realm_token = Vec::new();
        ser::into_writer(&Value::Map(claims_map), &mut realm_token)
            .expect("Failed to serialize realm token");

        let protected = HeaderBuilder::new()
            .algorithm(coset::iana::Algorithm::ES384)
            .build();

        let sign1 = CoseSign1Builder::new()
            .protected(protected)
            .payload(realm_token)
            .create_signature(b"", |payload| Self::sign(secret_key, payload))
            .build();

        sign1
            .to_tagged_vec()
            .expect("Failed to create tagged signed token")
    }

    fn sign(secret_key: p384::SecretKey, data: &[u8]) -> Vec<u8> {
        let signing_key = p384::ecdsa::SigningKey::from_bytes(&secret_key.to_bytes())
            .expect("Failed to generate signing key");

        let signature: p384::ecdsa::Signature = signing_key
            .try_sign(data)
            .expect("Failed to create P384 signature");
        signature.to_vec()
    }
}
