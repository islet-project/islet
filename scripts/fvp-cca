#!/usr/bin/env python3

import argparse
import glob
import multiprocessing
import os
import subprocess
import sys

from config import *
from os import environ

os.makedirs(OUT, exist_ok=True)

def run(cmd, cwd, new_env=None):
    process = subprocess.run(cmd, cwd=cwd,
                       stderr=subprocess.STDOUT,
                       stdout=subprocess.PIPE,
                       universal_newlines=True,
                       env=new_env,
                       check=False)
    if process.returncode != 0:
        print("[!] Failed to run: %s @ %s" % (cmd, cwd))
        print(process.stdout)
        sys.exit(1)

def make(srcdir, extra=None):
    args = ["make"]
    if extra:
        args += extra
    run(args, cwd=srcdir)

def prepare_tf_a_tests():
    srcdir = TF_A_TESTS
    outbin = TFTF_BIN

    args = [
        "CROSS_COMPILE=%s" % CROSS_COMPILE,
        "PLAT=fvp",
        "DEBUG=1",
        "all",
        "pack_realm",
    ]

    print("[!] Building tf-a-tests...")
    make(srcdir, args)

    if not os.path.exists(outbin):
        print("[!] Failed to build: %s" % outbin)
        sys.exit(1)

def prepare_realm(name):
    print("[!] Building realm(%s)... " % name)
    srcdir = os.path.join(REALM, name)
    run(["make"], cwd=srcdir)
    run(["make", "install"], cwd=srcdir)

def prepare_bootloaders(rmm, bl33):
    args = [
        "CROSS_COMPILE=%s" % CROSS_COMPILE,
        "PLAT=fvp",
        "ENABLE_RME=1",
        "FVP_HW_CONFIG_DTS=fdts/fvp-base-gicv3-psci-1t.dts",
        "DEBUG=1",
        "BL33=%s" % bl33,
    ]

    if rmm == "islet":
        args += "RMM=%s/rmm.bin" % OUT,

    elif rmm == "tf-rmm":
        args += "RMM=%s/tf-rmm.img" % OUT,

    args += ["all", "fip"]

    bl_list = ["bl1.bin", "fip.bin"]
    print("[!] Building bootloaders(%s)... " % ', '.join(bl_list))
    make(TF_A, args)

    outdir = os.path.join(TF_A, "build/fvp/debug")
    for bootloader in bl_list:
        outbin = os.path.join(outdir, bootloader)
        if not os.path.exists(outbin):
            print("[!] Failed to build: %s" % outbin)
            sys.exit(1)

        run(["cp", outbin, OUT], cwd=ROOT)

def prepare_rmm(rmm):
    print("[!] Building realm management monitor...: %s" % rmm)

    if rmm == "islet":
        run(["cargo", "build", "--release"], cwd=RMM)
        run(["%sobjcopy" % CROSS_COMPILE, "-O", "binary",
             "%s/aarch64-unknown-none-softfloat/release/fvp" % OUT,
             "%s/rmm.bin" % OUT],
             cwd=ROOT)
    elif rmm == "tf-rmm":
        run(["./scripts/build_tf_rmm.sh", CROSS_COMPILE], cwd=ROOT)

def prepare_nw_linux():
    args = [
        "-j%d" % multiprocessing.cpu_count(), "-f",
        "fvp.mk",
        "linux"
    ]

    print("[!] Building linux...")
    make(BUILD_SCRIPT, args)

    print("[!] Building boot image...")
    run(["cp", "%s/arch/arm64/boot/Image" % NW_LINUX, OUT], cwd=ROOT)
    run(["cp", "%s/arch/arm64/boot/dts/arm/fvp-base-revc.dtb" % NW_LINUX, OUT], cwd=ROOT)
    run(["cp", PREBUILT_GRUB, OUT], cwd=ROOT)

    args = [
        "-j%d" % multiprocessing.cpu_count(), "-f",
        "fvp.mk",
        "boot-img" # DEPS:  $(GRUB_BIN) ${LINUX_BIN} ${LINUX_DTB_BIN}
    ]
    make(BUILD_SCRIPT, args)

def prepare_nw_aosp(no_prebuilt_initrd):
    new_env = environ.copy()
    new_env["BUILD_CONFIG"] = "../android-kernel/build.config.gki.aarch64"
    new_env["OUT_DIR"] = NW_AOSP_OUT
    new_env["KMI_SYMBOL_LIST_STRICT_MODE"] = "0"

    print("[!] Building Android kernel...")
    run("build/build.sh", cwd=NW_AOSP_BUILD_SCRIPT, new_env=new_env)

    print("[!] Building boot image...")
    args = [
        "cp",
        "%s/%s/arch/arm64/boot/Image" % (NW_AOSP_BUILD_SCRIPT, NW_AOSP_OUT),
        "%s/Image_aosp" % OUT
    ]
    run(args, cwd=ROOT)
    run(["cp", PREBUILT_AOSP_DTB, OUT], cwd=ROOT)
    if not no_prebuilt_initrd:
        run(["cp", PREBUILT_AOSP_INITRD, OUT], cwd=ROOT)
    run(["cp", PREBUILT_GRUB, OUT], cwd=ROOT)

    if not os.path.exists("%s/initrd-aosp.img" % OUT):
        print("[!] Place AOSP ramdisk image with name 'initrd-aosp.img' to %s" % OUT)
        sys.exit(1)

    print("[!] compsing boot image...")
    args = [
        "-j%d" % multiprocessing.cpu_count(), "-f",
        "fvp-android.mk",
        "boot-img" # DEPS:  $(GRUB_BIN) ${AOSP_KERNEL_BIN} ${AOSP_DTB_BIN}
    ]
    make(BUILD_SCRIPT, args)


def prepare_kvmtool(lkvm="lkvm"):
    print("[!] Building kvmtool...")
    args = [
        "CROSS_COMPILE=%s" % KVMTOOL_CROSS_COMPILE,
        "ARCH=arm64",
        "LIBFDT_DIR=%s/libfdt" % DTC,
        lkvm,
    ]
    make(KVMTOOL, args)
    run(["cp", "%s/%s" % (KVMTOOL, lkvm), OUT], cwd=ROOT)

def run_fvp_tf_a_tests(debug):
    print("[!] Running fvp for tf-a-tests...")
    args = ["./FVP_Base_RevC-2xAEMvA",
            "-C", "bp.flashloader0.fname=%s/fip.bin" % OUT,
            "-C", "bp.secureflashloader.fname=%s/bl1.bin" % OUT,
            "-f", CONFIG,
            "-Q", "1000"]
    if debug:
        args += ["--cadi-server"]
    run(args, cwd=FASTMODEL)

def run_fvp_linux(debug):
    print("[!] Running fvp for linux...")
    args = ["./FVP_Base_RevC-2xAEMvA",
            "-C", "bp.flashloader0.fname=%s/fip.bin" % OUT,
            "-C", "bp.secureflashloader.fname=%s/bl1.bin" % OUT,
            "-C", "bp.virtioblockdevice.image_path=%s/boot.img" % OUT,
            "-C", "bp.virtiop9device.root_path=%s" % SHARED_PATH,
            "-f", CONFIG,
            "-Q", "1000"]
    if debug:
        args += ["--cadi-server"]
    run(args, cwd=FASTMODEL)

def run_fvp_aosp(debug):
    os.makedirs(NW_AOSP_DATA, exist_ok=True)
    new_env = environ.copy()
    new_env["LD_PRELOAD"] = PREBUILT_AOSP_ADB
    print("[!] Running fvp for Android...")
    args = ["./FVP_Base_RevC-2xAEMvA",
            "-C", "bp.flashloader0.fname=%s/fip.bin" % OUT,
            "-C", "bp.secureflashloader.fname=%s/bl1.bin" % OUT,
            "-C", "bp.mmc.p_mmc_file=%s/boot-aosp.img" % OUT,
            "-C", "bp.virtioblockdevice.image_path=%s/system-qemu-aosp.img" % OUT,
            "-C", "bp.virtiop9device.root_path=%s" % NW_AOSP_DATA,
            "-C", "bp.virtio_net.hostbridge.userNetworking=1",
            "-C", "bp.virtio_net.hostbridge.userNetPorts=5555=5555",
            "-C",  "bp.virtio_net.enabled=1",
            "-f", CONFIG,
            "-Q", "1000"]
    if debug:
        args += ["--cadi-server"]
    run(args, cwd=FASTMODEL, new_env=new_env)

def place_realm_at_shared():
    os.makedirs(SHARED_PATH, exist_ok=True)
    run(["cp", "-R", "%s/." % REALM_ROOTFS, SHARED_PATH], cwd=ROOT)
    run(["cp", "-R", "%s/realm/." % OUT, SHARED_PATH], cwd=ROOT)
    run(["cp", "%s/lkvm" % OUT, SHARED_PATH], cwd=ROOT)
    run(["cp", LAUNCH_REALM, "%s/launch.sh" % SHARED_PATH], cwd=ROOT)

def clean_repo():
    run(["make", "distclean"], cwd=TF_A)
    run(["make", "distclean"], cwd=TF_A_TESTS)
    run(["make", "clean"], cwd=REALM_LINUX)
    run(["make", "clean"], cwd=KVMTOOL)

    args = ["-f", "fvp.mk", "linux-clean", "boot-img-clean"]
    make(BUILD_SCRIPT, args)

    run(["rm", "-rf", "out"], cwd=ROOT)
    run(["rm", "-rf", "build"], cwd=TF_RMM)

def get_all_realms():
    realms = []
    for dirp in glob.glob(os.path.join(REALM, "*/")):
        realms.append(os.path.basename(dirp.rstrip("/")))

    return sorted(realms)

def validate_args(args):
    nw_list = ["linux", "tf-a-tests", "aosp"]
    if not args.normal_world in nw_list:
        print("Please select one of the normal components:")
        print("  " + "\n  ".join(nw_list))
        sys.exit(1)

    rmm_list = ["islet", "trp", "tf-rmm"]
    if not args.rmm in rmm_list:
        print("Please select one of the rmm components:")
        print("  " + "\n  ".join(rmm_list))
        sys.exit(1)

    if args.realm is not None:
        realms = get_all_realms()
        if not args.realm in realms:
            print("Please select one of the realms:")
            print("  " + "\n  ".join(realms))
            sys.exit(1)

    if args.no_prebuilt_initrd:
        if args.run_only or args.normal_world != "aosp":
            print("--no-prebuilt-initrd is valid only when building normal world AOSP")
            sys.exit(1)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="FVP launcher for CCA")
    parser.add_argument("--normal-world", "-nw", help="A normal world component")
    parser.add_argument("--debug", "-d", help="Using debug component", action="store_true")
    parser.add_argument("--run-only", "-ro",
                        help="Running fvp without building", action="store_true")
    parser.add_argument("--build-only", "-bo",
                        help="Building components without running", action="store_true")
    parser.add_argument("--clean", "-c", help="Clean the repo", action="store_true")
    parser.add_argument("--realm", "-rm", help="A sample realm")
    parser.add_argument("--rmm", "-rmm", help="A realm management monitor (islet, trp, tf-rmm)", default="islet")
    parser.add_argument("--no-prebuilt-initrd", "-no-pi", help="Not using the prebuilt AOSP initrd", action="store_true")
    args = parser.parse_args()

    if args.clean:
        clean_repo()
        sys.exit(0)

    validate_args(args)

    if not args.run_only:
        prepare_rmm(args.rmm)

        if args.normal_world == "tf-a-tests":
            prepare_tf_a_tests()
            prepare_bootloaders(args.rmm, TFTF_BIN)
        elif args.normal_world == "aosp":
            prepare_kvmtool("lkvm-static")
            prepare_nw_aosp(args.no_prebuilt_initrd)
            prepare_bootloaders(args.rmm, PREBUILT_EDK2)
        else:
            prepare_kvmtool()
            prepare_nw_linux()
            prepare_bootloaders(args.rmm, PREBUILT_EDK2)

            if args.realm is not None:
                prepare_realm(args.realm)
                place_realm_at_shared()

    if not args.build_only and args.normal_world == "tf-a-tests":
        run_fvp_tf_a_tests(args.debug)

    if not args.build_only and args.normal_world == "linux":
        run_fvp_linux(args.debug)

    if not args.build_only and args.normal_world == "aosp":
        run_fvp_aosp(args.debug)
