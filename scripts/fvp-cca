#!/usr/bin/env python3

import argparse
import errno
import glob
import multiprocessing
import os
import signal
import subprocess
import sys

from config import *
from os import environ

os.makedirs(OUT, exist_ok=True)

def run(cmd, cwd, new_env=None):
    process = subprocess.run(cmd, cwd=cwd,
                       stderr=subprocess.STDOUT,
                       stdout=subprocess.PIPE,
                       universal_newlines=True,
                       env=new_env,
                       check=False)
    if process.returncode != 0:
        print("[!] Failed to run: %s @ %s" % (cmd, cwd))
        print(process.stdout)
        sys.exit(1)

def make(srcdir, extra=None):
    args = ["make"]
    if extra:
        args += extra
    run(args, cwd=srcdir)

def kill(pid):
    try:
        os.kill(pid, signal.SIGTERM)
    except OSError as e:
        if e.errno != errno.ESRCH:
            print(f"Error sending signal to {pid}: {e}")
            sys.exit(1)

def kill_pid_file(pid_file_path):
    if not os.path.exists(pid_file_path):
        return
    with open(pid_file_path, "r") as pid_file:
        pid_str = pid_file.read().strip()
        if pid_str.isdigit():
            kill(int(pid_str))
    os.remove(pid_file_path)

def custom_signal_handler(signum, frame):
    print("Signal %s intercepted" % signal.Signals(signum).name)
    kill_pid_file(HES_PID)
    signal.default_int_handler(signum, frame)

def make_single_line(excluded):
    with open(excluded, 'r') as excluded_file:
        excluded_tests = ""
        for i, line in enumerate(excluded_file.readlines()):
            line = line.strip()
            if i == 0:
                excluded_tests = line
            else:
                excluded_tests = ",".join([excluded_tests, line])
        return excluded_tests

def prepare_tf_a_tests(realm):
    srcdir = TF_A_TESTS
    outbin = TFTF_BIN

    args = [
        "CROSS_COMPILE=%s" % CROSS_COMPILE,
        "PLAT=fvp",
        "DEBUG=1",
        "all",
    ]

    if realm != "rsi-test":
        args += ["pack_realm"]

    print("[!] Building tf-a-tests...")
    make(srcdir, args)

    if not os.path.exists(outbin):
        print("[!] Failed to build: %s" % outbin)
        sys.exit(1)

    # Pack realm to tftf
    if realm == "rsi-test":
        tftf_max_size = 10485760
        args = [
            'dd',
            'if=%s' % RSI_TEST_BIN,
            'of=%s' % outbin,
            'obs=1',
            'seek=%s' % tftf_max_size
        ]
        run(args, cwd=ROOT)

def prepare_rsi_test():
    run(["cargo", "build", "--release"], cwd=RSI_TEST)
    run(["%sobjcopy" % CROSS_COMPILE, "-O", "binary",
         "%s/aarch64-unknown-none-softfloat/release/rsi-test" % OUT,
         RSI_TEST_BIN],
         cwd=ROOT)

    os.makedirs("%s/realm" % OUT, exist_ok=True)
    run(["cp", RSI_TEST_BIN, "%s/realm" % OUT], cwd=ROOT)

    if not os.path.exists(RSI_TEST_BIN):
        print("[!] Failed to build rsi-test")
        sys.exit(1)

def prepare_realm_aosp():
    new_env = environ.copy()
    new_env["BUILD_CONFIG"] = "../android-kernel/build.config.gki.aarch64.realm"
    new_env["OUT_DIR"] = RW_AOSP_OUT
    new_env["KMI_SYMBOL_LIST_STRICT_MODE"] = "0"
    new_env["SKIP_MRPROPER"] = "1"

    print("[!] Building Android kernel for realm...")
    run(["build/build.sh"], cwd=AOSP_BUILD_SCRIPT, new_env=new_env)

def prepare_realm(name):
    print("[!] Building realm(%s)... " % name)
    if args.realm == "rsi-test":
        prepare_rsi_test()
    elif args.realm == "aosp":
        prepare_realm_aosp()
    else:
        srcdir = os.path.join(REALM, name)
        run(["make"], cwd=srcdir)
        run(["make", "install"], cwd=srcdir)

def prepare_sdk():
    print("[!] Building SDK...")
    make(SDK, ["fvp"])

    print("[!] Building RSI kernel module...")
    make(RSI_KO)

def prepare_cli():
    print("[!] Building CLI...")
    make(CLI)

def prepare_islet_hes():
    print("[!] Building islet-hes... ")
    run(["cargo", "build", "--release"], cwd=HES_APP)

def prepare_bootloaders(rmm, bl33, hes):
    args = []

    if hes:
        args = [
            "CROSS_COMPILE=%s" % CROSS_COMPILE,
            "PLAT=fvp",
            "ENABLE_RME=1",
            "ENABLE_CONSOLE_GETC=1",
            "CFLAGS=-DARM_COT_cca=1",
            "FVP_HW_CONFIG_DTS=fdts/fvp-base-gicv3-psci-1t.dts",
            "DEBUG=0",
            "BL33=%s" % bl33,
            "PLAT_RSS_NOT_SUPPORTED=0",
            "PLAT_RSS_COMMS_USE_SERIAL=1",
            "MEASURED_BOOT=1",
            "MBEDTLS_DIR=%s" % MBEDTLS,
            "ENABLE_MPAM_FOR_LOWER_ELS=0",
        ]
    else:
        args = [
            "CROSS_COMPILE=%s" % CROSS_COMPILE,
            "PLAT=fvp",
            "ENABLE_RME=1",
            "FVP_HW_CONFIG_DTS=fdts/fvp-base-gicv3-psci-1t.dts",
            "DEBUG=1",
            "BL33=%s" % bl33]

    if rmm == "islet":
        args += "RMM=%s/rmm.bin" % OUT,

    elif rmm == "tf-rmm":
        args += "RMM=%s/tf-rmm.img" % OUT,

    args += ["all", "fip"]

    bl_list = ["bl1.bin", "fip.bin"]
    print("[!] Building bootloaders(%s)... " % ', '.join(bl_list))

    outdir = ""
    if hes:
        make(TF_A_RSS, args)
        outdir = os.path.join(TF_A_RSS, "build/fvp/release")
    else:
        make(TF_A, args)
        outdir = os.path.join(TF_A, "build/fvp/debug")

    for bootloader in bl_list:
        outbin = os.path.join(outdir, bootloader)
        if not os.path.exists(outbin):
            print("[!] Failed to build: %s" % outbin)
            sys.exit(1)

        run(["cp", outbin, OUT], cwd=ROOT)

def get_rmm_features(args):
    features = []

    if args.rmm == "islet":
        if args.rmm_log_level == "off":
            features += ["--features", "max_level_off"]
        elif args.rmm_log_level == "error":
            features += ["--features", "max_level_error"]
        elif args.rmm_log_level == "warn":
            features += ["--features", "max_level_warn"]
        elif args.rmm_log_level == "info":
            features += ["--features", "max_level_info"]
        elif args.rmm_log_level == "debug":
            features += ["--features", "max_level_debug"]
        else:
            features += ["--features", "max_level_trace"]

        if args.stat == True:
            features += ["--features", "stat"]
        if args.realm == "linux" or args.realm == "aosp" or args.use_prebuilt == True:
            features += ["--features", "realm_linux"]

    if features:
        print("[!] Setting", args.rmm, "features:", features)
    return features



def prepare_rmm(rmm, features):
    print("[!] Building realm management monitor...: %s" % rmm)

    if rmm == "islet":
        args = ["cargo", "build", "--release"]
        args += features

        run(args, cwd=RMM)
        run(["%sobjcopy" % CROSS_COMPILE, "-O", "binary",
             "%s/aarch64-unknown-none-softfloat/release/fvp" % OUT,
             "%s/rmm.bin" % OUT],
             cwd=ROOT)
    elif rmm == "tf-rmm":
        run(["./scripts/build-tf-rmm.sh", CROSS_COMPILE], cwd=ROOT)

def prepare_nw_linux(fvp_ip, host_ip, realm_launch):
    args = [
        "-j%d" % multiprocessing.cpu_count(), "-f",
        "fvp.mk",
        "linux"
    ]

    print("[!] Building linux...")
    make(BUILD_SCRIPT, args)

    print("[!] Building boot image...")
    run(["cp", "%s/arch/arm64/boot/Image" % NW_LINUX, OUT], cwd=ROOT)
    run(["cp", "%s/arch/arm64/boot/dts/arm/fvp-base-revc.dtb" % NW_LINUX, OUT], cwd=ROOT)
    run(["cp", PREBUILT_GRUB, OUT], cwd=ROOT)

    args = [
        "-j%d" % multiprocessing.cpu_count(), "-f",
        "fvp.mk",
    ]
    if realm_launch != False:
        args.append("boot-img-launch")
    elif fvp_ip != None and host_ip != None:
        args.append("boot-img-net")
        args.append("FVP_IP=" + fvp_ip) # if fvp_ip is given, boot-img tries to set fvp_ip into the fvp statically
        args.append("HOST_IP=" + host_ip) # in fvp, host_ip is used as a gateway address
    else:
        args.append("boot-img")

    make(BUILD_SCRIPT, args)

def prepare_nw_aosp(no_prebuilt_initrd):
    new_env = environ.copy()
    new_env["BUILD_CONFIG"] = "../android-kernel/build.config.gki.aarch64"
    new_env["OUT_DIR"] = NW_AOSP_OUT
    new_env["KMI_SYMBOL_LIST_STRICT_MODE"] = "0"
    new_env["SKIP_MRPROPER"] = "1"

    print("[!] Building Android kernel...")
    run(["build/build.sh"], cwd=AOSP_BUILD_SCRIPT, new_env=new_env)

    print("[!] Building boot image...")
    args = [
        "cp",
        "%s/%s/arch/arm64/boot/Image" % (AOSP_BUILD_SCRIPT, NW_AOSP_OUT),
        "%s/Image_aosp" % OUT
    ]
    run(args, cwd=ROOT)
    run(["cp", PREBUILT_AOSP_DTB, OUT], cwd=ROOT)
    if not no_prebuilt_initrd:
        run(["cp", PREBUILT_AOSP_INITRD, OUT], cwd=ROOT)
    run(["cp", PREBUILT_GRUB, OUT], cwd=ROOT)

    if not os.path.exists("%s/initrd-aosp.img" % OUT):
        print("[!] Place AOSP ramdisk image with name 'initrd-aosp.img' to %s" % OUT)
        sys.exit(1)

    print("[!] compsing boot image...")
    args = [
        "-j%d" % multiprocessing.cpu_count(), "-f",
        "fvp-android.mk",
        "boot-img" # DEPS:  $(GRUB_BIN) ${AOSP_KERNEL_BIN} ${AOSP_DTB_BIN}
    ]
    make(BUILD_SCRIPT, args)


def prepare_kvmtool(lkvm="lkvm"):
    print("[!] Building kvmtool...")
    args = [
        "CROSS_COMPILE=%s" % KVMTOOL_CROSS_COMPILE,
        "ARCH=arm64",
        "LIBFDT_DIR=%s/libfdt" % DTC,
        lkvm,
    ]
    make(KVMTOOL, args)
    run(["cp", "%s/%s" % (KVMTOOL, lkvm), OUT], cwd=ROOT)

def prepare_kvm_unit_tests():
    print("[!] Building kvm-unit-tests...")
    run(["./scripts/build-kvm-unit-tests.sh"], cwd=ROOT)
    run(["cp", "-R", "arm", "%s/%s" % (OUT, "kvm-unit-tests")], cwd=KVM_UNIT_TESTS)

def prepare_acs(start, end, excluded):
    print("[!] Building ACS...")
    if start == "" and end == "":
        if excluded == "":
            run(["./scripts/build-acs.sh"], cwd=ROOT)
        else:
            excluded_tests = make_single_line(excluded)
            run(["./scripts/build-acs.sh", excluded_tests], cwd=ROOT)
    else:
        if excluded == "":
            run(["./scripts/build-acs.sh", start, end], cwd=ROOT)
        else:
            excluded_tests = make_single_line(excluded)
            run(["./scripts/build-acs.sh", excluded_tests, start, end], cwd=ROOT)

def prepare_tap_network(host_ip, fvp_ip, route_ip, gateway, ifname):
    print("[!] Configuring a tap network for fvp...")
    run(["./scripts/configure_tap.sh", host_ip, fvp_ip, route_ip, gateway, ifname], cwd=ROOT)

def run_islet_hes():
    print("[!] Running islet-hes...")
    kill_pid_file(HES_PID)
    run(["cargo", "run", "--", "-d"], cwd=HES_APP)

def run_fvp_tf_a_tests(debug):
    print("[!] Running fvp for tf-a-tests...")
    args = ["./FVP_Base_RevC-2xAEMvA",
            "-C", "bp.flashloader0.fname=%s/fip.bin" % OUT,
            "-C", "bp.secureflashloader.fname=%s/bl1.bin" % OUT,
            "-f", FVP_CONFIG,
            "-Q", "1000"]
    if debug:
        args += ["--cadi-server"]
    run(args, cwd=FVP_DIR)

def run_fvp_linux(debug, trace, no_telnet):
    print("[!] Running fvp for linux...")
    args = ["./FVP_Base_RevC-2xAEMvA",
            "-C", "bp.flashloader0.fname=%s/fip.bin" % OUT,
            "-C", "bp.secureflashloader.fname=%s/bl1.bin" % OUT,
            "-C", "bp.virtioblockdevice.image_path=%s/boot.img" % OUT,
            "-C", "bp.virtiop9device.root_path=%s" % SHARED_PATH,
            "-f", FVP_CONFIG,
            "-Q", "1000"]
    if no_telnet:
        args += ["-C", "bp.terminal_0.start_telnet=0",
                "-C", "bp.terminal_1.start_telnet=0",
                "-C", "bp.terminal_2.start_telnet=0",
                "-C", "bp.terminal_3.start_telnet=0"]
    if debug:
        args += ["--cadi-server"]
    if trace:
        args += ["--plugin", "%s" % TRACE_PATH,
                "-C", "TRACE.TarmacTrace.trace_events=1",
                "-C", "TRACE.TarmacTrace.trace_instructions=1",
                "-C", "TRACE.TarmacTrace.start-instruction-count=1600000000",
                "-C", "TRACE.TarmacTrace.trace_core_registers=1",
                "-C", "TRACE.TarmacTrace.trace_vfp=1",
                "-C", "TRACE.TarmacTrace.trace_mmu=0",
                "-C", "TRACE.TarmacTrace.trace_loads_stores=1",
                "-C", "TRACE.TarmacTrace.trace_cache=0",
                "-C", "TRACE.TarmacTrace.updated-registers=1",
                "-C", "TRACE.TarmacTrace.trace-file=%s/trace.log" % OUT]
    run(args, cwd=FVP_DIR)

def run_fvp_linux_net(debug, host_ip, fvp_ip, fvp_tap_ip, realm_ip, route_ip, gateway, ifname):
    user_name = os.environ['USER']
    prepare_tap_network(host_ip, fvp_ip, route_ip, gateway, ifname)
    print("[!] Running fvp for linux with the tap network..", )
    args = ["./FVP_Base_RevC-2xAEMvA",
            "-C", "bp.flashloader0.fname=%s/fip.bin" % OUT,
            "-C", "bp.secureflashloader.fname=%s/bl1.bin" % OUT,
            "-C", "bp.virtioblockdevice.image_path=%s/boot.img" % OUT,
            "-C", "bp.virtiop9device.root_path=%s" % SHARED_PATH,
            "-C", "bp.virtio_net.hostbridge.interfaceName=ARM%s" % user_name,
            "-C", "bp.virtio_net.enabled=1",
            "-f", FVP_CONFIG,
            "-Q", "1000"]
    if debug:
        args += ["--cadi-server"]
    run(args, cwd=FVP_DIR)

def run_fvp_aosp(debug):
    os.makedirs(AOSP_SHARED_PATH, exist_ok=True)
    new_env = environ.copy()
    new_env["LD_PRELOAD"] = PREBUILT_AOSP_ADB
    print("[!] Running fvp for Android...")
    args = ["./FVP_Base_RevC-2xAEMvA",
            "-C", "bp.flashloader0.fname=%s/fip.bin" % OUT,
            "-C", "bp.secureflashloader.fname=%s/bl1.bin" % OUT,
            "-C", "bp.mmc.p_mmc_file=%s/boot-aosp.img" % OUT,
            "-C", "bp.virtioblockdevice.image_path=%s/system-qemu-aosp.img" % OUT,
            "-C", "bp.virtiop9device.root_path=%s" % AOSP_SHARED_PATH,
            "-C", "bp.virtio_net.hostbridge.userNetworking=1",
            "-C", "bp.virtio_net.hostbridge.userNetPorts=5555=5555",
            "-C",  "bp.virtio_net.enabled=1",
            "-f", FVP_CONFIG_AOSP,
            "-Q", "1000"]
    if debug:
        args += ["--cadi-server"]
    run(args, cwd=FVP_DIR, new_env=new_env)

def run_fvp_acs(no_telnet):
    print("[!] Running fvp for acs...")

    args = [ACS_RUN,
            "--model", FVP_BIN,
            "--bl1",  "%s/bl1.bin" % OUT,
            "--fip",  "%s/fip.bin" % OUT,
            "--acs_build_dir", ACS_BUILD]
    if no_telnet:
        args += ["--no_telnet"]
    run(args, cwd=ROOT)

def place_prebuilt_at_shared():
    run(["cp", "%s/rootfs-realm.cpio.gz" % REALM_ROOTFS, SHARED_PATH], cwd=ROOT)
    run(["cp", "%s/Image" % PREBUILT, OUT], cwd=ROOT)
    run(["cp", "%s/fvp-base-revc.dtb" % PREBUILT, OUT], cwd=ROOT)
    run(["cp", PREBUILT_GRUB, OUT], cwd=ROOT)

def place_script_at_shared():
    run(["cp", LAUNCH_REALM, SHARED_PATH], cwd=ROOT)
    run(["cp", TEST_REALM, SHARED_PATH], cwd=ROOT)
    run(["cp", CONFIGURE_NET, SHARED_PATH], cwd=ROOT)
    run(["cp", SET_REALM_IP, SHARED_PATH], cwd=ROOT)

def place_realm_at_shared(rmm, realm_ip, fvp_tap_ip, host_ip, no_kvm_unit_tests, no_prebuilt_ml):
    os.makedirs(SHARED_PATH, exist_ok=True)
    run(["cp", "%s/rootfs-realm.cpio.gz" % REALM_ROOTFS, SHARED_PATH], cwd=ROOT)
    run(["mv", "%s/realm/linux.realm" % OUT, SHARED_PATH], cwd=ROOT)
    run(["mv", "%s/lkvm" % OUT, SHARED_PATH], cwd=ROOT)
    place_script_at_shared()
    if no_kvm_unit_tests == False:
        run(["cp", "-R", "%s/kvm-unit-tests" % OUT, SHARED_PATH], cwd=ROOT)

    if realm_ip != None and fvp_tap_ip != None and host_ip != None:
        # set IP address accordingly
        run(["sed", "-i", "-e", "s/FVP_TAP_IP/%s/g" % fvp_tap_ip, "%s/configure-net.sh" % SHARED_PATH], cwd=ROOT)
        run(["sed", "-i", "-e", "s/HOST_IP/%s/g" % host_ip, "%s/configure-net.sh" % SHARED_PATH], cwd=ROOT)
        run(["sed", "-i", "-e", "s/FVP_TAP_IP/%s/g" % fvp_tap_ip, "%s/set-realm-ip.sh" % SHARED_PATH], cwd=ROOT)
        run(["sed", "-i", "-e", "s/REALM_IP/%s/g" % realm_ip, "%s/set-realm-ip.sh" % SHARED_PATH], cwd=ROOT)

    if no_prebuilt_ml == False:
        # prebuilt examples: confidential-ml
        os.makedirs(SHARED_EXAMPLES_PATH, exist_ok=True)
        run(["cp", "-R", "%s/confidential-ml" % EXAMPLES, SHARED_EXAMPLES_PATH], cwd=ROOT)
        run(["cp", "%s/confidential-ml/device/device.exe" % PREBUILT_EXAMPLES, "%s/confidential-ml/device/device.exe" % SHARED_EXAMPLES_PATH], cwd=ROOT)
        run(["cp", "-R", "%s/lib" % PREBUILT_EXAMPLES, SHARED_EXAMPLES_PATH], cwd=ROOT)
        run(["tar", "-zxvf", "%s/lib/libtensorflowlite.tar.gz" % SHARED_EXAMPLES_PATH, "-C", "%s/lib/" % SHARED_EXAMPLES_PATH], cwd=ROOT)

def clean_repo(target):
    clean_list = ["all", "tf-a", "tf-a-tests", "realm-linux", "kvmtool", "optee", "acs", "tf-rmm", "islet"]
    if not target in clean_list:
        print("Please select one of the clean list:")
        print("  " + "\n  ".join(clean_list))
        sys.exit(1)

    if target == "all" or target == "tf-a":
        run(["make", "distclean"], cwd=TF_A)
    if target == "all" or target == "tf-a-tests":
        run(["make", "distclean"], cwd=TF_A_TESTS)
    if target == "all" or target == "realm-linux":
        run(["make", "clean"], cwd=REALM_LINUX)
    if target == "all" or target == "kvmtool":
        run(["make", "clean"], cwd=KVMTOOL)

    if target == "all" or target == "optee":
        args = ["-f", "fvp.mk", "linux-clean", "boot-img-clean"]
        make(BUILD_SCRIPT, args)

    if target == "all" or target == "acs":
        run(["rm", "-rf", "build"], cwd=ACS)
    if target == "all" or target == "tf-rmm":
        run(["rm", "-rf", "build"], cwd=TF_RMM)
    if target == "all" or target == "islet":
        run(["rm", "-rf", "out"], cwd=ROOT)

def get_all_realms():
    realms = ["aosp"]
    for dirp in glob.glob(os.path.join(REALM, "*/")):
        realms.append(os.path.basename(dirp.rstrip("/")))

    return sorted(realms)

def validate_args(args):
    nw_list = ["linux", "linux-net", "tf-a-tests", "aosp", "acs"]
    if not args.use_prebuilt and not args.normal_world in nw_list:
        print("Please select one of the normal components:")
        print("  " + "\n  ".join(nw_list))
        sys.exit(1)

    rmm_list = ["islet", "trp", "tf-rmm"]
    if not args.rmm in rmm_list:
        print("Please select one of the rmm components:")
        print("  " + "\n  ".join(rmm_list))
        sys.exit(1)

    if args.realm is not None:
        realms = get_all_realms()
        if not args.realm in realms:
            print("Please select one of the realms:")
            print("  " + "\n  ".join(realms))
            sys.exit(1)

    if args.no_prebuilt_initrd:
        if args.run_only or args.normal_world != "aosp":
            print("--no-prebuilt-initrd is valid only when building normal world AOSP")
            sys.exit(1)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="FVP launcher for CCA")
    parser.add_argument("--normal-world", "-nw", help="A normal world component")
    parser.add_argument("--debug", "-d", help="Using debug component", action="store_true")
    parser.add_argument("--trace", "-t", help="Using trace component", action="store_true")
    parser.add_argument("--run-only", "-ro",
                        help="Running fvp without building", action="store_true")
    parser.add_argument("--build-only", "-bo",
                        help="Building components without running", action="store_true")
    parser.add_argument("--clean", "-c", help="Clean the repo (pass `target name` or `all`)", default="")
    parser.add_argument("--realm-launch", help="Execute realm launch on boot", action="store_true")
    parser.add_argument("--realm", "-rm", help="A sample realm")
    parser.add_argument("--rmm", "-rmm", help="A realm management monitor (islet, trp, tf-rmm)", default="islet")
    parser.add_argument("--use-prebuilt", help="Use prebuilt binary (realm-linux, nw-linux, lkvm, etc)", action="store_true")
    parser.add_argument("--no-prebuilt-initrd", "-no-pi", help="Not using the prebuilt AOSP initrd", action="store_true")
    parser.add_argument("--no-prebuilt-ml", help="Not using the prebuilt confidential-ml example", action="store_true")
    parser.add_argument("--no-kvm-unit-tests", help="Do not build kvm unit tests", action="store_true")
    parser.add_argument("--no-sdk", help="Do not build sdk", action="store_true")
    parser.add_argument("--no-telnet", help="Do not use telnet", action="store_true")
    parser.add_argument("--hes", help="Run with hes", action="store_true")

    # for the network capability of FVP linux
    parser.add_argument("--host-ip", "-hip", help="the ip address of host machine", default="193.168.10.15")
    parser.add_argument("--fvp-ip", "-fip", help="the ip address that is going to be assigned to the fvp host", default="193.168.10.5")
    parser.add_argument("--fvp-tap-ip", "-ftip", help="the ip address for tap device in fvp", default="193.168.20.20")
    parser.add_argument("--realm-ip", "-reip", help="the ip address for realm", default="193.168.20.10")
    parser.add_argument("--route-ip", "-roip", help="the route ip for fvp", default="193.168.20.0")
    parser.add_argument("--gateway", "-gw", help="the gateway ip for host machine", default="193.168.10.1")
    parser.add_argument("--ifname", "-if", help="the main interface name of host machine", default="eth0")
    parser.add_argument("--rmm-log-level", help="Determine RMM's log-level. Choose among (off, error, warn, info, debug, trace)", default="trace")
    parser.add_argument("--stat", help="Enable stat to check memory used size per command", action="store_true")
    parser.add_argument("--selected-tests", "-st", help="Select the first and end test name separated by ';'", default="")
    parser.add_argument("--excluded-tests", "-et", help="File name which contains the list of ACS tests to be excluded", default="")

    args = parser.parse_args()

    if args.clean != "":
        clean_repo(args.clean)
        sys.exit(0)

    validate_args(args)

    if not args.run_only:
        features = get_rmm_features(args)

        if args.hes:
            prepare_islet_hes()

        prepare_rmm(args.rmm, features)

        if args.realm is not None:
            prepare_realm(args.realm)

        if args.use_prebuilt:
            prepare_bootloaders(args.rmm, PREBUILT_EDK2, args.hes)
            place_script_at_shared()
            place_prebuilt_at_shared()
        elif args.normal_world == "tf-a-tests":
            prepare_tf_a_tests(args.realm)
            prepare_bootloaders(args.rmm, TFTF_BIN, args.hes)
        elif args.normal_world == "aosp":
            prepare_kvmtool("lkvm-static")
            prepare_nw_aosp(args.no_prebuilt_initrd)
            prepare_bootloaders(args.rmm, PREBUILT_EDK2, args.hes)
        elif args.normal_world == "acs":
            # When a target has changed either with `--selected-tests` or 
            # `--excluded-tests`, it is recommended for users to execute 
            # `./scripts/fvp-cca --clean acs` first, so that the current 
            # target is not confused by the previous target in the build.
            if args.selected_tests == "":
                prepare_acs("", "", args.excluded_tests)
                prepare_bootloaders(args.rmm, ACS_HOST, args.hes)
            else:
                selected_tests = args.selected_tests
                tests = selected_tests.split(";")
                test_num = len(tests)
                if test_num == 1:
                    prepare_acs(tests[0], tests[0], args.excluded_tests)
                elif test_num == 2:
                    prepare_acs(tests[0], tests[1], args.excluded_tests)
                else:
                    print("[!] Pass one or two test names separated by ';'")
                    sys.exit(1)
                prepare_bootloaders(args.rmm, ACS_HOST, args.hes)
        else:
            prepare_kvmtool()
            if args.no_kvm_unit_tests is False:
                prepare_kvm_unit_tests()
            prepare_nw_linux(args.fvp_ip, args.host_ip, args.realm_launch)
            prepare_bootloaders(args.rmm, PREBUILT_EDK2, args.hes)

            if args.realm is not None:
                place_realm_at_shared(args.rmm, args.realm_ip, args.fvp_tap_ip, args.host_ip, args.no_kvm_unit_tests, args.no_prebuilt_ml)
                if args.no_sdk is False:
                    prepare_sdk()
                    prepare_cli()

    if not args.build_only and args.hes:
        signal.signal(signal.SIGTERM, custom_signal_handler)
        signal.signal(signal.SIGINT, custom_signal_handler)
        run_islet_hes()

    if not args.build_only and args.normal_world == "tf-a-tests":
        run_fvp_tf_a_tests(args.debug)

    if not args.build_only and args.normal_world == "linux":
        run_fvp_linux(args.debug, args.trace, args.no_telnet)

    if not args.build_only and args.normal_world == "linux-net":
        run_fvp_linux_net(args.debug, args.host_ip, args.fvp_ip, args.fvp_tap_ip, args.realm_ip, args.route_ip, args.gateway, args.ifname)

    if not args.build_only and args.normal_world == "aosp":
        run_fvp_aosp(args.debug)

    if not args.build_only and args.normal_world == "acs":
        run_fvp_acs(args.no_telnet)
